
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000c98 memsz 0x00000c98 flags r-x
    LOAD off    0x00001cb8 vaddr 0x00008cb8 paddr 0x00008da8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e98 vaddr 0x00008e98 paddr 0x00008e98 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001da8  2**0
                  CONTENTS
  2 .text         00000c78  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  00008c98  00008c98  00001c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008cb8  00008da8  00001cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008e98  00008e98  00001e98  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00008ea8  00008ea8  00001da8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e8  00000000  00000000  00001dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003803  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001476  00000000  00000000  000058bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000017ac  00000000  00000000  00006d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e4  00000000  00000000  000084e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f8e  00000000  00000000  000088c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000132c  00000000  00000000  00009852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0000ab80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000248  00000000  00000000  0000abd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000bf92  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000bf95  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bf98  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bf99  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000bf9a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000bf9e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000bfa2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000bfa6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000bfaf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000bfb8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0000bfc1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0000bfd3  2**0
                  CONTENTS, READONLY
 29 .jdi          00003f63  00000000  00000000  0000bfff  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00042858  00000000  00000000  0000ff62  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008c98 l    d  .rodata	00000000 .rodata
00008cb8 l    d  .rwdata	00000000 .rwdata
00008e98 l    d  .bss	00000000 .bss
00008ea8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008144 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008cb8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00008ab0 g     F .text	0000002c alt_main
00008da8 g       *ABS*	00000000 __flash_rwdata_start
000080f8 g     F .text	0000004c printf
00008adc g     F .text	00000038 alt_putstr
00008da0 g     O .rwdata	00000004 jtag_uart
00008c58 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008e98 g     O .bss	00000004 errno
00008ea0 g     O .bss	00000004 alt_argv
00010d98 g       *ABS*	00000000 _gp
00008b14 g     F .text	00000004 usleep
000080bc g     F .text	0000003c _printf_r
00008914 g     F .text	00000064 .hidden __udivsi3
00008c60 g     F .text	00000038 alt_icache_flush
00008d98 g     O .rwdata	00000004 _global_impure_ptr
00008ea8 g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
00008c48 g     F .text	00000004 alt_dcache_flush_all
00008da8 g       *ABS*	00000000 __ram_rwdata_end
00008b18 g     F .text	00000060 write
00008cb8 g       *ABS*	00000000 __ram_rodata_end
00008978 g     F .text	00000058 .hidden __umodsi3
00008ea8 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008b9c g     F .text	00000034 altera_avalon_jtag_uart_write
000081b0 g     F .text	00000524 ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008b98 g     F .text	00000004 alt_sys_init
00008cb8 g       *ABS*	00000000 __ram_rwdata_start
00008c98 g       *ABS*	00000000 __ram_rodata_start
00008bd0 g     F .text	00000078 alt_busy_sleep
00008ea8 g       *ABS*	00000000 __alt_stack_base
000086f0 g     F .text	000000b8 __sfvwrite_small_dev
00008e98 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000060 main
00008e9c g     O .bss	00000004 alt_envp
00008da4 g     O .rwdata	00000004 alt_errno
0000881c g     F .text	00000084 .hidden __divsi3
00008c98 g       *ABS*	00000000 __flash_rodata_start
00008b78 g     F .text	00000020 alt_irq_init
000087c4 g     F .text	00000058 _write_r
00008d9c g     O .rwdata	00000004 _impure_ptr
00008ea4 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008da8 g       *ABS*	00000000 _edata
00008ea8 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000088a0 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
000087a8 g     F .text	0000001c strlen
00008c4c g     F .text	0000000c alt_icache_flush_all
000086d4 g     F .text	0000001c __vfprintf_internal
000089d0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff726c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6836614 	ori	gp,gp,3480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3a614 	ori	r2,r2,36504

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3aa14 	ori	r3,r3,36520

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff72ac>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00089d00 	call	89d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008ab00 	call	8ab0 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff72c0>

0000805c <main>:

#define switches (volatile char *) SWITCH_PIO_BASE
#define leds (char *) LED_PIO_BASE

int main() {
	alt_putstr("hello world...\n");
    805c:	01000074 	movhi	r4,1
#include "altera_avalon_pio_regs.h"

#define switches (volatile char *) SWITCH_PIO_BASE
#define leds (char *) LED_PIO_BASE

int main() {
    8060:	defffd04 	addi	sp,sp,-12
	alt_putstr("hello world...\n");
    8064:	21232604 	addi	r4,r4,-29544
#include "altera_avalon_pio_regs.h"

#define switches (volatile char *) SWITCH_PIO_BASE
#define leds (char *) LED_PIO_BASE

int main() {
    8068:	dfc00215 	stw	ra,8(sp)
    806c:	dc400115 	stw	r17,4(sp)
    8070:	dc000015 	stw	r16,0(sp)
	alt_putstr("hello world...\n");
    8074:	0008adc0 	call	8adc <alt_putstr>
	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 127);
    8078:	00800074 	movhi	r2,1
    807c:	10840c04 	addi	r2,r2,4144
    8080:	00c01fc4 	movi	r3,127
    8084:	10c00035 	stwio	r3,0(r2)
		int current = 0;
		while (1) {
			int val = IORD_ALTERA_AVALON_PIO_DATA(switches);
    8088:	04400074 	movhi	r17,1

int main() {
	alt_putstr("hello world...\n");
	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 127);
		int current = 0;
    808c:	0005883a 	mov	r2,zero
		while (1) {
			int val = IORD_ALTERA_AVALON_PIO_DATA(switches);
    8090:	8c440804 	addi	r17,r17,4128
    8094:	8c000037 	ldwio	r16,0(r17)
			if (val != current) {
    8098:	14000426 	beq	r2,r16,80ac <main+0x50>
				printf("Switches: %d\n", val);
    809c:	01000074 	movhi	r4,1
    80a0:	800b883a 	mov	r5,r16
    80a4:	21232a04 	addi	r4,r4,-29528
    80a8:	00080f80 	call	80f8 <printf>
				current = val;
			}
			usleep(1000);
    80ac:	0100fa04 	movi	r4,1000
    80b0:	0008b140 	call	8b14 <usleep>
	alt_putstr("hello world...\n");
	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 127);
		int current = 0;
		while (1) {
			int val = IORD_ALTERA_AVALON_PIO_DATA(switches);
    80b4:	8005883a 	mov	r2,r16
			if (val != current) {
				printf("Switches: %d\n", val);
				current = val;
			}
			usleep(1000);
		}
    80b8:	003ff606 	br	8094 <_gp+0xffff72fc>

000080bc <_printf_r>:
    80bc:	defffd04 	addi	sp,sp,-12
    80c0:	dfc00015 	stw	ra,0(sp)
    80c4:	d9800115 	stw	r6,4(sp)
    80c8:	d9c00215 	stw	r7,8(sp)
    80cc:	20c00217 	ldw	r3,8(r4)
    80d0:	01800074 	movhi	r6,1
    80d4:	31a1bc04 	addi	r6,r6,-30992
    80d8:	19800115 	stw	r6,4(r3)
    80dc:	280d883a 	mov	r6,r5
    80e0:	21400217 	ldw	r5,8(r4)
    80e4:	d9c00104 	addi	r7,sp,4
    80e8:	00081b00 	call	81b0 <___vfprintf_internal_r>
    80ec:	dfc00017 	ldw	ra,0(sp)
    80f0:	dec00304 	addi	sp,sp,12
    80f4:	f800283a 	ret

000080f8 <printf>:
    80f8:	defffc04 	addi	sp,sp,-16
    80fc:	dfc00015 	stw	ra,0(sp)
    8100:	d9400115 	stw	r5,4(sp)
    8104:	d9800215 	stw	r6,8(sp)
    8108:	d9c00315 	stw	r7,12(sp)
    810c:	00800074 	movhi	r2,1
    8110:	10a36704 	addi	r2,r2,-29284
    8114:	10800017 	ldw	r2,0(r2)
    8118:	01400074 	movhi	r5,1
    811c:	2961bc04 	addi	r5,r5,-30992
    8120:	10c00217 	ldw	r3,8(r2)
    8124:	d9800104 	addi	r6,sp,4
    8128:	19400115 	stw	r5,4(r3)
    812c:	200b883a 	mov	r5,r4
    8130:	11000217 	ldw	r4,8(r2)
    8134:	00086d40 	call	86d4 <__vfprintf_internal>
    8138:	dfc00017 	ldw	ra,0(sp)
    813c:	dec00404 	addi	sp,sp,16
    8140:	f800283a 	ret

00008144 <print_repeat>:
    8144:	defffb04 	addi	sp,sp,-20
    8148:	dc800315 	stw	r18,12(sp)
    814c:	dc400215 	stw	r17,8(sp)
    8150:	dc000115 	stw	r16,4(sp)
    8154:	dfc00415 	stw	ra,16(sp)
    8158:	2025883a 	mov	r18,r4
    815c:	2823883a 	mov	r17,r5
    8160:	d9800005 	stb	r6,0(sp)
    8164:	3821883a 	mov	r16,r7
    8168:	04000a0e 	bge	zero,r16,8194 <print_repeat+0x50>
    816c:	88800117 	ldw	r2,4(r17)
    8170:	01c00044 	movi	r7,1
    8174:	d80d883a 	mov	r6,sp
    8178:	880b883a 	mov	r5,r17
    817c:	9009883a 	mov	r4,r18
    8180:	103ee83a 	callr	r2
    8184:	843fffc4 	addi	r16,r16,-1
    8188:	103ff726 	beq	r2,zero,8168 <_gp+0xffff73d0>
    818c:	00bfffc4 	movi	r2,-1
    8190:	00000106 	br	8198 <print_repeat+0x54>
    8194:	0005883a 	mov	r2,zero
    8198:	dfc00417 	ldw	ra,16(sp)
    819c:	dc800317 	ldw	r18,12(sp)
    81a0:	dc400217 	ldw	r17,8(sp)
    81a4:	dc000117 	ldw	r16,4(sp)
    81a8:	dec00504 	addi	sp,sp,20
    81ac:	f800283a 	ret

000081b0 <___vfprintf_internal_r>:
    81b0:	deffe504 	addi	sp,sp,-108
    81b4:	d8c00804 	addi	r3,sp,32
    81b8:	df001915 	stw	fp,100(sp)
    81bc:	ddc01815 	stw	r23,96(sp)
    81c0:	dd801715 	stw	r22,92(sp)
    81c4:	dd401615 	stw	r21,88(sp)
    81c8:	dd001515 	stw	r20,84(sp)
    81cc:	dcc01415 	stw	r19,80(sp)
    81d0:	dc801315 	stw	r18,76(sp)
    81d4:	dc401215 	stw	r17,72(sp)
    81d8:	dc001115 	stw	r16,68(sp)
    81dc:	dfc01a15 	stw	ra,104(sp)
    81e0:	2027883a 	mov	r19,r4
    81e4:	2839883a 	mov	fp,r5
    81e8:	382d883a 	mov	r22,r7
    81ec:	d9800f15 	stw	r6,60(sp)
    81f0:	0021883a 	mov	r16,zero
    81f4:	d8000e15 	stw	zero,56(sp)
    81f8:	002f883a 	mov	r23,zero
    81fc:	002b883a 	mov	r21,zero
    8200:	0025883a 	mov	r18,zero
    8204:	0023883a 	mov	r17,zero
    8208:	d8000c15 	stw	zero,48(sp)
    820c:	d8000b15 	stw	zero,44(sp)
    8210:	0029883a 	mov	r20,zero
    8214:	d8c00915 	stw	r3,36(sp)
    8218:	d8c00f17 	ldw	r3,60(sp)
    821c:	19000003 	ldbu	r4,0(r3)
    8220:	20803fcc 	andi	r2,r4,255
    8224:	1080201c 	xori	r2,r2,128
    8228:	10bfe004 	addi	r2,r2,-128
    822c:	10011c26 	beq	r2,zero,86a0 <___vfprintf_internal_r+0x4f0>
    8230:	00c00044 	movi	r3,1
    8234:	a0c01426 	beq	r20,r3,8288 <___vfprintf_internal_r+0xd8>
    8238:	1d000216 	blt	r3,r20,8244 <___vfprintf_internal_r+0x94>
    823c:	a0000626 	beq	r20,zero,8258 <___vfprintf_internal_r+0xa8>
    8240:	00011306 	br	8690 <___vfprintf_internal_r+0x4e0>
    8244:	01400084 	movi	r5,2
    8248:	a1401d26 	beq	r20,r5,82c0 <___vfprintf_internal_r+0x110>
    824c:	014000c4 	movi	r5,3
    8250:	a1402926 	beq	r20,r5,82f8 <___vfprintf_internal_r+0x148>
    8254:	00010e06 	br	8690 <___vfprintf_internal_r+0x4e0>
    8258:	01400944 	movi	r5,37
    825c:	1140fb26 	beq	r2,r5,864c <___vfprintf_internal_r+0x49c>
    8260:	e0800117 	ldw	r2,4(fp)
    8264:	d9000005 	stb	r4,0(sp)
    8268:	01c00044 	movi	r7,1
    826c:	d80d883a 	mov	r6,sp
    8270:	e00b883a 	mov	r5,fp
    8274:	9809883a 	mov	r4,r19
    8278:	103ee83a 	callr	r2
    827c:	1000d61e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    8280:	84000044 	addi	r16,r16,1
    8284:	00010206 	br	8690 <___vfprintf_internal_r+0x4e0>
    8288:	01400c04 	movi	r5,48
    828c:	1140f826 	beq	r2,r5,8670 <___vfprintf_internal_r+0x4c0>
    8290:	01400944 	movi	r5,37
    8294:	11400a1e 	bne	r2,r5,82c0 <___vfprintf_internal_r+0x110>
    8298:	d8800005 	stb	r2,0(sp)
    829c:	e0800117 	ldw	r2,4(fp)
    82a0:	a00f883a 	mov	r7,r20
    82a4:	d80d883a 	mov	r6,sp
    82a8:	e00b883a 	mov	r5,fp
    82ac:	9809883a 	mov	r4,r19
    82b0:	103ee83a 	callr	r2
    82b4:	1000c81e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    82b8:	84000044 	addi	r16,r16,1
    82bc:	0000f306 	br	868c <___vfprintf_internal_r+0x4dc>
    82c0:	217ff404 	addi	r5,r4,-48
    82c4:	29403fcc 	andi	r5,r5,255
    82c8:	00c00244 	movi	r3,9
    82cc:	19400736 	bltu	r3,r5,82ec <___vfprintf_internal_r+0x13c>
    82d0:	00bfffc4 	movi	r2,-1
    82d4:	88800226 	beq	r17,r2,82e0 <___vfprintf_internal_r+0x130>
    82d8:	8c4002a4 	muli	r17,r17,10
    82dc:	00000106 	br	82e4 <___vfprintf_internal_r+0x134>
    82e0:	0023883a 	mov	r17,zero
    82e4:	2c63883a 	add	r17,r5,r17
    82e8:	0000e206 	br	8674 <___vfprintf_internal_r+0x4c4>
    82ec:	01400b84 	movi	r5,46
    82f0:	1140e426 	beq	r2,r5,8684 <___vfprintf_internal_r+0x4d4>
    82f4:	05000084 	movi	r20,2
    82f8:	213ff404 	addi	r4,r4,-48
    82fc:	21003fcc 	andi	r4,r4,255
    8300:	00c00244 	movi	r3,9
    8304:	19000736 	bltu	r3,r4,8324 <___vfprintf_internal_r+0x174>
    8308:	00bfffc4 	movi	r2,-1
    830c:	90800226 	beq	r18,r2,8318 <___vfprintf_internal_r+0x168>
    8310:	948002a4 	muli	r18,r18,10
    8314:	00000106 	br	831c <___vfprintf_internal_r+0x16c>
    8318:	0025883a 	mov	r18,zero
    831c:	24a5883a 	add	r18,r4,r18
    8320:	0000db06 	br	8690 <___vfprintf_internal_r+0x4e0>
    8324:	00c01b04 	movi	r3,108
    8328:	10c0d426 	beq	r2,r3,867c <___vfprintf_internal_r+0x4cc>
    832c:	013fffc4 	movi	r4,-1
    8330:	91000226 	beq	r18,r4,833c <___vfprintf_internal_r+0x18c>
    8334:	d8000b15 	stw	zero,44(sp)
    8338:	00000106 	br	8340 <___vfprintf_internal_r+0x190>
    833c:	04800044 	movi	r18,1
    8340:	01001a44 	movi	r4,105
    8344:	11001626 	beq	r2,r4,83a0 <___vfprintf_internal_r+0x1f0>
    8348:	20800916 	blt	r4,r2,8370 <___vfprintf_internal_r+0x1c0>
    834c:	010018c4 	movi	r4,99
    8350:	11008a26 	beq	r2,r4,857c <___vfprintf_internal_r+0x3cc>
    8354:	01001904 	movi	r4,100
    8358:	11001126 	beq	r2,r4,83a0 <___vfprintf_internal_r+0x1f0>
    835c:	01001604 	movi	r4,88
    8360:	1100ca1e 	bne	r2,r4,868c <___vfprintf_internal_r+0x4dc>
    8364:	00c00044 	movi	r3,1
    8368:	d8c00e15 	stw	r3,56(sp)
    836c:	00001406 	br	83c0 <___vfprintf_internal_r+0x210>
    8370:	01001cc4 	movi	r4,115
    8374:	11009a26 	beq	r2,r4,85e0 <___vfprintf_internal_r+0x430>
    8378:	20800416 	blt	r4,r2,838c <___vfprintf_internal_r+0x1dc>
    837c:	01001bc4 	movi	r4,111
    8380:	1100c21e 	bne	r2,r4,868c <___vfprintf_internal_r+0x4dc>
    8384:	05400204 	movi	r21,8
    8388:	00000e06 	br	83c4 <___vfprintf_internal_r+0x214>
    838c:	01001d44 	movi	r4,117
    8390:	11000c26 	beq	r2,r4,83c4 <___vfprintf_internal_r+0x214>
    8394:	01001e04 	movi	r4,120
    8398:	11000926 	beq	r2,r4,83c0 <___vfprintf_internal_r+0x210>
    839c:	0000bb06 	br	868c <___vfprintf_internal_r+0x4dc>
    83a0:	b5000104 	addi	r20,r22,4
    83a4:	b8000726 	beq	r23,zero,83c4 <___vfprintf_internal_r+0x214>
    83a8:	dd000d15 	stw	r20,52(sp)
    83ac:	b5800017 	ldw	r22,0(r22)
    83b0:	b000080e 	bge	r22,zero,83d4 <___vfprintf_internal_r+0x224>
    83b4:	05adc83a 	sub	r22,zero,r22
    83b8:	02800044 	movi	r10,1
    83bc:	00000606 	br	83d8 <___vfprintf_internal_r+0x228>
    83c0:	05400404 	movi	r21,16
    83c4:	b0c00104 	addi	r3,r22,4
    83c8:	d8c00d15 	stw	r3,52(sp)
    83cc:	b5800017 	ldw	r22,0(r22)
    83d0:	002f883a 	mov	r23,zero
    83d4:	0015883a 	mov	r10,zero
    83d8:	d829883a 	mov	r20,sp
    83dc:	b0001426 	beq	r22,zero,8430 <___vfprintf_internal_r+0x280>
    83e0:	b009883a 	mov	r4,r22
    83e4:	a80b883a 	mov	r5,r21
    83e8:	da801015 	stw	r10,64(sp)
    83ec:	00089140 	call	8914 <__udivsi3>
    83f0:	1549383a 	mul	r4,r2,r21
    83f4:	00c00244 	movi	r3,9
    83f8:	da801017 	ldw	r10,64(sp)
    83fc:	b12dc83a 	sub	r22,r22,r4
    8400:	1d800216 	blt	r3,r22,840c <___vfprintf_internal_r+0x25c>
    8404:	b5800c04 	addi	r22,r22,48
    8408:	00000506 	br	8420 <___vfprintf_internal_r+0x270>
    840c:	d8c00e17 	ldw	r3,56(sp)
    8410:	18000226 	beq	r3,zero,841c <___vfprintf_internal_r+0x26c>
    8414:	b5800dc4 	addi	r22,r22,55
    8418:	00000106 	br	8420 <___vfprintf_internal_r+0x270>
    841c:	b58015c4 	addi	r22,r22,87
    8420:	a5800005 	stb	r22,0(r20)
    8424:	a5000044 	addi	r20,r20,1
    8428:	102d883a 	mov	r22,r2
    842c:	003feb06 	br	83dc <_gp+0xffff7644>
    8430:	a6c7c83a 	sub	r3,r20,sp
    8434:	d8c00a15 	stw	r3,40(sp)
    8438:	90c5c83a 	sub	r2,r18,r3
    843c:	00800a0e 	bge	zero,r2,8468 <___vfprintf_internal_r+0x2b8>
    8440:	a085883a 	add	r2,r20,r2
    8444:	01400c04 	movi	r5,48
    8448:	d8c00917 	ldw	r3,36(sp)
    844c:	a009883a 	mov	r4,r20
    8450:	a0c0032e 	bgeu	r20,r3,8460 <___vfprintf_internal_r+0x2b0>
    8454:	a5000044 	addi	r20,r20,1
    8458:	21400005 	stb	r5,0(r4)
    845c:	a0bffa1e 	bne	r20,r2,8448 <_gp+0xffff76b0>
    8460:	a6c7c83a 	sub	r3,r20,sp
    8464:	d8c00a15 	stw	r3,40(sp)
    8468:	d8c00a17 	ldw	r3,40(sp)
    846c:	50d3883a 	add	r9,r10,r3
    8470:	d8c00b17 	ldw	r3,44(sp)
    8474:	8a6dc83a 	sub	r22,r17,r9
    8478:	18001726 	beq	r3,zero,84d8 <___vfprintf_internal_r+0x328>
    847c:	50000a26 	beq	r10,zero,84a8 <___vfprintf_internal_r+0x2f8>
    8480:	00800b44 	movi	r2,45
    8484:	d8800805 	stb	r2,32(sp)
    8488:	e0800117 	ldw	r2,4(fp)
    848c:	01c00044 	movi	r7,1
    8490:	d9800804 	addi	r6,sp,32
    8494:	e00b883a 	mov	r5,fp
    8498:	9809883a 	mov	r4,r19
    849c:	103ee83a 	callr	r2
    84a0:	10004d1e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    84a4:	84000044 	addi	r16,r16,1
    84a8:	0580070e 	bge	zero,r22,84c8 <___vfprintf_internal_r+0x318>
    84ac:	b00f883a 	mov	r7,r22
    84b0:	01800c04 	movi	r6,48
    84b4:	e00b883a 	mov	r5,fp
    84b8:	9809883a 	mov	r4,r19
    84bc:	00081440 	call	8144 <print_repeat>
    84c0:	1000451e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    84c4:	85a1883a 	add	r16,r16,r22
    84c8:	d8c00a17 	ldw	r3,40(sp)
    84cc:	a013883a 	mov	r9,r20
    84d0:	1d2dc83a 	sub	r22,r3,r20
    84d4:	00002206 	br	8560 <___vfprintf_internal_r+0x3b0>
    84d8:	0580090e 	bge	zero,r22,8500 <___vfprintf_internal_r+0x350>
    84dc:	b00f883a 	mov	r7,r22
    84e0:	01800804 	movi	r6,32
    84e4:	e00b883a 	mov	r5,fp
    84e8:	9809883a 	mov	r4,r19
    84ec:	da801015 	stw	r10,64(sp)
    84f0:	00081440 	call	8144 <print_repeat>
    84f4:	da801017 	ldw	r10,64(sp)
    84f8:	1000371e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    84fc:	85a1883a 	add	r16,r16,r22
    8500:	503ff126 	beq	r10,zero,84c8 <_gp+0xffff7730>
    8504:	00800b44 	movi	r2,45
    8508:	d8800805 	stb	r2,32(sp)
    850c:	e0800117 	ldw	r2,4(fp)
    8510:	01c00044 	movi	r7,1
    8514:	d9800804 	addi	r6,sp,32
    8518:	e00b883a 	mov	r5,fp
    851c:	9809883a 	mov	r4,r19
    8520:	103ee83a 	callr	r2
    8524:	10002c1e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    8528:	84000044 	addi	r16,r16,1
    852c:	003fe606 	br	84c8 <_gp+0xffff7730>
    8530:	4a7fffc4 	addi	r9,r9,-1
    8534:	48800003 	ldbu	r2,0(r9)
    8538:	01c00044 	movi	r7,1
    853c:	d9800804 	addi	r6,sp,32
    8540:	d8800805 	stb	r2,32(sp)
    8544:	e0800117 	ldw	r2,4(fp)
    8548:	e00b883a 	mov	r5,fp
    854c:	da401015 	stw	r9,64(sp)
    8550:	9809883a 	mov	r4,r19
    8554:	103ee83a 	callr	r2
    8558:	da401017 	ldw	r9,64(sp)
    855c:	10001e1e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    8560:	8245c83a 	sub	r2,r16,r9
    8564:	4d89883a 	add	r4,r9,r22
    8568:	a085883a 	add	r2,r20,r2
    856c:	013ff016 	blt	zero,r4,8530 <_gp+0xffff7798>
    8570:	1021883a 	mov	r16,r2
    8574:	dd800d17 	ldw	r22,52(sp)
    8578:	00004406 	br	868c <___vfprintf_internal_r+0x4dc>
    857c:	00800044 	movi	r2,1
    8580:	1440080e 	bge	r2,r17,85a4 <___vfprintf_internal_r+0x3f4>
    8584:	8d3fffc4 	addi	r20,r17,-1
    8588:	a00f883a 	mov	r7,r20
    858c:	01800804 	movi	r6,32
    8590:	e00b883a 	mov	r5,fp
    8594:	9809883a 	mov	r4,r19
    8598:	00081440 	call	8144 <print_repeat>
    859c:	10000e1e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    85a0:	8521883a 	add	r16,r16,r20
    85a4:	b0800017 	ldw	r2,0(r22)
    85a8:	01c00044 	movi	r7,1
    85ac:	d80d883a 	mov	r6,sp
    85b0:	d8800005 	stb	r2,0(sp)
    85b4:	e0800117 	ldw	r2,4(fp)
    85b8:	e00b883a 	mov	r5,fp
    85bc:	9809883a 	mov	r4,r19
    85c0:	b5000104 	addi	r20,r22,4
    85c4:	103ee83a 	callr	r2
    85c8:	1000031e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x428>
    85cc:	84000044 	addi	r16,r16,1
    85d0:	a02d883a 	mov	r22,r20
    85d4:	00002d06 	br	868c <___vfprintf_internal_r+0x4dc>
    85d8:	00bfffc4 	movi	r2,-1
    85dc:	00003106 	br	86a4 <___vfprintf_internal_r+0x4f4>
    85e0:	b5000017 	ldw	r20,0(r22)
    85e4:	b0c00104 	addi	r3,r22,4
    85e8:	d8c00a15 	stw	r3,40(sp)
    85ec:	a009883a 	mov	r4,r20
    85f0:	00087a80 	call	87a8 <strlen>
    85f4:	8893c83a 	sub	r9,r17,r2
    85f8:	102d883a 	mov	r22,r2
    85fc:	0240090e 	bge	zero,r9,8624 <___vfprintf_internal_r+0x474>
    8600:	480f883a 	mov	r7,r9
    8604:	01800804 	movi	r6,32
    8608:	e00b883a 	mov	r5,fp
    860c:	9809883a 	mov	r4,r19
    8610:	da401015 	stw	r9,64(sp)
    8614:	00081440 	call	8144 <print_repeat>
    8618:	da401017 	ldw	r9,64(sp)
    861c:	103fee1e 	bne	r2,zero,85d8 <_gp+0xffff7840>
    8620:	8261883a 	add	r16,r16,r9
    8624:	e0800117 	ldw	r2,4(fp)
    8628:	b00f883a 	mov	r7,r22
    862c:	a00d883a 	mov	r6,r20
    8630:	e00b883a 	mov	r5,fp
    8634:	9809883a 	mov	r4,r19
    8638:	103ee83a 	callr	r2
    863c:	103fe61e 	bne	r2,zero,85d8 <_gp+0xffff7840>
    8640:	85a1883a 	add	r16,r16,r22
    8644:	dd800a17 	ldw	r22,40(sp)
    8648:	00001006 	br	868c <___vfprintf_internal_r+0x4dc>
    864c:	05c00044 	movi	r23,1
    8650:	04bfffc4 	movi	r18,-1
    8654:	d8000e15 	stw	zero,56(sp)
    8658:	05400284 	movi	r21,10
    865c:	9023883a 	mov	r17,r18
    8660:	d8000c15 	stw	zero,48(sp)
    8664:	d8000b15 	stw	zero,44(sp)
    8668:	b829883a 	mov	r20,r23
    866c:	00000806 	br	8690 <___vfprintf_internal_r+0x4e0>
    8670:	dd000b15 	stw	r20,44(sp)
    8674:	05000084 	movi	r20,2
    8678:	00000506 	br	8690 <___vfprintf_internal_r+0x4e0>
    867c:	00c00044 	movi	r3,1
    8680:	d8c00c15 	stw	r3,48(sp)
    8684:	050000c4 	movi	r20,3
    8688:	00000106 	br	8690 <___vfprintf_internal_r+0x4e0>
    868c:	0029883a 	mov	r20,zero
    8690:	d8c00f17 	ldw	r3,60(sp)
    8694:	18c00044 	addi	r3,r3,1
    8698:	d8c00f15 	stw	r3,60(sp)
    869c:	003ede06 	br	8218 <_gp+0xffff7480>
    86a0:	8005883a 	mov	r2,r16
    86a4:	dfc01a17 	ldw	ra,104(sp)
    86a8:	df001917 	ldw	fp,100(sp)
    86ac:	ddc01817 	ldw	r23,96(sp)
    86b0:	dd801717 	ldw	r22,92(sp)
    86b4:	dd401617 	ldw	r21,88(sp)
    86b8:	dd001517 	ldw	r20,84(sp)
    86bc:	dcc01417 	ldw	r19,80(sp)
    86c0:	dc801317 	ldw	r18,76(sp)
    86c4:	dc401217 	ldw	r17,72(sp)
    86c8:	dc001117 	ldw	r16,68(sp)
    86cc:	dec01b04 	addi	sp,sp,108
    86d0:	f800283a 	ret

000086d4 <__vfprintf_internal>:
    86d4:	00800074 	movhi	r2,1
    86d8:	10a36704 	addi	r2,r2,-29284
    86dc:	300f883a 	mov	r7,r6
    86e0:	280d883a 	mov	r6,r5
    86e4:	200b883a 	mov	r5,r4
    86e8:	11000017 	ldw	r4,0(r2)
    86ec:	00081b01 	jmpi	81b0 <___vfprintf_internal_r>

000086f0 <__sfvwrite_small_dev>:
    86f0:	2880000b 	ldhu	r2,0(r5)
    86f4:	1080020c 	andi	r2,r2,8
    86f8:	10002126 	beq	r2,zero,8780 <__sfvwrite_small_dev+0x90>
    86fc:	2880008f 	ldh	r2,2(r5)
    8700:	defffa04 	addi	sp,sp,-24
    8704:	dc000015 	stw	r16,0(sp)
    8708:	dfc00515 	stw	ra,20(sp)
    870c:	dd000415 	stw	r20,16(sp)
    8710:	dcc00315 	stw	r19,12(sp)
    8714:	dc800215 	stw	r18,8(sp)
    8718:	dc400115 	stw	r17,4(sp)
    871c:	2821883a 	mov	r16,r5
    8720:	10001216 	blt	r2,zero,876c <__sfvwrite_small_dev+0x7c>
    8724:	2027883a 	mov	r19,r4
    8728:	3025883a 	mov	r18,r6
    872c:	3823883a 	mov	r17,r7
    8730:	05010004 	movi	r20,1024
    8734:	04400b0e 	bge	zero,r17,8764 <__sfvwrite_small_dev+0x74>
    8738:	880f883a 	mov	r7,r17
    873c:	a440010e 	bge	r20,r17,8744 <__sfvwrite_small_dev+0x54>
    8740:	01c10004 	movi	r7,1024
    8744:	8140008f 	ldh	r5,2(r16)
    8748:	900d883a 	mov	r6,r18
    874c:	9809883a 	mov	r4,r19
    8750:	00087c40 	call	87c4 <_write_r>
    8754:	0080050e 	bge	zero,r2,876c <__sfvwrite_small_dev+0x7c>
    8758:	88a3c83a 	sub	r17,r17,r2
    875c:	90a5883a 	add	r18,r18,r2
    8760:	003ff406 	br	8734 <_gp+0xffff799c>
    8764:	0005883a 	mov	r2,zero
    8768:	00000706 	br	8788 <__sfvwrite_small_dev+0x98>
    876c:	8080000b 	ldhu	r2,0(r16)
    8770:	10801014 	ori	r2,r2,64
    8774:	8080000d 	sth	r2,0(r16)
    8778:	00bfffc4 	movi	r2,-1
    877c:	00000206 	br	8788 <__sfvwrite_small_dev+0x98>
    8780:	00bfffc4 	movi	r2,-1
    8784:	f800283a 	ret
    8788:	dfc00517 	ldw	ra,20(sp)
    878c:	dd000417 	ldw	r20,16(sp)
    8790:	dcc00317 	ldw	r19,12(sp)
    8794:	dc800217 	ldw	r18,8(sp)
    8798:	dc400117 	ldw	r17,4(sp)
    879c:	dc000017 	ldw	r16,0(sp)
    87a0:	dec00604 	addi	sp,sp,24
    87a4:	f800283a 	ret

000087a8 <strlen>:
    87a8:	2005883a 	mov	r2,r4
    87ac:	10c00007 	ldb	r3,0(r2)
    87b0:	18000226 	beq	r3,zero,87bc <strlen+0x14>
    87b4:	10800044 	addi	r2,r2,1
    87b8:	003ffc06 	br	87ac <_gp+0xffff7a14>
    87bc:	1105c83a 	sub	r2,r2,r4
    87c0:	f800283a 	ret

000087c4 <_write_r>:
    87c4:	defffd04 	addi	sp,sp,-12
    87c8:	dc000015 	stw	r16,0(sp)
    87cc:	04000074 	movhi	r16,1
    87d0:	dc400115 	stw	r17,4(sp)
    87d4:	8423a604 	addi	r16,r16,-29032
    87d8:	2023883a 	mov	r17,r4
    87dc:	2809883a 	mov	r4,r5
    87e0:	300b883a 	mov	r5,r6
    87e4:	380d883a 	mov	r6,r7
    87e8:	dfc00215 	stw	ra,8(sp)
    87ec:	80000015 	stw	zero,0(r16)
    87f0:	0008b180 	call	8b18 <write>
    87f4:	00ffffc4 	movi	r3,-1
    87f8:	10c0031e 	bne	r2,r3,8808 <_write_r+0x44>
    87fc:	80c00017 	ldw	r3,0(r16)
    8800:	18000126 	beq	r3,zero,8808 <_write_r+0x44>
    8804:	88c00015 	stw	r3,0(r17)
    8808:	dfc00217 	ldw	ra,8(sp)
    880c:	dc400117 	ldw	r17,4(sp)
    8810:	dc000017 	ldw	r16,0(sp)
    8814:	dec00304 	addi	sp,sp,12
    8818:	f800283a 	ret

0000881c <__divsi3>:
    881c:	20001b16 	blt	r4,zero,888c <__divsi3+0x70>
    8820:	000f883a 	mov	r7,zero
    8824:	28001616 	blt	r5,zero,8880 <__divsi3+0x64>
    8828:	200d883a 	mov	r6,r4
    882c:	29001a2e 	bgeu	r5,r4,8898 <__divsi3+0x7c>
    8830:	00800804 	movi	r2,32
    8834:	00c00044 	movi	r3,1
    8838:	00000106 	br	8840 <__divsi3+0x24>
    883c:	10000d26 	beq	r2,zero,8874 <__divsi3+0x58>
    8840:	294b883a 	add	r5,r5,r5
    8844:	10bfffc4 	addi	r2,r2,-1
    8848:	18c7883a 	add	r3,r3,r3
    884c:	293ffb36 	bltu	r5,r4,883c <_gp+0xffff7aa4>
    8850:	0005883a 	mov	r2,zero
    8854:	18000726 	beq	r3,zero,8874 <__divsi3+0x58>
    8858:	0005883a 	mov	r2,zero
    885c:	31400236 	bltu	r6,r5,8868 <__divsi3+0x4c>
    8860:	314dc83a 	sub	r6,r6,r5
    8864:	10c4b03a 	or	r2,r2,r3
    8868:	1806d07a 	srli	r3,r3,1
    886c:	280ad07a 	srli	r5,r5,1
    8870:	183ffa1e 	bne	r3,zero,885c <_gp+0xffff7ac4>
    8874:	38000126 	beq	r7,zero,887c <__divsi3+0x60>
    8878:	0085c83a 	sub	r2,zero,r2
    887c:	f800283a 	ret
    8880:	014bc83a 	sub	r5,zero,r5
    8884:	39c0005c 	xori	r7,r7,1
    8888:	003fe706 	br	8828 <_gp+0xffff7a90>
    888c:	0109c83a 	sub	r4,zero,r4
    8890:	01c00044 	movi	r7,1
    8894:	003fe306 	br	8824 <_gp+0xffff7a8c>
    8898:	00c00044 	movi	r3,1
    889c:	003fee06 	br	8858 <_gp+0xffff7ac0>

000088a0 <__modsi3>:
    88a0:	20001716 	blt	r4,zero,8900 <__modsi3+0x60>
    88a4:	000f883a 	mov	r7,zero
    88a8:	2005883a 	mov	r2,r4
    88ac:	28001216 	blt	r5,zero,88f8 <__modsi3+0x58>
    88b0:	2900162e 	bgeu	r5,r4,890c <__modsi3+0x6c>
    88b4:	01800804 	movi	r6,32
    88b8:	00c00044 	movi	r3,1
    88bc:	00000106 	br	88c4 <__modsi3+0x24>
    88c0:	30000a26 	beq	r6,zero,88ec <__modsi3+0x4c>
    88c4:	294b883a 	add	r5,r5,r5
    88c8:	31bfffc4 	addi	r6,r6,-1
    88cc:	18c7883a 	add	r3,r3,r3
    88d0:	293ffb36 	bltu	r5,r4,88c0 <_gp+0xffff7b28>
    88d4:	18000526 	beq	r3,zero,88ec <__modsi3+0x4c>
    88d8:	1806d07a 	srli	r3,r3,1
    88dc:	11400136 	bltu	r2,r5,88e4 <__modsi3+0x44>
    88e0:	1145c83a 	sub	r2,r2,r5
    88e4:	280ad07a 	srli	r5,r5,1
    88e8:	183ffb1e 	bne	r3,zero,88d8 <_gp+0xffff7b40>
    88ec:	38000126 	beq	r7,zero,88f4 <__modsi3+0x54>
    88f0:	0085c83a 	sub	r2,zero,r2
    88f4:	f800283a 	ret
    88f8:	014bc83a 	sub	r5,zero,r5
    88fc:	003fec06 	br	88b0 <_gp+0xffff7b18>
    8900:	0109c83a 	sub	r4,zero,r4
    8904:	01c00044 	movi	r7,1
    8908:	003fe706 	br	88a8 <_gp+0xffff7b10>
    890c:	00c00044 	movi	r3,1
    8910:	003ff106 	br	88d8 <_gp+0xffff7b40>

00008914 <__udivsi3>:
    8914:	200d883a 	mov	r6,r4
    8918:	2900152e 	bgeu	r5,r4,8970 <__udivsi3+0x5c>
    891c:	28001416 	blt	r5,zero,8970 <__udivsi3+0x5c>
    8920:	00800804 	movi	r2,32
    8924:	00c00044 	movi	r3,1
    8928:	00000206 	br	8934 <__udivsi3+0x20>
    892c:	10000e26 	beq	r2,zero,8968 <__udivsi3+0x54>
    8930:	28000516 	blt	r5,zero,8948 <__udivsi3+0x34>
    8934:	294b883a 	add	r5,r5,r5
    8938:	10bfffc4 	addi	r2,r2,-1
    893c:	18c7883a 	add	r3,r3,r3
    8940:	293ffa36 	bltu	r5,r4,892c <_gp+0xffff7b94>
    8944:	18000826 	beq	r3,zero,8968 <__udivsi3+0x54>
    8948:	0005883a 	mov	r2,zero
    894c:	31400236 	bltu	r6,r5,8958 <__udivsi3+0x44>
    8950:	314dc83a 	sub	r6,r6,r5
    8954:	10c4b03a 	or	r2,r2,r3
    8958:	1806d07a 	srli	r3,r3,1
    895c:	280ad07a 	srli	r5,r5,1
    8960:	183ffa1e 	bne	r3,zero,894c <_gp+0xffff7bb4>
    8964:	f800283a 	ret
    8968:	0005883a 	mov	r2,zero
    896c:	f800283a 	ret
    8970:	00c00044 	movi	r3,1
    8974:	003ff406 	br	8948 <_gp+0xffff7bb0>

00008978 <__umodsi3>:
    8978:	2005883a 	mov	r2,r4
    897c:	2900122e 	bgeu	r5,r4,89c8 <__umodsi3+0x50>
    8980:	28001116 	blt	r5,zero,89c8 <__umodsi3+0x50>
    8984:	01800804 	movi	r6,32
    8988:	00c00044 	movi	r3,1
    898c:	00000206 	br	8998 <__umodsi3+0x20>
    8990:	30000c26 	beq	r6,zero,89c4 <__umodsi3+0x4c>
    8994:	28000516 	blt	r5,zero,89ac <__umodsi3+0x34>
    8998:	294b883a 	add	r5,r5,r5
    899c:	31bfffc4 	addi	r6,r6,-1
    89a0:	18c7883a 	add	r3,r3,r3
    89a4:	293ffa36 	bltu	r5,r4,8990 <_gp+0xffff7bf8>
    89a8:	18000626 	beq	r3,zero,89c4 <__umodsi3+0x4c>
    89ac:	1806d07a 	srli	r3,r3,1
    89b0:	11400136 	bltu	r2,r5,89b8 <__umodsi3+0x40>
    89b4:	1145c83a 	sub	r2,r2,r5
    89b8:	280ad07a 	srli	r5,r5,1
    89bc:	183ffb1e 	bne	r3,zero,89ac <_gp+0xffff7c14>
    89c0:	f800283a 	ret
    89c4:	f800283a 	ret
    89c8:	00c00044 	movi	r3,1
    89cc:	003ff706 	br	89ac <_gp+0xffff7c14>

000089d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    89d0:	deffff04 	addi	sp,sp,-4
    89d4:	01000074 	movhi	r4,1
    89d8:	01400074 	movhi	r5,1
    89dc:	dfc00015 	stw	ra,0(sp)
    89e0:	21232e04 	addi	r4,r4,-29512
    89e4:	29636a04 	addi	r5,r5,-29272

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    89e8:	2140061e 	bne	r4,r5,8a04 <alt_load+0x34>
    89ec:	01000074 	movhi	r4,1
    89f0:	01400074 	movhi	r5,1
    89f4:	21200804 	addi	r4,r4,-32736
    89f8:	29600804 	addi	r5,r5,-32736
    89fc:	2140121e 	bne	r4,r5,8a48 <alt_load+0x78>
    8a00:	00000b06 	br	8a30 <alt_load+0x60>
    8a04:	00c00074 	movhi	r3,1
    8a08:	18e36a04 	addi	r3,r3,-29272
    8a0c:	1907c83a 	sub	r3,r3,r4
    8a10:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a14:	10fff526 	beq	r2,r3,89ec <_gp+0xffff7c54>
    {
      *to++ = *from++;
    8a18:	114f883a 	add	r7,r2,r5
    8a1c:	39c00017 	ldw	r7,0(r7)
    8a20:	110d883a 	add	r6,r2,r4
    8a24:	10800104 	addi	r2,r2,4
    8a28:	31c00015 	stw	r7,0(r6)
    8a2c:	003ff906 	br	8a14 <_gp+0xffff7c7c>
    8a30:	01000074 	movhi	r4,1
    8a34:	01400074 	movhi	r5,1
    8a38:	21232604 	addi	r4,r4,-29544
    8a3c:	29632604 	addi	r5,r5,-29544

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a40:	2140101e 	bne	r4,r5,8a84 <alt_load+0xb4>
    8a44:	00000b06 	br	8a74 <alt_load+0xa4>
    8a48:	00c00074 	movhi	r3,1
    8a4c:	18e00804 	addi	r3,r3,-32736
    8a50:	1907c83a 	sub	r3,r3,r4
    8a54:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a58:	10fff526 	beq	r2,r3,8a30 <_gp+0xffff7c98>
    {
      *to++ = *from++;
    8a5c:	114f883a 	add	r7,r2,r5
    8a60:	39c00017 	ldw	r7,0(r7)
    8a64:	110d883a 	add	r6,r2,r4
    8a68:	10800104 	addi	r2,r2,4
    8a6c:	31c00015 	stw	r7,0(r6)
    8a70:	003ff906 	br	8a58 <_gp+0xffff7cc0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8a74:	0008c480 	call	8c48 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8a78:	dfc00017 	ldw	ra,0(sp)
    8a7c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8a80:	0008c4c1 	jmpi	8c4c <alt_icache_flush_all>
    8a84:	00c00074 	movhi	r3,1
    8a88:	18e32e04 	addi	r3,r3,-29512
    8a8c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a90:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a94:	18bff726 	beq	r3,r2,8a74 <_gp+0xffff7cdc>
    {
      *to++ = *from++;
    8a98:	114f883a 	add	r7,r2,r5
    8a9c:	39c00017 	ldw	r7,0(r7)
    8aa0:	110d883a 	add	r6,r2,r4
    8aa4:	10800104 	addi	r2,r2,4
    8aa8:	31c00015 	stw	r7,0(r6)
    8aac:	003ff906 	br	8a94 <_gp+0xffff7cfc>

00008ab0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ab0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ab4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ab8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8abc:	0008b780 	call	8b78 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ac0:	0008b980 	call	8b98 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8ac4:	d1a04117 	ldw	r6,-32508(gp)
    8ac8:	d1604217 	ldw	r5,-32504(gp)
    8acc:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8ad0:	dfc00017 	ldw	ra,0(sp)
    8ad4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8ad8:	000805c1 	jmpi	805c <main>

00008adc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8adc:	defffe04 	addi	sp,sp,-8
    8ae0:	dc000015 	stw	r16,0(sp)
    8ae4:	dfc00115 	stw	ra,4(sp)
    8ae8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8aec:	00087a80 	call	87a8 <strlen>
    8af0:	01000074 	movhi	r4,1
    8af4:	000f883a 	mov	r7,zero
    8af8:	100d883a 	mov	r6,r2
    8afc:	800b883a 	mov	r5,r16
    8b00:	21236804 	addi	r4,r4,-29280
#else
    return fputs(str, stdout);
#endif
#endif
}
    8b04:	dfc00117 	ldw	ra,4(sp)
    8b08:	dc000017 	ldw	r16,0(sp)
    8b0c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b10:	0008b9c1 	jmpi	8b9c <altera_avalon_jtag_uart_write>

00008b14 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8b14:	0008bd01 	jmpi	8bd0 <alt_busy_sleep>

00008b18 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8b18:	00800044 	movi	r2,1
    8b1c:	20800226 	beq	r4,r2,8b28 <write+0x10>
    8b20:	00800084 	movi	r2,2
    8b24:	2080041e 	bne	r4,r2,8b38 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8b28:	01000074 	movhi	r4,1
    8b2c:	000f883a 	mov	r7,zero
    8b30:	21236804 	addi	r4,r4,-29280
    8b34:	0008b9c1 	jmpi	8b9c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8b38:	d0a00317 	ldw	r2,-32756(gp)
    8b3c:	10000926 	beq	r2,zero,8b64 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8b40:	deffff04 	addi	sp,sp,-4
    8b44:	dfc00015 	stw	ra,0(sp)
    8b48:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8b4c:	00c01444 	movi	r3,81
    8b50:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8b54:	00bfffc4 	movi	r2,-1
    8b58:	dfc00017 	ldw	ra,0(sp)
    8b5c:	dec00104 	addi	sp,sp,4
    8b60:	f800283a 	ret
    8b64:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8b68:	00c01444 	movi	r3,81
    8b6c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8b70:	00bfffc4 	movi	r2,-1
    8b74:	f800283a 	ret

00008b78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8b78:	deffff04 	addi	sp,sp,-4
    8b7c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8b80:	0008c580 	call	8c58 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8b84:	00800044 	movi	r2,1
    8b88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8b8c:	dfc00017 	ldw	ra,0(sp)
    8b90:	dec00104 	addi	sp,sp,4
    8b94:	f800283a 	ret

00008b98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8b98:	f800283a 	ret

00008b9c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8b9c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8ba0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8ba4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8ba8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8bac:	2980072e 	bgeu	r5,r6,8bcc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8bb0:	38c00037 	ldwio	r3,0(r7)
    8bb4:	18ffffec 	andhi	r3,r3,65535
    8bb8:	183ffc26 	beq	r3,zero,8bac <_gp+0xffff7e14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8bbc:	28c00007 	ldb	r3,0(r5)
    8bc0:	20c00035 	stwio	r3,0(r4)
    8bc4:	29400044 	addi	r5,r5,1
    8bc8:	003ff806 	br	8bac <_gp+0xffff7e14>

  return count;
}
    8bcc:	f800283a 	ret

00008bd0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8bd0:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8bd4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8bd8:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8bdc:	dc000015 	stw	r16,0(sp)
    8be0:	dfc00115 	stw	ra,4(sp)
    8be4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8be8:	00089140 	call	8914 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8bec:	10000e26 	beq	r2,zero,8c28 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8bf0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8bf4:	013e0034 	movhi	r4,63488
    8bf8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8bfc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c00:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c04:	297fffc4 	addi	r5,r5,-1
    8c08:	283ffe1e 	bne	r5,zero,8c04 <_gp+0xffff7e6c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8c0c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c10:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8c14:	18bffb16 	blt	r3,r2,8c04 <_gp+0xffff7e6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8c18:	8020913a 	slli	r16,r16,4
    8c1c:	843fffc4 	addi	r16,r16,-1
    8c20:	803ffe1e 	bne	r16,zero,8c1c <_gp+0xffff7e84>
    8c24:	00000306 	br	8c34 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8c28:	8020913a 	slli	r16,r16,4
    8c2c:	843fffc4 	addi	r16,r16,-1
    8c30:	043ffe16 	blt	zero,r16,8c2c <_gp+0xffff7e94>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8c34:	0005883a 	mov	r2,zero
    8c38:	dfc00117 	ldw	ra,4(sp)
    8c3c:	dc000017 	ldw	r16,0(sp)
    8c40:	dec00204 	addi	sp,sp,8
    8c44:	f800283a 	ret

00008c48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8c48:	f800283a 	ret

00008c4c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8c4c:	01420004 	movi	r5,2048
    8c50:	0009883a 	mov	r4,zero
    8c54:	0008c601 	jmpi	8c60 <alt_icache_flush>

00008c58 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8c58:	000170fa 	wrctl	ienable,zero
    8c5c:	f800283a 	ret

00008c60 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    8c60:	00820004 	movi	r2,2048
    8c64:	1140012e 	bgeu	r2,r5,8c6c <alt_icache_flush+0xc>
    8c68:	100b883a 	mov	r5,r2
    8c6c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8c70:	2005883a 	mov	r2,r4
    8c74:	1140032e 	bgeu	r2,r5,8c84 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8c78:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8c7c:	10800804 	addi	r2,r2,32
    8c80:	003ffc06 	br	8c74 <_gp+0xffff7edc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8c84:	210007cc 	andi	r4,r4,31
    8c88:	20000126 	beq	r4,zero,8c90 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8c8c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8c90:	0000203a 	flushp
    8c94:	f800283a 	ret
