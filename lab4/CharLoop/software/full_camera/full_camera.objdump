
full_camera.elf:     file format elf32-littlenios2
full_camera.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000011bc memsz 0x000011bc flags r-x
    LOAD off    0x000021dc vaddr 0x000091dc paddr 0x00009338 align 2**12
         filesz 0x0000015c memsz 0x0000015c flags rw-
    LOAD off    0x00002494 vaddr 0x00009494 paddr 0x00009494 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00002338  2**0
                  CONTENTS
  2 .text         00001044  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000178  00009064  00009064  00002064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000015c  000091dc  00009338  000021dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009494  00009494  00002494  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000094a4  000094a4  00002338  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000370  00000000  00000000  00002360  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000448f  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001877  00000000  00000000  00006b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001b65  00000000  00000000  000083d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004cc  00000000  00000000  00009f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000011b9  00000000  00000000  0000a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000165a  00000000  00000000  0000b5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0000cc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  0000cc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000e21e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000e221  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000e225  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000e226  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000e22a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000e22e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000e232  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000e23b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000e244  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0000e24d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002d  00000000  00000000  0000e25f  2**0
                  CONTENTS, READONLY
 29 .jdi          00003f63  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005a006  00000000  00000000  000121ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009064 l    d  .rodata	00000000 .rodata
000091dc l    d  .rwdata	00000000 .rwdata
00009494 l    d  .bss	00000000 .bss
000094a4 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../full_camera_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000082e8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000091dc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009010 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00008c98 g     F .text	0000002c alt_main
00009338 g       *ABS*	00000000 __flash_rwdata_start
0000829c g     F .text	0000004c printf
0000931c g     O .rwdata	00000004 jtag_uart
00009024 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009494 g     O .bss	00000004 errno
0000949c g     O .bss	00000004 alt_argv
00011314 g       *ABS*	00000000 _gp
00008e7c g     F .text	00000004 usleep
000092bc g     O .rwdata	00000030 alt_fd_list
00008f04 g     F .text	0000005c altera_avalon_jtag_uart_read
00008260 g     F .text	0000003c _printf_r
00008ab8 g     F .text	00000064 .hidden __udivsi3
0000902c g     F .text	00000038 alt_icache_flush
00009320 g     O .rwdata	00000004 alt_max_fd
00009314 g     O .rwdata	00000004 _global_impure_ptr
000094a4 g       *ABS*	00000000 __bss_end
00008b74 g     F .text	00000044 alt_getchar
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000092ec g     O .rwdata	00000028 alt_dev_null
0000900c g     F .text	00000004 alt_dcache_flush_all
00009338 g       *ABS*	00000000 __ram_rwdata_end
00009324 g     O .rwdata	00000008 alt_dev_list
00008e80 g     F .text	00000060 write
000091dc g       *ABS*	00000000 __ram_rodata_end
00008b1c g     F .text	00000058 .hidden __umodsi3
000094a4 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008f60 g     F .text	00000034 altera_avalon_jtag_uart_write
00008354 g     F .text	00000524 ___vfprintf_internal_r
00008cc4 g     F .text	00000170 alt_printf
00008020 g     F .text	0000003c _start
00008f00 g     F .text	00000004 alt_sys_init
000091dc g       *ABS*	00000000 __ram_rwdata_start
00009064 g       *ABS*	00000000 __ram_rodata_start
00008f94 g     F .text	00000078 alt_busy_sleep
000094a4 g       *ABS*	00000000 __alt_stack_base
00008894 g     F .text	000000b8 __sfvwrite_small_dev
00009494 g       *ABS*	00000000 __bss_start
000080e8 g     F .text	00000178 main
00009498 g     O .bss	00000004 alt_envp
00009334 g     O .rwdata	00000004 alt_errno
000089c0 g     F .text	00000084 .hidden __divsi3
00009064 g       *ABS*	00000000 __flash_rodata_start
00008ee0 g     F .text	00000020 alt_irq_init
00008968 g     F .text	00000058 _write_r
0000805c g     F .text	0000008c sendData
00009318 g     O .rwdata	00000004 _impure_ptr
000094a0 g     O .bss	00000004 alt_argc
0000932c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009338 g       *ABS*	00000000 _edata
000094a4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008a44 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
0000894c g     F .text	0000001c strlen
00008e34 g     F .text	00000048 alt_putchar
00009018 g     F .text	0000000c alt_icache_flush_all
00008878 g     F .text	0000001c __vfprintf_internal
00008bb8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff6cf0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d684c514 	ori	gp,gp,4884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a52514 	ori	r2,r2,38036

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e52914 	ori	r3,r3,38052

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff6d30>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008bb80 	call	8bb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008c980 	call	8c98 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6d44>

0000805c <sendData>:
#include "altera_avalon_pio_regs.h"
#include "unistd.h"
#include <system.h>
#include <stdio.h>

void sendData(int input) {
    805c:	defffd04 	addi	sp,sp,-12
	IOWR_ALTERA_AVALON_PIO_DATA(DATAOUT_BASE, input);  // start the system
    8060:	00800074 	movhi	r2,1
#include "altera_avalon_pio_regs.h"
#include "unistd.h"
#include <system.h>
#include <stdio.h>

void sendData(int input) {
    8064:	dfc00215 	stw	ra,8(sp)
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dc000015 	stw	r16,0(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(DATAOUT_BASE, input);  // start the system
    8070:	10841c04 	addi	r2,r2,4208
    8074:	11000035 	stwio	r4,0(r2)
	usleep(1000);
    8078:	0100fa04 	movi	r4,1000
	IOWR_ALTERA_AVALON_PIO_DATA(LOAD_BASE, 1);
    807c:	04400074 	movhi	r17,1
#include <system.h>
#include <stdio.h>

void sendData(int input) {
	IOWR_ALTERA_AVALON_PIO_DATA(DATAOUT_BASE, input);  // start the system
	usleep(1000);
    8080:	0008e7c0 	call	8e7c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LOAD_BASE, 1);
    8084:	04000044 	movi	r16,1
    8088:	8c440804 	addi	r17,r17,4128
    808c:	8c000035 	stwio	r16,0(r17)
	usleep(1000);
    8090:	0100fa04 	movi	r4,1000
    8094:	0008e7c0 	call	8e7c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LOAD_BASE, 0);
    8098:	88000035 	stwio	zero,0(r17)
	IOWR_ALTERA_AVALON_PIO_DATA(TRANSMIT_BASE, 1);
    809c:	00800074 	movhi	r2,1
    80a0:	10841404 	addi	r2,r2,4176
    80a4:	14000035 	stwio	r16,0(r2)
	while (IORD_ALTERA_AVALON_PIO_DATA(BICS_BASE) == 0) {
    80a8:	01400074 	movhi	r5,1
    80ac:	29441004 	addi	r5,r5,4160
    80b0:	28c00037 	ldwio	r3,0(r5)
    80b4:	01000074 	movhi	r4,1
    80b8:	21041004 	addi	r4,r4,4160
    80bc:	183ffc26 	beq	r3,zero,80b0 <_gp+0xffff6d9c>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(TRANSMIT_BASE, 0);
    80c0:	10000035 	stwio	zero,0(r2)
	while (IORD_ALTERA_AVALON_PIO_DATA(BICS_BASE) != 9) {
    80c4:	00800244 	movi	r2,9
    80c8:	20c00037 	ldwio	r3,0(r4)
    80cc:	18bffe1e 	bne	r3,r2,80c8 <_gp+0xffff6db4>
	}
	usleep(1000);
    80d0:	0100fa04 	movi	r4,1000
}
    80d4:	dfc00217 	ldw	ra,8(sp)
    80d8:	dc400117 	ldw	r17,4(sp)
    80dc:	dc000017 	ldw	r16,0(sp)
    80e0:	dec00304 	addi	sp,sp,12
	while (IORD_ALTERA_AVALON_PIO_DATA(BICS_BASE) == 0) {
	}
	IOWR_ALTERA_AVALON_PIO_DATA(TRANSMIT_BASE, 0);
	while (IORD_ALTERA_AVALON_PIO_DATA(BICS_BASE) != 9) {
	}
	usleep(1000);
    80e4:	0008e7c1 	jmpi	8e7c <usleep>

000080e8 <main>:
}

int main() {
    80e8:	defffb04 	addi	sp,sp,-20
	IOWR_ALTERA_AVALON_PIO_DATA(LOAD_BASE, 0);
    80ec:	00800074 	movhi	r2,1
	while (IORD_ALTERA_AVALON_PIO_DATA(BICS_BASE) != 9) {
	}
	usleep(1000);
}

int main() {
    80f0:	dfc00415 	stw	ra,16(sp)
    80f4:	dcc00315 	stw	r19,12(sp)
    80f8:	dc800215 	stw	r18,8(sp)
    80fc:	dc400115 	stw	r17,4(sp)
    8100:	dc000015 	stw	r16,0(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LOAD_BASE, 0);
    8104:	10840804 	addi	r2,r2,4128
    8108:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(TRANSMIT_BASE, 0);
    810c:	00800074 	movhi	r2,1
    8110:	10841404 	addi	r2,r2,4176
    8114:	10000035 	stwio	zero,0(r2)
	alt_printf("Welcome to the earth tracking station!\n");
    8118:	01000074 	movhi	r4,1
    811c:	21241904 	addi	r4,r4,-28572
    8120:	0008cc40 	call	8cc4 <alt_printf>
	alt_printf("Send an 's' to start the satellite system...!\n");
    8124:	01000074 	movhi	r4,1
    8128:	21242304 	addi	r4,r4,-28532
    812c:	0008cc40 	call	8cc4 <alt_printf>
	char start = alt_getchar();
    8130:	0008b740 	call	8b74 <alt_getchar>
	while (start != 's')
    8134:	04001cc4 	movi	r16,115
    8138:	10803fcc 	andi	r2,r2,255
    813c:	1080201c 	xori	r2,r2,128
    8140:	10bfe004 	addi	r2,r2,-128
    8144:	14000226 	beq	r2,r16,8150 <main+0x68>
		start = alt_getchar();
    8148:	0008b740 	call	8b74 <alt_getchar>
    814c:	003ffa06 	br	8138 <_gp+0xffff6e24>
	alt_printf("Sending start signal...\n");
    8150:	01000074 	movhi	r4,1
    8154:	21242f04 	addi	r4,r4,-28484
    8158:	0008cc40 	call	8cc4 <alt_printf>
	sendData(115);
    815c:	8009883a 	mov	r4,r16
    8160:	000805c0 	call	805c <sendData>
//	sendData(82);
	alt_printf("Signal sent.\n");
    8164:	01000074 	movhi	r4,1
    8168:	21243604 	addi	r4,r4,-28456
	int flag = 1;
	while (1) {
		// Get the next event
		while (IORD_ALTERA_AVALON_PIO_DATA(BICR_BASE) != 9) {
    816c:	04800074 	movhi	r18,1
		}
		usleep(100);
		int next = IORD_ALTERA_AVALON_PIO_DATA(DATAIN_BASE);
    8170:	04c00074 	movhi	r19,1
	while (start != 's')
		start = alt_getchar();
	alt_printf("Sending start signal...\n");
	sendData(115);
//	sendData(82);
	alt_printf("Signal sent.\n");
    8174:	0008cc40 	call	8cc4 <alt_printf>
	int flag = 1;
    8178:	04000044 	movi	r16,1
	while (1) {
		// Get the next event
		while (IORD_ALTERA_AVALON_PIO_DATA(BICR_BASE) != 9) {
    817c:	94840c04 	addi	r18,r18,4144
		}
		usleep(100);
		int next = IORD_ALTERA_AVALON_PIO_DATA(DATAIN_BASE);
    8180:	9cc41804 	addi	r19,r19,4192
//	sendData(82);
	alt_printf("Signal sent.\n");
	int flag = 1;
	while (1) {
		// Get the next event
		while (IORD_ALTERA_AVALON_PIO_DATA(BICR_BASE) != 9) {
    8184:	00800244 	movi	r2,9
    8188:	90c00037 	ldwio	r3,0(r18)
    818c:	18bffe1e 	bne	r3,r2,8188 <_gp+0xffff6e74>
		}
		usleep(100);
    8190:	01001904 	movi	r4,100
    8194:	0008e7c0 	call	8e7c <usleep>
		int next = IORD_ALTERA_AVALON_PIO_DATA(DATAIN_BASE);
    8198:	9c400037 	ldwio	r17,0(r19)

		// Handle the event
		if (next == 114) {
    819c:	00801c84 	movi	r2,114
    81a0:	8880201e 	bne	r17,r2,8224 <main+0x13c>
			if (flag == 1) {
    81a4:	00800044 	movi	r2,1
    81a8:	04401904 	movi	r17,100
    81ac:	80800e1e 	bne	r16,r2,81e8 <main+0x100>
				alt_printf("Download from cam 1 received. Type a d to start downloading...\n");
    81b0:	01000074 	movhi	r4,1
    81b4:	21243a04 	addi	r4,r4,-28440
    81b8:	0008cc40 	call	8cc4 <alt_printf>
				char command = alt_getchar();
				while (command != 'd') {
					command = alt_getchar();
    81bc:	0008b740 	call	8b74 <alt_getchar>
		// Handle the event
		if (next == 114) {
			if (flag == 1) {
				alt_printf("Download from cam 1 received. Type a d to start downloading...\n");
				char command = alt_getchar();
				while (command != 'd') {
    81c0:	10803fcc 	andi	r2,r2,255
    81c4:	1080201c 	xori	r2,r2,128
    81c8:	10bfe004 	addi	r2,r2,-128
    81cc:	147ffb1e 	bne	r2,r17,81bc <_gp+0xffff6ea8>
					command = alt_getchar();
				}
				sendData(100);
    81d0:	8809883a 	mov	r4,r17
    81d4:	000805c0 	call	805c <sendData>
				alt_printf("Ready to Download for cam 1 sent.\n");
    81d8:	01000074 	movhi	r4,1
    81dc:	21244a04 	addi	r4,r4,-28376
    81e0:	0008cc40 	call	8cc4 <alt_printf>
    81e4:	003fe706 	br	8184 <_gp+0xffff6e70>
			} else {
				alt_printf("Download from cam 2 received. Type a d to start downloading...\n");
    81e8:	01000074 	movhi	r4,1
    81ec:	21245304 	addi	r4,r4,-28340
    81f0:	0008cc40 	call	8cc4 <alt_printf>
				char command = alt_getchar();
				while (command != 'd') {
					command = alt_getchar();
    81f4:	0008b740 	call	8b74 <alt_getchar>
				sendData(100);
				alt_printf("Ready to Download for cam 1 sent.\n");
			} else {
				alt_printf("Download from cam 2 received. Type a d to start downloading...\n");
				char command = alt_getchar();
				while (command != 'd') {
    81f8:	10803fcc 	andi	r2,r2,255
    81fc:	1080201c 	xori	r2,r2,128
    8200:	10bfe004 	addi	r2,r2,-128
    8204:	147ffb1e 	bne	r2,r17,81f4 <_gp+0xffff6ee0>
					command = alt_getchar();
				}
				sendData(100);
    8208:	8809883a 	mov	r4,r17
    820c:	000805c0 	call	805c <sendData>
				alt_printf("Ready to Download for cam 2 sent.\n");
    8210:	01000074 	movhi	r4,1
    8214:	21246304 	addi	r4,r4,-28276
    8218:	0008cc40 	call	8cc4 <alt_printf>
    821c:	04000084 	movi	r16,2
    8220:	003fd806 	br	8184 <_gp+0xffff6e70>
			}
		} else {
			printf("Data received from cam %d: ", flag);
    8224:	01000074 	movhi	r4,1
    8228:	800b883a 	mov	r5,r16
    822c:	21246c04 	addi	r4,r4,-28240
    8230:	000829c0 	call	829c <printf>
			printf("%c\n", next);
    8234:	01000074 	movhi	r4,1
    8238:	880b883a 	mov	r5,r17
    823c:	21247304 	addi	r4,r4,-28212
    8240:	000829c0 	call	829c <printf>
			if (next == 48) {
    8244:	00800c04 	movi	r2,48
    8248:	8880021e 	bne	r17,r2,8254 <main+0x16c>
				flag = (flag == 1) ? 2 : 1;
    824c:	84000060 	cmpeqi	r16,r16,1
    8250:	84000044 	addi	r16,r16,1
			}
			sendData(0);
    8254:	0009883a 	mov	r4,zero
    8258:	000805c0 	call	805c <sendData>
    825c:	003fc906 	br	8184 <_gp+0xffff6e70>

00008260 <_printf_r>:
    8260:	defffd04 	addi	sp,sp,-12
    8264:	dfc00015 	stw	ra,0(sp)
    8268:	d9800115 	stw	r6,4(sp)
    826c:	d9c00215 	stw	r7,8(sp)
    8270:	20c00217 	ldw	r3,8(r4)
    8274:	01800074 	movhi	r6,1
    8278:	31a22504 	addi	r6,r6,-30572
    827c:	19800115 	stw	r6,4(r3)
    8280:	280d883a 	mov	r6,r5
    8284:	21400217 	ldw	r5,8(r4)
    8288:	d9c00104 	addi	r7,sp,4
    828c:	00083540 	call	8354 <___vfprintf_internal_r>
    8290:	dfc00017 	ldw	ra,0(sp)
    8294:	dec00304 	addi	sp,sp,12
    8298:	f800283a 	ret

0000829c <printf>:
    829c:	defffc04 	addi	sp,sp,-16
    82a0:	dfc00015 	stw	ra,0(sp)
    82a4:	d9400115 	stw	r5,4(sp)
    82a8:	d9800215 	stw	r6,8(sp)
    82ac:	d9c00315 	stw	r7,12(sp)
    82b0:	00800074 	movhi	r2,1
    82b4:	10a4c604 	addi	r2,r2,-27880
    82b8:	10800017 	ldw	r2,0(r2)
    82bc:	01400074 	movhi	r5,1
    82c0:	29622504 	addi	r5,r5,-30572
    82c4:	10c00217 	ldw	r3,8(r2)
    82c8:	d9800104 	addi	r6,sp,4
    82cc:	19400115 	stw	r5,4(r3)
    82d0:	200b883a 	mov	r5,r4
    82d4:	11000217 	ldw	r4,8(r2)
    82d8:	00088780 	call	8878 <__vfprintf_internal>
    82dc:	dfc00017 	ldw	ra,0(sp)
    82e0:	dec00404 	addi	sp,sp,16
    82e4:	f800283a 	ret

000082e8 <print_repeat>:
    82e8:	defffb04 	addi	sp,sp,-20
    82ec:	dc800315 	stw	r18,12(sp)
    82f0:	dc400215 	stw	r17,8(sp)
    82f4:	dc000115 	stw	r16,4(sp)
    82f8:	dfc00415 	stw	ra,16(sp)
    82fc:	2025883a 	mov	r18,r4
    8300:	2823883a 	mov	r17,r5
    8304:	d9800005 	stb	r6,0(sp)
    8308:	3821883a 	mov	r16,r7
    830c:	04000a0e 	bge	zero,r16,8338 <print_repeat+0x50>
    8310:	88800117 	ldw	r2,4(r17)
    8314:	01c00044 	movi	r7,1
    8318:	d80d883a 	mov	r6,sp
    831c:	880b883a 	mov	r5,r17
    8320:	9009883a 	mov	r4,r18
    8324:	103ee83a 	callr	r2
    8328:	843fffc4 	addi	r16,r16,-1
    832c:	103ff726 	beq	r2,zero,830c <_gp+0xffff6ff8>
    8330:	00bfffc4 	movi	r2,-1
    8334:	00000106 	br	833c <print_repeat+0x54>
    8338:	0005883a 	mov	r2,zero
    833c:	dfc00417 	ldw	ra,16(sp)
    8340:	dc800317 	ldw	r18,12(sp)
    8344:	dc400217 	ldw	r17,8(sp)
    8348:	dc000117 	ldw	r16,4(sp)
    834c:	dec00504 	addi	sp,sp,20
    8350:	f800283a 	ret

00008354 <___vfprintf_internal_r>:
    8354:	deffe504 	addi	sp,sp,-108
    8358:	d8c00804 	addi	r3,sp,32
    835c:	df001915 	stw	fp,100(sp)
    8360:	ddc01815 	stw	r23,96(sp)
    8364:	dd801715 	stw	r22,92(sp)
    8368:	dd401615 	stw	r21,88(sp)
    836c:	dd001515 	stw	r20,84(sp)
    8370:	dcc01415 	stw	r19,80(sp)
    8374:	dc801315 	stw	r18,76(sp)
    8378:	dc401215 	stw	r17,72(sp)
    837c:	dc001115 	stw	r16,68(sp)
    8380:	dfc01a15 	stw	ra,104(sp)
    8384:	2027883a 	mov	r19,r4
    8388:	2839883a 	mov	fp,r5
    838c:	382d883a 	mov	r22,r7
    8390:	d9800f15 	stw	r6,60(sp)
    8394:	0021883a 	mov	r16,zero
    8398:	d8000e15 	stw	zero,56(sp)
    839c:	002f883a 	mov	r23,zero
    83a0:	002b883a 	mov	r21,zero
    83a4:	0025883a 	mov	r18,zero
    83a8:	0023883a 	mov	r17,zero
    83ac:	d8000c15 	stw	zero,48(sp)
    83b0:	d8000b15 	stw	zero,44(sp)
    83b4:	0029883a 	mov	r20,zero
    83b8:	d8c00915 	stw	r3,36(sp)
    83bc:	d8c00f17 	ldw	r3,60(sp)
    83c0:	19000003 	ldbu	r4,0(r3)
    83c4:	20803fcc 	andi	r2,r4,255
    83c8:	1080201c 	xori	r2,r2,128
    83cc:	10bfe004 	addi	r2,r2,-128
    83d0:	10011c26 	beq	r2,zero,8844 <___vfprintf_internal_r+0x4f0>
    83d4:	00c00044 	movi	r3,1
    83d8:	a0c01426 	beq	r20,r3,842c <___vfprintf_internal_r+0xd8>
    83dc:	1d000216 	blt	r3,r20,83e8 <___vfprintf_internal_r+0x94>
    83e0:	a0000626 	beq	r20,zero,83fc <___vfprintf_internal_r+0xa8>
    83e4:	00011306 	br	8834 <___vfprintf_internal_r+0x4e0>
    83e8:	01400084 	movi	r5,2
    83ec:	a1401d26 	beq	r20,r5,8464 <___vfprintf_internal_r+0x110>
    83f0:	014000c4 	movi	r5,3
    83f4:	a1402926 	beq	r20,r5,849c <___vfprintf_internal_r+0x148>
    83f8:	00010e06 	br	8834 <___vfprintf_internal_r+0x4e0>
    83fc:	01400944 	movi	r5,37
    8400:	1140fb26 	beq	r2,r5,87f0 <___vfprintf_internal_r+0x49c>
    8404:	e0800117 	ldw	r2,4(fp)
    8408:	d9000005 	stb	r4,0(sp)
    840c:	01c00044 	movi	r7,1
    8410:	d80d883a 	mov	r6,sp
    8414:	e00b883a 	mov	r5,fp
    8418:	9809883a 	mov	r4,r19
    841c:	103ee83a 	callr	r2
    8420:	1000d61e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    8424:	84000044 	addi	r16,r16,1
    8428:	00010206 	br	8834 <___vfprintf_internal_r+0x4e0>
    842c:	01400c04 	movi	r5,48
    8430:	1140f826 	beq	r2,r5,8814 <___vfprintf_internal_r+0x4c0>
    8434:	01400944 	movi	r5,37
    8438:	11400a1e 	bne	r2,r5,8464 <___vfprintf_internal_r+0x110>
    843c:	d8800005 	stb	r2,0(sp)
    8440:	e0800117 	ldw	r2,4(fp)
    8444:	a00f883a 	mov	r7,r20
    8448:	d80d883a 	mov	r6,sp
    844c:	e00b883a 	mov	r5,fp
    8450:	9809883a 	mov	r4,r19
    8454:	103ee83a 	callr	r2
    8458:	1000c81e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    845c:	84000044 	addi	r16,r16,1
    8460:	0000f306 	br	8830 <___vfprintf_internal_r+0x4dc>
    8464:	217ff404 	addi	r5,r4,-48
    8468:	29403fcc 	andi	r5,r5,255
    846c:	00c00244 	movi	r3,9
    8470:	19400736 	bltu	r3,r5,8490 <___vfprintf_internal_r+0x13c>
    8474:	00bfffc4 	movi	r2,-1
    8478:	88800226 	beq	r17,r2,8484 <___vfprintf_internal_r+0x130>
    847c:	8c4002a4 	muli	r17,r17,10
    8480:	00000106 	br	8488 <___vfprintf_internal_r+0x134>
    8484:	0023883a 	mov	r17,zero
    8488:	2c63883a 	add	r17,r5,r17
    848c:	0000e206 	br	8818 <___vfprintf_internal_r+0x4c4>
    8490:	01400b84 	movi	r5,46
    8494:	1140e426 	beq	r2,r5,8828 <___vfprintf_internal_r+0x4d4>
    8498:	05000084 	movi	r20,2
    849c:	213ff404 	addi	r4,r4,-48
    84a0:	21003fcc 	andi	r4,r4,255
    84a4:	00c00244 	movi	r3,9
    84a8:	19000736 	bltu	r3,r4,84c8 <___vfprintf_internal_r+0x174>
    84ac:	00bfffc4 	movi	r2,-1
    84b0:	90800226 	beq	r18,r2,84bc <___vfprintf_internal_r+0x168>
    84b4:	948002a4 	muli	r18,r18,10
    84b8:	00000106 	br	84c0 <___vfprintf_internal_r+0x16c>
    84bc:	0025883a 	mov	r18,zero
    84c0:	24a5883a 	add	r18,r4,r18
    84c4:	0000db06 	br	8834 <___vfprintf_internal_r+0x4e0>
    84c8:	00c01b04 	movi	r3,108
    84cc:	10c0d426 	beq	r2,r3,8820 <___vfprintf_internal_r+0x4cc>
    84d0:	013fffc4 	movi	r4,-1
    84d4:	91000226 	beq	r18,r4,84e0 <___vfprintf_internal_r+0x18c>
    84d8:	d8000b15 	stw	zero,44(sp)
    84dc:	00000106 	br	84e4 <___vfprintf_internal_r+0x190>
    84e0:	04800044 	movi	r18,1
    84e4:	01001a44 	movi	r4,105
    84e8:	11001626 	beq	r2,r4,8544 <___vfprintf_internal_r+0x1f0>
    84ec:	20800916 	blt	r4,r2,8514 <___vfprintf_internal_r+0x1c0>
    84f0:	010018c4 	movi	r4,99
    84f4:	11008a26 	beq	r2,r4,8720 <___vfprintf_internal_r+0x3cc>
    84f8:	01001904 	movi	r4,100
    84fc:	11001126 	beq	r2,r4,8544 <___vfprintf_internal_r+0x1f0>
    8500:	01001604 	movi	r4,88
    8504:	1100ca1e 	bne	r2,r4,8830 <___vfprintf_internal_r+0x4dc>
    8508:	00c00044 	movi	r3,1
    850c:	d8c00e15 	stw	r3,56(sp)
    8510:	00001406 	br	8564 <___vfprintf_internal_r+0x210>
    8514:	01001cc4 	movi	r4,115
    8518:	11009a26 	beq	r2,r4,8784 <___vfprintf_internal_r+0x430>
    851c:	20800416 	blt	r4,r2,8530 <___vfprintf_internal_r+0x1dc>
    8520:	01001bc4 	movi	r4,111
    8524:	1100c21e 	bne	r2,r4,8830 <___vfprintf_internal_r+0x4dc>
    8528:	05400204 	movi	r21,8
    852c:	00000e06 	br	8568 <___vfprintf_internal_r+0x214>
    8530:	01001d44 	movi	r4,117
    8534:	11000c26 	beq	r2,r4,8568 <___vfprintf_internal_r+0x214>
    8538:	01001e04 	movi	r4,120
    853c:	11000926 	beq	r2,r4,8564 <___vfprintf_internal_r+0x210>
    8540:	0000bb06 	br	8830 <___vfprintf_internal_r+0x4dc>
    8544:	b5000104 	addi	r20,r22,4
    8548:	b8000726 	beq	r23,zero,8568 <___vfprintf_internal_r+0x214>
    854c:	dd000d15 	stw	r20,52(sp)
    8550:	b5800017 	ldw	r22,0(r22)
    8554:	b000080e 	bge	r22,zero,8578 <___vfprintf_internal_r+0x224>
    8558:	05adc83a 	sub	r22,zero,r22
    855c:	02800044 	movi	r10,1
    8560:	00000606 	br	857c <___vfprintf_internal_r+0x228>
    8564:	05400404 	movi	r21,16
    8568:	b0c00104 	addi	r3,r22,4
    856c:	d8c00d15 	stw	r3,52(sp)
    8570:	b5800017 	ldw	r22,0(r22)
    8574:	002f883a 	mov	r23,zero
    8578:	0015883a 	mov	r10,zero
    857c:	d829883a 	mov	r20,sp
    8580:	b0001426 	beq	r22,zero,85d4 <___vfprintf_internal_r+0x280>
    8584:	b009883a 	mov	r4,r22
    8588:	a80b883a 	mov	r5,r21
    858c:	da801015 	stw	r10,64(sp)
    8590:	0008ab80 	call	8ab8 <__udivsi3>
    8594:	1549383a 	mul	r4,r2,r21
    8598:	00c00244 	movi	r3,9
    859c:	da801017 	ldw	r10,64(sp)
    85a0:	b12dc83a 	sub	r22,r22,r4
    85a4:	1d800216 	blt	r3,r22,85b0 <___vfprintf_internal_r+0x25c>
    85a8:	b5800c04 	addi	r22,r22,48
    85ac:	00000506 	br	85c4 <___vfprintf_internal_r+0x270>
    85b0:	d8c00e17 	ldw	r3,56(sp)
    85b4:	18000226 	beq	r3,zero,85c0 <___vfprintf_internal_r+0x26c>
    85b8:	b5800dc4 	addi	r22,r22,55
    85bc:	00000106 	br	85c4 <___vfprintf_internal_r+0x270>
    85c0:	b58015c4 	addi	r22,r22,87
    85c4:	a5800005 	stb	r22,0(r20)
    85c8:	a5000044 	addi	r20,r20,1
    85cc:	102d883a 	mov	r22,r2
    85d0:	003feb06 	br	8580 <_gp+0xffff726c>
    85d4:	a6c7c83a 	sub	r3,r20,sp
    85d8:	d8c00a15 	stw	r3,40(sp)
    85dc:	90c5c83a 	sub	r2,r18,r3
    85e0:	00800a0e 	bge	zero,r2,860c <___vfprintf_internal_r+0x2b8>
    85e4:	a085883a 	add	r2,r20,r2
    85e8:	01400c04 	movi	r5,48
    85ec:	d8c00917 	ldw	r3,36(sp)
    85f0:	a009883a 	mov	r4,r20
    85f4:	a0c0032e 	bgeu	r20,r3,8604 <___vfprintf_internal_r+0x2b0>
    85f8:	a5000044 	addi	r20,r20,1
    85fc:	21400005 	stb	r5,0(r4)
    8600:	a0bffa1e 	bne	r20,r2,85ec <_gp+0xffff72d8>
    8604:	a6c7c83a 	sub	r3,r20,sp
    8608:	d8c00a15 	stw	r3,40(sp)
    860c:	d8c00a17 	ldw	r3,40(sp)
    8610:	50d3883a 	add	r9,r10,r3
    8614:	d8c00b17 	ldw	r3,44(sp)
    8618:	8a6dc83a 	sub	r22,r17,r9
    861c:	18001726 	beq	r3,zero,867c <___vfprintf_internal_r+0x328>
    8620:	50000a26 	beq	r10,zero,864c <___vfprintf_internal_r+0x2f8>
    8624:	00800b44 	movi	r2,45
    8628:	d8800805 	stb	r2,32(sp)
    862c:	e0800117 	ldw	r2,4(fp)
    8630:	01c00044 	movi	r7,1
    8634:	d9800804 	addi	r6,sp,32
    8638:	e00b883a 	mov	r5,fp
    863c:	9809883a 	mov	r4,r19
    8640:	103ee83a 	callr	r2
    8644:	10004d1e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    8648:	84000044 	addi	r16,r16,1
    864c:	0580070e 	bge	zero,r22,866c <___vfprintf_internal_r+0x318>
    8650:	b00f883a 	mov	r7,r22
    8654:	01800c04 	movi	r6,48
    8658:	e00b883a 	mov	r5,fp
    865c:	9809883a 	mov	r4,r19
    8660:	00082e80 	call	82e8 <print_repeat>
    8664:	1000451e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    8668:	85a1883a 	add	r16,r16,r22
    866c:	d8c00a17 	ldw	r3,40(sp)
    8670:	a013883a 	mov	r9,r20
    8674:	1d2dc83a 	sub	r22,r3,r20
    8678:	00002206 	br	8704 <___vfprintf_internal_r+0x3b0>
    867c:	0580090e 	bge	zero,r22,86a4 <___vfprintf_internal_r+0x350>
    8680:	b00f883a 	mov	r7,r22
    8684:	01800804 	movi	r6,32
    8688:	e00b883a 	mov	r5,fp
    868c:	9809883a 	mov	r4,r19
    8690:	da801015 	stw	r10,64(sp)
    8694:	00082e80 	call	82e8 <print_repeat>
    8698:	da801017 	ldw	r10,64(sp)
    869c:	1000371e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    86a0:	85a1883a 	add	r16,r16,r22
    86a4:	503ff126 	beq	r10,zero,866c <_gp+0xffff7358>
    86a8:	00800b44 	movi	r2,45
    86ac:	d8800805 	stb	r2,32(sp)
    86b0:	e0800117 	ldw	r2,4(fp)
    86b4:	01c00044 	movi	r7,1
    86b8:	d9800804 	addi	r6,sp,32
    86bc:	e00b883a 	mov	r5,fp
    86c0:	9809883a 	mov	r4,r19
    86c4:	103ee83a 	callr	r2
    86c8:	10002c1e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    86cc:	84000044 	addi	r16,r16,1
    86d0:	003fe606 	br	866c <_gp+0xffff7358>
    86d4:	4a7fffc4 	addi	r9,r9,-1
    86d8:	48800003 	ldbu	r2,0(r9)
    86dc:	01c00044 	movi	r7,1
    86e0:	d9800804 	addi	r6,sp,32
    86e4:	d8800805 	stb	r2,32(sp)
    86e8:	e0800117 	ldw	r2,4(fp)
    86ec:	e00b883a 	mov	r5,fp
    86f0:	da401015 	stw	r9,64(sp)
    86f4:	9809883a 	mov	r4,r19
    86f8:	103ee83a 	callr	r2
    86fc:	da401017 	ldw	r9,64(sp)
    8700:	10001e1e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    8704:	8245c83a 	sub	r2,r16,r9
    8708:	4d89883a 	add	r4,r9,r22
    870c:	a085883a 	add	r2,r20,r2
    8710:	013ff016 	blt	zero,r4,86d4 <_gp+0xffff73c0>
    8714:	1021883a 	mov	r16,r2
    8718:	dd800d17 	ldw	r22,52(sp)
    871c:	00004406 	br	8830 <___vfprintf_internal_r+0x4dc>
    8720:	00800044 	movi	r2,1
    8724:	1440080e 	bge	r2,r17,8748 <___vfprintf_internal_r+0x3f4>
    8728:	8d3fffc4 	addi	r20,r17,-1
    872c:	a00f883a 	mov	r7,r20
    8730:	01800804 	movi	r6,32
    8734:	e00b883a 	mov	r5,fp
    8738:	9809883a 	mov	r4,r19
    873c:	00082e80 	call	82e8 <print_repeat>
    8740:	10000e1e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    8744:	8521883a 	add	r16,r16,r20
    8748:	b0800017 	ldw	r2,0(r22)
    874c:	01c00044 	movi	r7,1
    8750:	d80d883a 	mov	r6,sp
    8754:	d8800005 	stb	r2,0(sp)
    8758:	e0800117 	ldw	r2,4(fp)
    875c:	e00b883a 	mov	r5,fp
    8760:	9809883a 	mov	r4,r19
    8764:	b5000104 	addi	r20,r22,4
    8768:	103ee83a 	callr	r2
    876c:	1000031e 	bne	r2,zero,877c <___vfprintf_internal_r+0x428>
    8770:	84000044 	addi	r16,r16,1
    8774:	a02d883a 	mov	r22,r20
    8778:	00002d06 	br	8830 <___vfprintf_internal_r+0x4dc>
    877c:	00bfffc4 	movi	r2,-1
    8780:	00003106 	br	8848 <___vfprintf_internal_r+0x4f4>
    8784:	b5000017 	ldw	r20,0(r22)
    8788:	b0c00104 	addi	r3,r22,4
    878c:	d8c00a15 	stw	r3,40(sp)
    8790:	a009883a 	mov	r4,r20
    8794:	000894c0 	call	894c <strlen>
    8798:	8893c83a 	sub	r9,r17,r2
    879c:	102d883a 	mov	r22,r2
    87a0:	0240090e 	bge	zero,r9,87c8 <___vfprintf_internal_r+0x474>
    87a4:	480f883a 	mov	r7,r9
    87a8:	01800804 	movi	r6,32
    87ac:	e00b883a 	mov	r5,fp
    87b0:	9809883a 	mov	r4,r19
    87b4:	da401015 	stw	r9,64(sp)
    87b8:	00082e80 	call	82e8 <print_repeat>
    87bc:	da401017 	ldw	r9,64(sp)
    87c0:	103fee1e 	bne	r2,zero,877c <_gp+0xffff7468>
    87c4:	8261883a 	add	r16,r16,r9
    87c8:	e0800117 	ldw	r2,4(fp)
    87cc:	b00f883a 	mov	r7,r22
    87d0:	a00d883a 	mov	r6,r20
    87d4:	e00b883a 	mov	r5,fp
    87d8:	9809883a 	mov	r4,r19
    87dc:	103ee83a 	callr	r2
    87e0:	103fe61e 	bne	r2,zero,877c <_gp+0xffff7468>
    87e4:	85a1883a 	add	r16,r16,r22
    87e8:	dd800a17 	ldw	r22,40(sp)
    87ec:	00001006 	br	8830 <___vfprintf_internal_r+0x4dc>
    87f0:	05c00044 	movi	r23,1
    87f4:	04bfffc4 	movi	r18,-1
    87f8:	d8000e15 	stw	zero,56(sp)
    87fc:	05400284 	movi	r21,10
    8800:	9023883a 	mov	r17,r18
    8804:	d8000c15 	stw	zero,48(sp)
    8808:	d8000b15 	stw	zero,44(sp)
    880c:	b829883a 	mov	r20,r23
    8810:	00000806 	br	8834 <___vfprintf_internal_r+0x4e0>
    8814:	dd000b15 	stw	r20,44(sp)
    8818:	05000084 	movi	r20,2
    881c:	00000506 	br	8834 <___vfprintf_internal_r+0x4e0>
    8820:	00c00044 	movi	r3,1
    8824:	d8c00c15 	stw	r3,48(sp)
    8828:	050000c4 	movi	r20,3
    882c:	00000106 	br	8834 <___vfprintf_internal_r+0x4e0>
    8830:	0029883a 	mov	r20,zero
    8834:	d8c00f17 	ldw	r3,60(sp)
    8838:	18c00044 	addi	r3,r3,1
    883c:	d8c00f15 	stw	r3,60(sp)
    8840:	003ede06 	br	83bc <_gp+0xffff70a8>
    8844:	8005883a 	mov	r2,r16
    8848:	dfc01a17 	ldw	ra,104(sp)
    884c:	df001917 	ldw	fp,100(sp)
    8850:	ddc01817 	ldw	r23,96(sp)
    8854:	dd801717 	ldw	r22,92(sp)
    8858:	dd401617 	ldw	r21,88(sp)
    885c:	dd001517 	ldw	r20,84(sp)
    8860:	dcc01417 	ldw	r19,80(sp)
    8864:	dc801317 	ldw	r18,76(sp)
    8868:	dc401217 	ldw	r17,72(sp)
    886c:	dc001117 	ldw	r16,68(sp)
    8870:	dec01b04 	addi	sp,sp,108
    8874:	f800283a 	ret

00008878 <__vfprintf_internal>:
    8878:	00800074 	movhi	r2,1
    887c:	10a4c604 	addi	r2,r2,-27880
    8880:	300f883a 	mov	r7,r6
    8884:	280d883a 	mov	r6,r5
    8888:	200b883a 	mov	r5,r4
    888c:	11000017 	ldw	r4,0(r2)
    8890:	00083541 	jmpi	8354 <___vfprintf_internal_r>

00008894 <__sfvwrite_small_dev>:
    8894:	2880000b 	ldhu	r2,0(r5)
    8898:	1080020c 	andi	r2,r2,8
    889c:	10002126 	beq	r2,zero,8924 <__sfvwrite_small_dev+0x90>
    88a0:	2880008f 	ldh	r2,2(r5)
    88a4:	defffa04 	addi	sp,sp,-24
    88a8:	dc000015 	stw	r16,0(sp)
    88ac:	dfc00515 	stw	ra,20(sp)
    88b0:	dd000415 	stw	r20,16(sp)
    88b4:	dcc00315 	stw	r19,12(sp)
    88b8:	dc800215 	stw	r18,8(sp)
    88bc:	dc400115 	stw	r17,4(sp)
    88c0:	2821883a 	mov	r16,r5
    88c4:	10001216 	blt	r2,zero,8910 <__sfvwrite_small_dev+0x7c>
    88c8:	2027883a 	mov	r19,r4
    88cc:	3025883a 	mov	r18,r6
    88d0:	3823883a 	mov	r17,r7
    88d4:	05010004 	movi	r20,1024
    88d8:	04400b0e 	bge	zero,r17,8908 <__sfvwrite_small_dev+0x74>
    88dc:	880f883a 	mov	r7,r17
    88e0:	a440010e 	bge	r20,r17,88e8 <__sfvwrite_small_dev+0x54>
    88e4:	01c10004 	movi	r7,1024
    88e8:	8140008f 	ldh	r5,2(r16)
    88ec:	900d883a 	mov	r6,r18
    88f0:	9809883a 	mov	r4,r19
    88f4:	00089680 	call	8968 <_write_r>
    88f8:	0080050e 	bge	zero,r2,8910 <__sfvwrite_small_dev+0x7c>
    88fc:	88a3c83a 	sub	r17,r17,r2
    8900:	90a5883a 	add	r18,r18,r2
    8904:	003ff406 	br	88d8 <_gp+0xffff75c4>
    8908:	0005883a 	mov	r2,zero
    890c:	00000706 	br	892c <__sfvwrite_small_dev+0x98>
    8910:	8080000b 	ldhu	r2,0(r16)
    8914:	10801014 	ori	r2,r2,64
    8918:	8080000d 	sth	r2,0(r16)
    891c:	00bfffc4 	movi	r2,-1
    8920:	00000206 	br	892c <__sfvwrite_small_dev+0x98>
    8924:	00bfffc4 	movi	r2,-1
    8928:	f800283a 	ret
    892c:	dfc00517 	ldw	ra,20(sp)
    8930:	dd000417 	ldw	r20,16(sp)
    8934:	dcc00317 	ldw	r19,12(sp)
    8938:	dc800217 	ldw	r18,8(sp)
    893c:	dc400117 	ldw	r17,4(sp)
    8940:	dc000017 	ldw	r16,0(sp)
    8944:	dec00604 	addi	sp,sp,24
    8948:	f800283a 	ret

0000894c <strlen>:
    894c:	2005883a 	mov	r2,r4
    8950:	10c00007 	ldb	r3,0(r2)
    8954:	18000226 	beq	r3,zero,8960 <strlen+0x14>
    8958:	10800044 	addi	r2,r2,1
    895c:	003ffc06 	br	8950 <_gp+0xffff763c>
    8960:	1105c83a 	sub	r2,r2,r4
    8964:	f800283a 	ret

00008968 <_write_r>:
    8968:	defffd04 	addi	sp,sp,-12
    896c:	dc000015 	stw	r16,0(sp)
    8970:	04000074 	movhi	r16,1
    8974:	dc400115 	stw	r17,4(sp)
    8978:	84252504 	addi	r16,r16,-27500
    897c:	2023883a 	mov	r17,r4
    8980:	2809883a 	mov	r4,r5
    8984:	300b883a 	mov	r5,r6
    8988:	380d883a 	mov	r6,r7
    898c:	dfc00215 	stw	ra,8(sp)
    8990:	80000015 	stw	zero,0(r16)
    8994:	0008e800 	call	8e80 <write>
    8998:	00ffffc4 	movi	r3,-1
    899c:	10c0031e 	bne	r2,r3,89ac <_write_r+0x44>
    89a0:	80c00017 	ldw	r3,0(r16)
    89a4:	18000126 	beq	r3,zero,89ac <_write_r+0x44>
    89a8:	88c00015 	stw	r3,0(r17)
    89ac:	dfc00217 	ldw	ra,8(sp)
    89b0:	dc400117 	ldw	r17,4(sp)
    89b4:	dc000017 	ldw	r16,0(sp)
    89b8:	dec00304 	addi	sp,sp,12
    89bc:	f800283a 	ret

000089c0 <__divsi3>:
    89c0:	20001b16 	blt	r4,zero,8a30 <__divsi3+0x70>
    89c4:	000f883a 	mov	r7,zero
    89c8:	28001616 	blt	r5,zero,8a24 <__divsi3+0x64>
    89cc:	200d883a 	mov	r6,r4
    89d0:	29001a2e 	bgeu	r5,r4,8a3c <__divsi3+0x7c>
    89d4:	00800804 	movi	r2,32
    89d8:	00c00044 	movi	r3,1
    89dc:	00000106 	br	89e4 <__divsi3+0x24>
    89e0:	10000d26 	beq	r2,zero,8a18 <__divsi3+0x58>
    89e4:	294b883a 	add	r5,r5,r5
    89e8:	10bfffc4 	addi	r2,r2,-1
    89ec:	18c7883a 	add	r3,r3,r3
    89f0:	293ffb36 	bltu	r5,r4,89e0 <_gp+0xffff76cc>
    89f4:	0005883a 	mov	r2,zero
    89f8:	18000726 	beq	r3,zero,8a18 <__divsi3+0x58>
    89fc:	0005883a 	mov	r2,zero
    8a00:	31400236 	bltu	r6,r5,8a0c <__divsi3+0x4c>
    8a04:	314dc83a 	sub	r6,r6,r5
    8a08:	10c4b03a 	or	r2,r2,r3
    8a0c:	1806d07a 	srli	r3,r3,1
    8a10:	280ad07a 	srli	r5,r5,1
    8a14:	183ffa1e 	bne	r3,zero,8a00 <_gp+0xffff76ec>
    8a18:	38000126 	beq	r7,zero,8a20 <__divsi3+0x60>
    8a1c:	0085c83a 	sub	r2,zero,r2
    8a20:	f800283a 	ret
    8a24:	014bc83a 	sub	r5,zero,r5
    8a28:	39c0005c 	xori	r7,r7,1
    8a2c:	003fe706 	br	89cc <_gp+0xffff76b8>
    8a30:	0109c83a 	sub	r4,zero,r4
    8a34:	01c00044 	movi	r7,1
    8a38:	003fe306 	br	89c8 <_gp+0xffff76b4>
    8a3c:	00c00044 	movi	r3,1
    8a40:	003fee06 	br	89fc <_gp+0xffff76e8>

00008a44 <__modsi3>:
    8a44:	20001716 	blt	r4,zero,8aa4 <__modsi3+0x60>
    8a48:	000f883a 	mov	r7,zero
    8a4c:	2005883a 	mov	r2,r4
    8a50:	28001216 	blt	r5,zero,8a9c <__modsi3+0x58>
    8a54:	2900162e 	bgeu	r5,r4,8ab0 <__modsi3+0x6c>
    8a58:	01800804 	movi	r6,32
    8a5c:	00c00044 	movi	r3,1
    8a60:	00000106 	br	8a68 <__modsi3+0x24>
    8a64:	30000a26 	beq	r6,zero,8a90 <__modsi3+0x4c>
    8a68:	294b883a 	add	r5,r5,r5
    8a6c:	31bfffc4 	addi	r6,r6,-1
    8a70:	18c7883a 	add	r3,r3,r3
    8a74:	293ffb36 	bltu	r5,r4,8a64 <_gp+0xffff7750>
    8a78:	18000526 	beq	r3,zero,8a90 <__modsi3+0x4c>
    8a7c:	1806d07a 	srli	r3,r3,1
    8a80:	11400136 	bltu	r2,r5,8a88 <__modsi3+0x44>
    8a84:	1145c83a 	sub	r2,r2,r5
    8a88:	280ad07a 	srli	r5,r5,1
    8a8c:	183ffb1e 	bne	r3,zero,8a7c <_gp+0xffff7768>
    8a90:	38000126 	beq	r7,zero,8a98 <__modsi3+0x54>
    8a94:	0085c83a 	sub	r2,zero,r2
    8a98:	f800283a 	ret
    8a9c:	014bc83a 	sub	r5,zero,r5
    8aa0:	003fec06 	br	8a54 <_gp+0xffff7740>
    8aa4:	0109c83a 	sub	r4,zero,r4
    8aa8:	01c00044 	movi	r7,1
    8aac:	003fe706 	br	8a4c <_gp+0xffff7738>
    8ab0:	00c00044 	movi	r3,1
    8ab4:	003ff106 	br	8a7c <_gp+0xffff7768>

00008ab8 <__udivsi3>:
    8ab8:	200d883a 	mov	r6,r4
    8abc:	2900152e 	bgeu	r5,r4,8b14 <__udivsi3+0x5c>
    8ac0:	28001416 	blt	r5,zero,8b14 <__udivsi3+0x5c>
    8ac4:	00800804 	movi	r2,32
    8ac8:	00c00044 	movi	r3,1
    8acc:	00000206 	br	8ad8 <__udivsi3+0x20>
    8ad0:	10000e26 	beq	r2,zero,8b0c <__udivsi3+0x54>
    8ad4:	28000516 	blt	r5,zero,8aec <__udivsi3+0x34>
    8ad8:	294b883a 	add	r5,r5,r5
    8adc:	10bfffc4 	addi	r2,r2,-1
    8ae0:	18c7883a 	add	r3,r3,r3
    8ae4:	293ffa36 	bltu	r5,r4,8ad0 <_gp+0xffff77bc>
    8ae8:	18000826 	beq	r3,zero,8b0c <__udivsi3+0x54>
    8aec:	0005883a 	mov	r2,zero
    8af0:	31400236 	bltu	r6,r5,8afc <__udivsi3+0x44>
    8af4:	314dc83a 	sub	r6,r6,r5
    8af8:	10c4b03a 	or	r2,r2,r3
    8afc:	1806d07a 	srli	r3,r3,1
    8b00:	280ad07a 	srli	r5,r5,1
    8b04:	183ffa1e 	bne	r3,zero,8af0 <_gp+0xffff77dc>
    8b08:	f800283a 	ret
    8b0c:	0005883a 	mov	r2,zero
    8b10:	f800283a 	ret
    8b14:	00c00044 	movi	r3,1
    8b18:	003ff406 	br	8aec <_gp+0xffff77d8>

00008b1c <__umodsi3>:
    8b1c:	2005883a 	mov	r2,r4
    8b20:	2900122e 	bgeu	r5,r4,8b6c <__umodsi3+0x50>
    8b24:	28001116 	blt	r5,zero,8b6c <__umodsi3+0x50>
    8b28:	01800804 	movi	r6,32
    8b2c:	00c00044 	movi	r3,1
    8b30:	00000206 	br	8b3c <__umodsi3+0x20>
    8b34:	30000c26 	beq	r6,zero,8b68 <__umodsi3+0x4c>
    8b38:	28000516 	blt	r5,zero,8b50 <__umodsi3+0x34>
    8b3c:	294b883a 	add	r5,r5,r5
    8b40:	31bfffc4 	addi	r6,r6,-1
    8b44:	18c7883a 	add	r3,r3,r3
    8b48:	293ffa36 	bltu	r5,r4,8b34 <_gp+0xffff7820>
    8b4c:	18000626 	beq	r3,zero,8b68 <__umodsi3+0x4c>
    8b50:	1806d07a 	srli	r3,r3,1
    8b54:	11400136 	bltu	r2,r5,8b5c <__umodsi3+0x40>
    8b58:	1145c83a 	sub	r2,r2,r5
    8b5c:	280ad07a 	srli	r5,r5,1
    8b60:	183ffb1e 	bne	r3,zero,8b50 <_gp+0xffff783c>
    8b64:	f800283a 	ret
    8b68:	f800283a 	ret
    8b6c:	00c00044 	movi	r3,1
    8b70:	003ff706 	br	8b50 <_gp+0xffff783c>

00008b74 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8b74:	00800074 	movhi	r2,1
    8b78:	10a4af04 	addi	r2,r2,-27972
    8b7c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8b80:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8b84:	01000074 	movhi	r4,1
    8b88:	01800044 	movi	r6,1
    8b8c:	d80b883a 	mov	r5,sp
    8b90:	2124c704 	addi	r4,r4,-27876
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8b94:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8b98:	0008f040 	call	8f04 <altera_avalon_jtag_uart_read>
    8b9c:	0080020e 	bge	zero,r2,8ba8 <alt_getchar+0x34>
        return -1;
    }
    return c;
    8ba0:	d8800007 	ldb	r2,0(sp)
    8ba4:	00000106 	br	8bac <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    8ba8:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    8bac:	dfc00117 	ldw	ra,4(sp)
    8bb0:	dec00204 	addi	sp,sp,8
    8bb4:	f800283a 	ret

00008bb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8bb8:	deffff04 	addi	sp,sp,-4
    8bbc:	01000074 	movhi	r4,1
    8bc0:	01400074 	movhi	r5,1
    8bc4:	dfc00015 	stw	ra,0(sp)
    8bc8:	21247704 	addi	r4,r4,-28196
    8bcc:	2964ce04 	addi	r5,r5,-27848

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8bd0:	2140061e 	bne	r4,r5,8bec <alt_load+0x34>
    8bd4:	01000074 	movhi	r4,1
    8bd8:	01400074 	movhi	r5,1
    8bdc:	21200804 	addi	r4,r4,-32736
    8be0:	29600804 	addi	r5,r5,-32736
    8be4:	2140121e 	bne	r4,r5,8c30 <alt_load+0x78>
    8be8:	00000b06 	br	8c18 <alt_load+0x60>
    8bec:	00c00074 	movhi	r3,1
    8bf0:	18e4ce04 	addi	r3,r3,-27848
    8bf4:	1907c83a 	sub	r3,r3,r4
    8bf8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8bfc:	10fff526 	beq	r2,r3,8bd4 <_gp+0xffff78c0>
    {
      *to++ = *from++;
    8c00:	114f883a 	add	r7,r2,r5
    8c04:	39c00017 	ldw	r7,0(r7)
    8c08:	110d883a 	add	r6,r2,r4
    8c0c:	10800104 	addi	r2,r2,4
    8c10:	31c00015 	stw	r7,0(r6)
    8c14:	003ff906 	br	8bfc <_gp+0xffff78e8>
    8c18:	01000074 	movhi	r4,1
    8c1c:	01400074 	movhi	r5,1
    8c20:	21241904 	addi	r4,r4,-28572
    8c24:	29641904 	addi	r5,r5,-28572

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8c28:	2140101e 	bne	r4,r5,8c6c <alt_load+0xb4>
    8c2c:	00000b06 	br	8c5c <alt_load+0xa4>
    8c30:	00c00074 	movhi	r3,1
    8c34:	18e00804 	addi	r3,r3,-32736
    8c38:	1907c83a 	sub	r3,r3,r4
    8c3c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8c40:	10fff526 	beq	r2,r3,8c18 <_gp+0xffff7904>
    {
      *to++ = *from++;
    8c44:	114f883a 	add	r7,r2,r5
    8c48:	39c00017 	ldw	r7,0(r7)
    8c4c:	110d883a 	add	r6,r2,r4
    8c50:	10800104 	addi	r2,r2,4
    8c54:	31c00015 	stw	r7,0(r6)
    8c58:	003ff906 	br	8c40 <_gp+0xffff792c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8c5c:	000900c0 	call	900c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8c60:	dfc00017 	ldw	ra,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8c68:	00090181 	jmpi	9018 <alt_icache_flush_all>
    8c6c:	00c00074 	movhi	r3,1
    8c70:	18e47704 	addi	r3,r3,-28196
    8c74:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8c78:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8c7c:	18bff726 	beq	r3,r2,8c5c <_gp+0xffff7948>
    {
      *to++ = *from++;
    8c80:	114f883a 	add	r7,r2,r5
    8c84:	39c00017 	ldw	r7,0(r7)
    8c88:	110d883a 	add	r6,r2,r4
    8c8c:	10800104 	addi	r2,r2,4
    8c90:	31c00015 	stw	r7,0(r6)
    8c94:	003ff906 	br	8c7c <_gp+0xffff7968>

00008c98 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8c98:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8c9c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ca0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ca4:	0008ee00 	call	8ee0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ca8:	0008f000 	call	8f00 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8cac:	d1a06117 	ldw	r6,-32380(gp)
    8cb0:	d1606217 	ldw	r5,-32376(gp)
    8cb4:	d1206317 	ldw	r4,-32372(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8cb8:	dfc00017 	ldw	ra,0(sp)
    8cbc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8cc0:	00080e81 	jmpi	80e8 <main>

00008cc4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    8cc4:	defff204 	addi	sp,sp,-56
    8cc8:	2005883a 	mov	r2,r4
    8ccc:	dfc00a15 	stw	ra,40(sp)
    8cd0:	df000915 	stw	fp,36(sp)
    8cd4:	ddc00815 	stw	r23,32(sp)
    8cd8:	dd800715 	stw	r22,28(sp)
    8cdc:	dd400615 	stw	r21,24(sp)
    8ce0:	dd000515 	stw	r20,20(sp)
    8ce4:	dcc00415 	stw	r19,16(sp)
    8ce8:	dc800315 	stw	r18,12(sp)
    8cec:	dc400215 	stw	r17,8(sp)
    8cf0:	dc000115 	stw	r16,4(sp)
    8cf4:	d9400b15 	stw	r5,44(sp)
    8cf8:	d9800c15 	stw	r6,48(sp)
    8cfc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8d00:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    8d04:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    8d08:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    8d0c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    8d10:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8d14:	11000007 	ldb	r4,0(r2)
    8d18:	20003a26 	beq	r4,zero,8e04 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8d1c:	24000226 	beq	r4,r16,8d28 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8d20:	14400044 	addi	r17,r2,1
    8d24:	00001406 	br	8d78 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    8d28:	14400084 	addi	r17,r2,2
    8d2c:	10800047 	ldb	r2,1(r2)
    8d30:	10003426 	beq	r2,zero,8e04 <alt_printf+0x140>
            {
                if (c == '%')
    8d34:	1400021e 	bne	r2,r16,8d40 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    8d38:	8009883a 	mov	r4,r16
    8d3c:	00000e06 	br	8d78 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    8d40:	1480051e 	bne	r2,r18,8d58 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    8d44:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8d48:	ad800104 	addi	r22,r21,4
    8d4c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    8d50:	0008e340 	call	8e34 <alt_putchar>
    8d54:	00002906 	br	8dfc <alt_printf+0x138>
                }
                else if (c == 'x')
    8d58:	14c0201e 	bne	r2,r19,8ddc <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    8d5c:	adc00017 	ldw	r23,0(r21)
    8d60:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8d64:	b8000326 	beq	r23,zero,8d74 <alt_printf+0xb0>
    8d68:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8d6c:	00c003c4 	movi	r3,15
    8d70:	00000306 	br	8d80 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    8d74:	01000c04 	movi	r4,48
    8d78:	0008e340 	call	8e34 <alt_putchar>
                        continue;
    8d7c:	00001f06 	br	8dfc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8d80:	1d84983a 	sll	r2,r3,r22
    8d84:	15c4703a 	and	r2,r2,r23
    8d88:	1000021e 	bne	r2,zero,8d94 <alt_printf+0xd0>
                        digit_shift -= 4;
    8d8c:	b5bfff04 	addi	r22,r22,-4
    8d90:	003ffb06 	br	8d80 <_gp+0xffff7a6c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8d94:	070003c4 	movi	fp,15
                        if (digit <= 9)
    8d98:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8d9c:	b0001716 	blt	r22,zero,8dfc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8da0:	e588983a 	sll	r4,fp,r22
    8da4:	25c8703a 	and	r4,r4,r23
    8da8:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    8dac:	19000236 	bltu	r3,r4,8db8 <alt_printf+0xf4>
                            c = '0' + digit;
    8db0:	21000c04 	addi	r4,r4,48
    8db4:	00000106 	br	8dbc <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    8db8:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    8dbc:	21003fcc 	andi	r4,r4,255
    8dc0:	2100201c 	xori	r4,r4,128
    8dc4:	213fe004 	addi	r4,r4,-128
    8dc8:	d8c00015 	stw	r3,0(sp)
    8dcc:	0008e340 	call	8e34 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8dd0:	b5bfff04 	addi	r22,r22,-4
    8dd4:	d8c00017 	ldw	r3,0(sp)
    8dd8:	003ff006 	br	8d9c <_gp+0xffff7a88>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    8ddc:	1500071e 	bne	r2,r20,8dfc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    8de0:	ad800017 	ldw	r22,0(r21)
    8de4:	ad400104 	addi	r21,r21,4

                    while(*s)
    8de8:	b1000007 	ldb	r4,0(r22)
    8dec:	20000326 	beq	r4,zero,8dfc <alt_printf+0x138>
                      alt_putchar(*s++);
    8df0:	b5800044 	addi	r22,r22,1
    8df4:	0008e340 	call	8e34 <alt_putchar>
    8df8:	003ffb06 	br	8de8 <_gp+0xffff7ad4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8dfc:	8805883a 	mov	r2,r17
    8e00:	003fc406 	br	8d14 <_gp+0xffff7a00>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    8e04:	dfc00a17 	ldw	ra,40(sp)
    8e08:	df000917 	ldw	fp,36(sp)
    8e0c:	ddc00817 	ldw	r23,32(sp)
    8e10:	dd800717 	ldw	r22,28(sp)
    8e14:	dd400617 	ldw	r21,24(sp)
    8e18:	dd000517 	ldw	r20,20(sp)
    8e1c:	dcc00417 	ldw	r19,16(sp)
    8e20:	dc800317 	ldw	r18,12(sp)
    8e24:	dc400217 	ldw	r17,8(sp)
    8e28:	dc000117 	ldw	r16,4(sp)
    8e2c:	dec00e04 	addi	sp,sp,56
    8e30:	f800283a 	ret

00008e34 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8e34:	defffd04 	addi	sp,sp,-12
    8e38:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8e3c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8e40:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8e44:	01000074 	movhi	r4,1
    8e48:	000f883a 	mov	r7,zero
    8e4c:	01800044 	movi	r6,1
    8e50:	d80b883a 	mov	r5,sp
    8e54:	2124c704 	addi	r4,r4,-27876
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8e58:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8e5c:	0008f600 	call	8f60 <altera_avalon_jtag_uart_write>
    8e60:	00ffffc4 	movi	r3,-1
    8e64:	10c00126 	beq	r2,r3,8e6c <alt_putchar+0x38>
        return -1;
    }
    return c;
    8e68:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    8e6c:	dfc00217 	ldw	ra,8(sp)
    8e70:	dc000117 	ldw	r16,4(sp)
    8e74:	dec00304 	addi	sp,sp,12
    8e78:	f800283a 	ret

00008e7c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8e7c:	0008f941 	jmpi	8f94 <alt_busy_sleep>

00008e80 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8e80:	00800044 	movi	r2,1
    8e84:	20800226 	beq	r4,r2,8e90 <write+0x10>
    8e88:	00800084 	movi	r2,2
    8e8c:	2080041e 	bne	r4,r2,8ea0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8e90:	01000074 	movhi	r4,1
    8e94:	000f883a 	mov	r7,zero
    8e98:	2124c704 	addi	r4,r4,-27876
    8e9c:	0008f601 	jmpi	8f60 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8ea0:	d0a00817 	ldw	r2,-32736(gp)
    8ea4:	10000926 	beq	r2,zero,8ecc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8ea8:	deffff04 	addi	sp,sp,-4
    8eac:	dfc00015 	stw	ra,0(sp)
    8eb0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8eb4:	00c01444 	movi	r3,81
    8eb8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8ebc:	00bfffc4 	movi	r2,-1
    8ec0:	dfc00017 	ldw	ra,0(sp)
    8ec4:	dec00104 	addi	sp,sp,4
    8ec8:	f800283a 	ret
    8ecc:	d0a06004 	addi	r2,gp,-32384
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8ed0:	00c01444 	movi	r3,81
    8ed4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8ed8:	00bfffc4 	movi	r2,-1
    8edc:	f800283a 	ret

00008ee0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8ee0:	deffff04 	addi	sp,sp,-4
    8ee4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8ee8:	00090240 	call	9024 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8eec:	00800044 	movi	r2,1
    8ef0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8ef4:	dfc00017 	ldw	ra,0(sp)
    8ef8:	dec00104 	addi	sp,sp,4
    8efc:	f800283a 	ret

00008f00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8f00:	f800283a 	ret

00008f04 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    8f04:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    8f08:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    8f0c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8f10:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8f14:	11800b2e 	bgeu	r2,r6,8f44 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8f18:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8f1c:	1a60000c 	andi	r9,r3,32768
    8f20:	48000326 	beq	r9,zero,8f30 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8f24:	10c00005 	stb	r3,0(r2)
    8f28:	10800044 	addi	r2,r2,1
    8f2c:	003ff906 	br	8f14 <_gp+0xffff7c00>
    else if (ptr != buffer)
    8f30:	11400226 	beq	r2,r5,8f3c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    8f34:	1145c83a 	sub	r2,r2,r5
    8f38:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8f3c:	403ff526 	beq	r8,zero,8f14 <_gp+0xffff7c00>
    8f40:	00000106 	br	8f48 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    8f44:	117ffb1e 	bne	r2,r5,8f34 <_gp+0xffff7c20>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    8f48:	39d0000c 	andi	r7,r7,16384
    8f4c:	3800021e 	bne	r7,zero,8f58 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    8f50:	00bffec4 	movi	r2,-5
    8f54:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    8f58:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    8f5c:	f800283a 	ret

00008f60 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8f60:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8f64:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8f68:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8f6c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8f70:	2980072e 	bgeu	r5,r6,8f90 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8f74:	38c00037 	ldwio	r3,0(r7)
    8f78:	18ffffec 	andhi	r3,r3,65535
    8f7c:	183ffc26 	beq	r3,zero,8f70 <_gp+0xffff7c5c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8f80:	28c00007 	ldb	r3,0(r5)
    8f84:	20c00035 	stwio	r3,0(r4)
    8f88:	29400044 	addi	r5,r5,1
    8f8c:	003ff806 	br	8f70 <_gp+0xffff7c5c>

  return count;
}
    8f90:	f800283a 	ret

00008f94 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8f94:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8f98:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8f9c:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8fa0:	dc000015 	stw	r16,0(sp)
    8fa4:	dfc00115 	stw	ra,4(sp)
    8fa8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8fac:	0008ab80 	call	8ab8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8fb0:	10000e26 	beq	r2,zero,8fec <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8fb4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8fb8:	013e0034 	movhi	r4,63488
    8fbc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8fc0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8fc4:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8fc8:	297fffc4 	addi	r5,r5,-1
    8fcc:	283ffe1e 	bne	r5,zero,8fc8 <_gp+0xffff7cb4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8fd0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8fd4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8fd8:	18bffb16 	blt	r3,r2,8fc8 <_gp+0xffff7cb4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8fdc:	8020913a 	slli	r16,r16,4
    8fe0:	843fffc4 	addi	r16,r16,-1
    8fe4:	803ffe1e 	bne	r16,zero,8fe0 <_gp+0xffff7ccc>
    8fe8:	00000306 	br	8ff8 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8fec:	8020913a 	slli	r16,r16,4
    8ff0:	843fffc4 	addi	r16,r16,-1
    8ff4:	043ffe16 	blt	zero,r16,8ff0 <_gp+0xffff7cdc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8ff8:	0005883a 	mov	r2,zero
    8ffc:	dfc00117 	ldw	ra,4(sp)
    9000:	dc000017 	ldw	r16,0(sp)
    9004:	dec00204 	addi	sp,sp,8
    9008:	f800283a 	ret

0000900c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    900c:	f800283a 	ret

00009010 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    9010:	3005883a 	mov	r2,r6
    9014:	f800283a 	ret

00009018 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9018:	01420004 	movi	r5,2048
    901c:	0009883a 	mov	r4,zero
    9020:	000902c1 	jmpi	902c <alt_icache_flush>

00009024 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9024:	000170fa 	wrctl	ienable,zero
    9028:	f800283a 	ret

0000902c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    902c:	00820004 	movi	r2,2048
    9030:	1140012e 	bgeu	r2,r5,9038 <alt_icache_flush+0xc>
    9034:	100b883a 	mov	r5,r2
    9038:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    903c:	2005883a 	mov	r2,r4
    9040:	1140032e 	bgeu	r2,r5,9050 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9044:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9048:	10800804 	addi	r2,r2,32
    904c:	003ffc06 	br	9040 <_gp+0xffff7d2c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9050:	210007cc 	andi	r4,r4,31
    9054:	20000126 	beq	r4,zero,905c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9058:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    905c:	0000203a 	flushp
    9060:	f800283a 	ret
