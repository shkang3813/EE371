
hello_world_small.elf:     file format elf32-littlenios2
hello_world_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000298 memsz 0x00000298 flags r-x
    LOAD off    0x000012b8 vaddr 0x000082b8 paddr 0x000082bc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012c0 vaddr 0x000082c0 paddr 0x000082c0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000012bc  2**0
                  CONTENTS
  2 .text         00000280  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000082a0  000082a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000082b8  000082bc  000012b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000082c0  000082c0  000012c0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000082cc  000082cc  000012bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  000012e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c20  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000717  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007e4  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001b0  00000000  00000000  00002f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000618  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000172  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000038f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000047e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000047e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000047f5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000047f6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000047f7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000047fb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000047ff  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00004803  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000480e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00004819  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  00004836  2**0
                  CONTENTS, READONLY
 29 .jdi          000047b5  00000000  00000000  00004866  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cf2c  00000000  00000000  0000901b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000082a0 l    d  .rodata	00000000 .rodata
000082b8 l    d  .rwdata	00000000 .rwdata
000082c0 l    d  .bss	00000000 .bss
000082cc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_small_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00008164 g     F .text	0000002c alt_main
000082bc g       *ABS*	00000000 __flash_rwdata_start
00008190 g     F .text	00000038 alt_putstr
00008244 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000082c4 g     O .bss	00000004 alt_argv
000102b8 g       *ABS*	00000000 _gp
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000824c g     F .text	00000038 alt_icache_flush
000082cc g       *ABS*	00000000 __bss_end
00008220 g     F .text	00000018 alt_dcache_flush_all
000082bc g       *ABS*	00000000 __ram_rwdata_end
000082b8 g       *ABS*	00000000 __ram_rodata_end
000082b8 g     O .rwdata	00000004 jtag_uart_0
000082cc g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000081ec g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000004c _start
000081e8 g     F .text	00000004 alt_sys_init
000082b8 g       *ABS*	00000000 __ram_rwdata_start
000082a0 g       *ABS*	00000000 __ram_rodata_start
000082cc g       *ABS*	00000000 __alt_stack_base
000082c0 g       *ABS*	00000000 __bss_start
0000806c g     F .text	00000018 main
000082c0 g     O .bss	00000004 alt_envp
000082a0 g       *ABS*	00000000 __flash_rodata_start
000081c8 g     F .text	00000020 alt_irq_init
000082c8 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000082bc g       *ABS*	00000000 _edata
000082cc g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000d000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
00008284 g     F .text	0000001c strlen
00008238 g     F .text	0000000c alt_icache_flush_all
00008084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff7d4c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_gp+0xffff7d6c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d680ae14 	ori	gp,gp,696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a0b014 	ori	r2,r2,33472

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e0b314 	ori	r3,r3,33484

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_gp+0xffff7d9c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00080840 	call	8084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	00081640 	call	8164 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <_gp+0xffff7db0>

0000806c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    806c:	01000074 	movhi	r4,1
 */

#include "sys/alt_stdio.h"

int main()
{ 
    8070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8074:	2120a804 	addi	r4,r4,-32096
 */

#include "sys/alt_stdio.h"

int main()
{ 
    8078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    807c:	00081900 	call	8190 <alt_putstr>
    8080:	003fff06 	br	8080 <_gp+0xffff7dc8>

00008084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8084:	deffff04 	addi	sp,sp,-4
    8088:	01000074 	movhi	r4,1
    808c:	01400074 	movhi	r5,1
    8090:	dfc00015 	stw	ra,0(sp)
    8094:	2120ae04 	addi	r4,r4,-32072
    8098:	2960af04 	addi	r5,r5,-32068

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    809c:	2140061e 	bne	r4,r5,80b8 <alt_load+0x34>
    80a0:	01000074 	movhi	r4,1
    80a4:	01400074 	movhi	r5,1
    80a8:	21200804 	addi	r4,r4,-32736
    80ac:	29600804 	addi	r5,r5,-32736
    80b0:	2140121e 	bne	r4,r5,80fc <alt_load+0x78>
    80b4:	00000b06 	br	80e4 <alt_load+0x60>
    80b8:	00c00074 	movhi	r3,1
    80bc:	18e0af04 	addi	r3,r3,-32068
    80c0:	1907c83a 	sub	r3,r3,r4
    80c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    80c8:	10fff526 	beq	r2,r3,80a0 <_gp+0xffff7de8>
    {
      *to++ = *from++;
    80cc:	114f883a 	add	r7,r2,r5
    80d0:	39c00017 	ldw	r7,0(r7)
    80d4:	110d883a 	add	r6,r2,r4
    80d8:	10800104 	addi	r2,r2,4
    80dc:	31c00015 	stw	r7,0(r6)
    80e0:	003ff906 	br	80c8 <_gp+0xffff7e10>
    80e4:	01000074 	movhi	r4,1
    80e8:	01400074 	movhi	r5,1
    80ec:	2120a804 	addi	r4,r4,-32096
    80f0:	2960a804 	addi	r5,r5,-32096

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80f4:	2140101e 	bne	r4,r5,8138 <alt_load+0xb4>
    80f8:	00000b06 	br	8128 <alt_load+0xa4>
    80fc:	00c00074 	movhi	r3,1
    8100:	18e00804 	addi	r3,r3,-32736
    8104:	1907c83a 	sub	r3,r3,r4
    8108:	0005883a 	mov	r2,zero
  {
    while( to != end )
    810c:	10fff526 	beq	r2,r3,80e4 <_gp+0xffff7e2c>
    {
      *to++ = *from++;
    8110:	114f883a 	add	r7,r2,r5
    8114:	39c00017 	ldw	r7,0(r7)
    8118:	110d883a 	add	r6,r2,r4
    811c:	10800104 	addi	r2,r2,4
    8120:	31c00015 	stw	r7,0(r6)
    8124:	003ff906 	br	810c <_gp+0xffff7e54>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8128:	00082200 	call	8220 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    812c:	dfc00017 	ldw	ra,0(sp)
    8130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8134:	00082381 	jmpi	8238 <alt_icache_flush_all>
    8138:	00c00074 	movhi	r3,1
    813c:	18e0ae04 	addi	r3,r3,-32072
    8140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8144:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8148:	18bff726 	beq	r3,r2,8128 <_gp+0xffff7e70>
    {
      *to++ = *from++;
    814c:	114f883a 	add	r7,r2,r5
    8150:	39c00017 	ldw	r7,0(r7)
    8154:	110d883a 	add	r6,r2,r4
    8158:	10800104 	addi	r2,r2,4
    815c:	31c00015 	stw	r7,0(r6)
    8160:	003ff906 	br	8148 <_gp+0xffff7e90>

00008164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    816c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8170:	00081c80 	call	81c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8174:	00081e80 	call	81e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8178:	d1a00217 	ldw	r6,-32760(gp)
    817c:	d1600317 	ldw	r5,-32756(gp)
    8180:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8184:	dfc00017 	ldw	ra,0(sp)
    8188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    818c:	000806c1 	jmpi	806c <main>

00008190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8190:	defffe04 	addi	sp,sp,-8
    8194:	dc000015 	stw	r16,0(sp)
    8198:	dfc00115 	stw	ra,4(sp)
    819c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81a0:	00082840 	call	8284 <strlen>
    81a4:	01000074 	movhi	r4,1
    81a8:	000f883a 	mov	r7,zero
    81ac:	100d883a 	mov	r6,r2
    81b0:	800b883a 	mov	r5,r16
    81b4:	2120ae04 	addi	r4,r4,-32072
#else
    return fputs(str, stdout);
#endif
#endif
}
    81b8:	dfc00117 	ldw	ra,4(sp)
    81bc:	dc000017 	ldw	r16,0(sp)
    81c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81c4:	00081ec1 	jmpi	81ec <altera_avalon_jtag_uart_write>

000081c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81c8:	deffff04 	addi	sp,sp,-4
    81cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    81d0:	00082440 	call	8244 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    81d4:	00800044 	movi	r2,1
    81d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81dc:	dfc00017 	ldw	ra,0(sp)
    81e0:	dec00104 	addi	sp,sp,4
    81e4:	f800283a 	ret

000081e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    81e8:	f800283a 	ret

000081ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    81ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    81f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    81f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    81f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    81fc:	2980072e 	bgeu	r5,r6,821c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8200:	38c00037 	ldwio	r3,0(r7)
    8204:	18ffffec 	andhi	r3,r3,65535
    8208:	183ffc26 	beq	r3,zero,81fc <_gp+0xffff7f44>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    820c:	28c00007 	ldb	r3,0(r5)
    8210:	20c00035 	stwio	r3,0(r4)
    8214:	29400044 	addi	r5,r5,1
    8218:	003ff806 	br	81fc <_gp+0xffff7f44>

  return count;
}
    821c:	f800283a 	ret

00008220 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8220:	0005883a 	mov	r2,zero
    8224:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8228:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    822c:	10800804 	addi	r2,r2,32
    8230:	10fffd1e 	bne	r2,r3,8228 <_gp+0xffff7f70>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8234:	f800283a 	ret

00008238 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8238:	01420004 	movi	r5,2048
    823c:	0009883a 	mov	r4,zero
    8240:	000824c1 	jmpi	824c <alt_icache_flush>

00008244 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8244:	000170fa 	wrctl	ienable,zero
    8248:	f800283a 	ret

0000824c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    824c:	00820004 	movi	r2,2048
    8250:	1140012e 	bgeu	r2,r5,8258 <alt_icache_flush+0xc>
    8254:	100b883a 	mov	r5,r2
    8258:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    825c:	2005883a 	mov	r2,r4
    8260:	1140032e 	bgeu	r2,r5,8270 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8264:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8268:	10800804 	addi	r2,r2,32
    826c:	003ffc06 	br	8260 <_gp+0xffff7fa8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8270:	210007cc 	andi	r4,r4,31
    8274:	20000126 	beq	r4,zero,827c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8278:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    827c:	0000203a 	flushp
    8280:	f800283a 	ret

00008284 <strlen>:
    8284:	2005883a 	mov	r2,r4
    8288:	10c00007 	ldb	r3,0(r2)
    828c:	18000226 	beq	r3,zero,8298 <strlen+0x14>
    8290:	10800044 	addi	r2,r2,1
    8294:	003ffc06 	br	8288 <_gp+0xffff7fd0>
    8298:	1105c83a 	sub	r2,r2,r4
    829c:	f800283a 	ret
