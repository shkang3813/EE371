
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008244

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002a00 memsz 0x00002a00 flags r-x
    LOAD off    0x00003a20 vaddr 0x0000aa20 paddr 0x0000ad00 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003fe0 vaddr 0x0000afe0 paddr 0x0000afe0 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000026c4  00008244  00008244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  0000a908  0000a908  00003908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000aa20  0000ad00  00003a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000afe0  0000afe0  00003fe0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000b108  0000b108  00003d00  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000668  00000000  00000000  00003d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000091b6  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000309c  00000000  00000000  0000d546  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003452  00000000  00000000  000105e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cf0  00000000  00000000  00013a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e8b  00000000  00000000  00014724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000144f  00000000  00000000  000165af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00017a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d0  00000000  00000000  00017a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001992e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00019931  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001993d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001993e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001993f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00019943  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00019947  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001994b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00019956  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00019961  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001996c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  0001997e  2**0
                  CONTENTS, READONLY
 29 .jdi          000047b5  00000000  00000000  000199ae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cf2c  00000000  00000000  0001e163  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008244 l    d  .text	00000000 .text
0000a908 l    d  .rodata	00000000 .rodata
0000aa20 l    d  .rwdata	00000000 .rwdata
0000afe0 l    d  .bss	00000000 .bss
0000b108 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_bsp//obj/HAL/src/crt0.o
0000828c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
0000afe0 l     O .bss	00000001 count
00008290 l     F .text	00000024 lcd_init
000082b4 l     F .text	00000058 initial_message
0000830c l     F .text	00000034 count_led
00008340 l     F .text	00000020 count_sevenseg
00008360 l     F .text	0000002c count_lcd
0000838c l     F .text	00000054 count_all
000083e0 l     F .text	0000013c handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000892c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000aa20 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00009094 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000921c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009350 l     F .text	00000034 alt_dev_reg
0000ab00 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000964c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000099ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009a18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009dcc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009f0c l     F .text	0000003c alt_get_errno
00009f48 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b004 g     O .bss	00000004 alt_instruction_exception_handler
00008860 g     F .text	0000001c putchar
00009180 g     F .text	0000006c alt_main
0000887c g     F .text	00000080 _puts_r
0000b008 g     O .bss	00000100 alt_irq
0000ad00 g       *ABS*	00000000 __flash_rwdata_start
0000880c g     F .text	0000004c printf
0000a368 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
0000afe4 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000afe8 g     O .bss	00000004 errno
0000aff0 g     O .bss	00000004 alt_argv
00012cd4 g       *ABS*	00000000 _gp
000091ec g     F .text	00000030 usleep
0000ab54 g     O .rwdata	00000180 alt_fd_list
00008858 g     F .text	00000008 _putchar_r
0000a38c g     F .text	00000090 alt_find_dev
00009e90 g     F .text	0000007c alt_io_redirect
000088fc g     F .text	00000014 puts
0000a658 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000094cc g     F .text	000000ec altera_avalon_jtag_uart_read
000087d0 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008714 g     F .text	00000064 .hidden __udivsi3
0000a5c8 g     F .text	00000090 alt_icache_flush
0000acec g     O .rwdata	00000004 alt_max_fd
0000acd4 g     O .rwdata	00000004 _global_impure_ptr
0000b108 g       *ABS*	00000000 __bss_end
00009cdc g     F .text	000000f0 alt_iic_isr_register
0000a260 g     F .text	00000108 alt_tick
00009c90 g     F .text	0000004c alt_ic_irq_enabled
0000a1c4 g     F .text	0000009c alt_alarm_stop
0000aff8 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000ab2c g     O .rwdata	00000028 alt_dev_null
000099a4 g     F .text	00000048 alt_dcache_flush_all
0000ad00 g       *ABS*	00000000 __ram_rwdata_end
0000ace4 g     O .rwdata	00000008 alt_dev_list
00009258 g     F .text	000000f8 write
00008fe4 g     F .text	00000058 _putc_r
0000aa20 g       *ABS*	00000000 __ram_rodata_end
00008778 g     F .text	00000058 .hidden __umodsi3
0000b108 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000096c4 g     F .text	0000007c alt_avalon_timer_sc_init
000095b8 g     F .text	00000094 altera_avalon_jtag_uart_write
00008998 g     F .text	00000524 ___vfprintf_internal_r
0000a744 g     F .text	00000190 __call_exitprocs
00008244 g     F .text	0000004c _start
0000affc g     O .bss	00000004 _alt_tick_rate
0000b000 g     O .bss	00000004 _alt_nticks
000093bc g     F .text	00000050 alt_sys_init
0000aa20 g       *ABS*	00000000 __ram_rwdata_start
0000a908 g       *ABS*	00000000 __ram_rodata_start
0000940c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a524 g     F .text	000000a4 alt_get_fd
00009740 g     F .text	00000158 alt_busy_sleep
0000a714 g     F .text	00000030 memcmp
0000b108 g       *ABS*	00000000 __alt_stack_base
0000a41c g     F .text	00000108 alt_find_file
00009a54 g     F .text	000000a4 alt_dev_llist_insert
00008ed8 g     F .text	000000b8 __sfvwrite_small_dev
0000afe0 g       *ABS*	00000000 __bss_start
0000851c g     F .text	00000100 main
0000aff4 g     O .bss	00000004 alt_envp
0000946c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000acf0 g     O .rwdata	00000004 alt_errno
00008f90 g     F .text	00000054 putc
0000861c g     F .text	00000084 .hidden __divsi3
0000a908 g       *ABS*	00000000 __flash_rodata_start
00009384 g     F .text	00000038 alt_irq_init
0000a160 g     F .text	00000064 alt_release_fd
0000903c g     F .text	00000058 _write_r
0000acd8 g     O .rwdata	00000004 _impure_ptr
0000afec g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000acdc g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009b2c g     F .text	00000050 alt_ic_isr_register
0000ad00 g       *ABS*	00000000 _edata
0000b108 g       *ABS*	00000000 _end
00008244 g       *ABS*	00000000 __ram_exceptions_end
00009c04 g     F .text	0000008c alt_ic_irq_disable
0000a6f4 g     F .text	00000020 exit
000086a0 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a8d4 g     F .text	00000034 _exit
00008910 g     F .text	0000001c strlen
0000a00c g     F .text	00000154 open
00009af8 g     F .text	00000034 alt_icache_flush_all
0000acf4 g     O .rwdata	00000004 alt_priority_mask
00009b7c g     F .text	00000088 alt_ic_irq_enable
00008ebc g     F .text	0000001c __vfprintf_internal
0000acf8 g     O .rwdata	00000008 alt_alarm_list
000098d4 g     F .text	000000d0 close
000090fc g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff5330>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08609114 	ori	at,at,33348
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ac0204 	addi	r2,r2,-20472
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ac0204 	addi	r2,r2,-20472
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff5458>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff544c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81e4:	000531fa 	rdctl	r2,exception
    81e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81ec:	e0bffd17 	ldw	r2,-12(fp)
    81f0:	10801f0c 	andi	r2,r2,124
    81f4:	1004d0ba 	srli	r2,r2,2
    81f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81fc:	0005333a 	rdctl	r2,badaddr
    8200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    8204:	d0a0cc17 	ldw	r2,-31952(gp)
    8208:	10000726 	beq	r2,zero,8228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    820c:	d0a0cc17 	ldw	r2,-31952(gp)
    8210:	e0fffd17 	ldw	r3,-12(fp)
    8214:	e1bffe17 	ldw	r6,-8(fp)
    8218:	e17fff17 	ldw	r5,-4(fp)
    821c:	1809883a 	mov	r4,r3
    8220:	103ee83a 	callr	r2
    8224:	00000206 	br	8230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    822c:	0005883a 	mov	r2,zero
}
    8230:	e037883a 	mov	sp,fp
    8234:	dfc00117 	ldw	ra,4(sp)
    8238:	df000017 	ldw	fp,0(sp)
    823c:	dec00204 	addi	sp,sp,8
    8240:	f800283a 	ret

Disassembly of section .text:

00008244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    824c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8250:	00bffd16 	blt	zero,r2,8248 <_gp+0xffff5574>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8258:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    825c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8260:	d68b3514 	ori	gp,gp,11476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8268:	10abf814 	ori	r2,r2,45024

    movhi r3, %hi(__bss_end)
    826c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8270:	18ec4214 	ori	r3,r3,45320

    beq r2, r3, 1f
    8274:	10c00326 	beq	r2,r3,8284 <_start+0x40>

0:
    stw zero, (r2)
    8278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    827c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8280:	10fffd36 	bltu	r2,r3,8278 <_gp+0xffff55a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8284:	00090fc0 	call	90fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8288:	00091800 	call	9180 <alt_main>

0000828c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    828c:	003fff06 	br	828c <_gp+0xffff55b8>

00008290 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    8290:	defffe04 	addi	sp,sp,-8
    8294:	df000115 	stw	fp,4(sp)
    8298:	df000104 	addi	fp,sp,4
    829c:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    82a0:	0001883a 	nop
    82a4:	e037883a 	mov	sp,fp
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00104 	addi	sp,sp,4
    82b0:	f800283a 	ret

000082b4 <initial_message>:

static void initial_message()
{
    82b4:	defffe04 	addi	sp,sp,-8
    82b8:	dfc00115 	stw	ra,4(sp)
    82bc:	df000015 	stw	fp,0(sp)
    82c0:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    82c4:	01000074 	movhi	r4,1
    82c8:	212a4204 	addi	r4,r4,-22264
    82cc:	00088fc0 	call	88fc <puts>
    printf("* Hello from Nios II!    *\n");
    82d0:	01000074 	movhi	r4,1
    82d4:	212a4a04 	addi	r4,r4,-22232
    82d8:	00088fc0 	call	88fc <puts>
    printf("* Counting from 00 to ff *\n");
    82dc:	01000074 	movhi	r4,1
    82e0:	212a5104 	addi	r4,r4,-22204
    82e4:	00088fc0 	call	88fc <puts>
    printf("**************************\n");
    82e8:	01000074 	movhi	r4,1
    82ec:	212a5804 	addi	r4,r4,-22176
    82f0:	00088fc0 	call	88fc <puts>
}
    82f4:	0001883a 	nop
    82f8:	e037883a 	mov	sp,fp
    82fc:	dfc00117 	ldw	ra,4(sp)
    8300:	df000017 	ldw	fp,0(sp)
    8304:	dec00204 	addi	sp,sp,8
    8308:	f800283a 	ret

0000830c <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    830c:	deffff04 	addi	sp,sp,-4
    8310:	df000015 	stw	fp,0(sp)
    8314:	d839883a 	mov	fp,sp
#ifdef PIO_0_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
    8318:	d0a0c303 	ldbu	r2,-31988(gp)
    831c:	10c03fcc 	andi	r3,r2,255
    8320:	00800074 	movhi	r2,1
    8324:	10840804 	addi	r2,r2,4128
    8328:	10c00035 	stwio	r3,0(r2)
    		PIO_0_BASE,
        count
        );
#endif
}
    832c:	0001883a 	nop
    8330:	e037883a 	mov	sp,fp
    8334:	df000017 	ldw	fp,0(sp)
    8338:	dec00104 	addi	sp,sp,4
    833c:	f800283a 	ret

00008340 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    8340:	deffff04 	addi	sp,sp,-4
    8344:	df000015 	stw	fp,0(sp)
    8348:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    834c:	0001883a 	nop
    8350:	e037883a 	mov	sp,fp
    8354:	df000017 	ldw	fp,0(sp)
    8358:	dec00104 	addi	sp,sp,4
    835c:	f800283a 	ret

00008360 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    8360:	defffd04 	addi	sp,sp,-12
    8364:	df000215 	stw	fp,8(sp)
    8368:	df000204 	addi	fp,sp,8
    836c:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    8370:	e0bfff17 	ldw	r2,-4(fp)
    8374:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    8378:	0001883a 	nop
    837c:	e037883a 	mov	sp,fp
    8380:	df000017 	ldw	fp,0(sp)
    8384:	dec00104 	addi	sp,sp,4
    8388:	f800283a 	ret

0000838c <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    838c:	defffd04 	addi	sp,sp,-12
    8390:	dfc00215 	stw	ra,8(sp)
    8394:	df000115 	stw	fp,4(sp)
    8398:	df000104 	addi	fp,sp,4
    839c:	e13fff15 	stw	r4,-4(fp)
    count_led();
    83a0:	000830c0 	call	830c <count_led>
    count_sevenseg();
    83a4:	00083400 	call	8340 <count_sevenseg>
    count_lcd( arg );
    83a8:	e13fff17 	ldw	r4,-4(fp)
    83ac:	00083600 	call	8360 <count_lcd>
    printf("%02x,  ", count);
    83b0:	d0a0c303 	ldbu	r2,-31988(gp)
    83b4:	10803fcc 	andi	r2,r2,255
    83b8:	100b883a 	mov	r5,r2
    83bc:	01000074 	movhi	r4,1
    83c0:	212a5f04 	addi	r4,r4,-22148
    83c4:	000880c0 	call	880c <printf>
}
    83c8:	0001883a 	nop
    83cc:	e037883a 	mov	sp,fp
    83d0:	dfc00117 	ldw	ra,4(sp)
    83d4:	df000017 	ldw	fp,0(sp)
    83d8:	dec00204 	addi	sp,sp,8
    83dc:	f800283a 	ret

000083e0 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    83e0:	defffc04 	addi	sp,sp,-16
    83e4:	dfc00315 	stw	ra,12(sp)
    83e8:	df000215 	stw	fp,8(sp)
    83ec:	df000204 	addi	fp,sp,8
    83f0:	2005883a 	mov	r2,r4
    83f4:	e17fff15 	stw	r5,-4(fp)
    83f8:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    83fc:	e0bffe03 	ldbu	r2,-8(fp)
    8400:	108018d8 	cmpnei	r2,r2,99
    8404:	10001b1e 	bne	r2,zero,8474 <handle_button_press+0x94>
    {
        switch (edge_capture) 
    8408:	d0a0c417 	ldw	r2,-31984(gp)
    840c:	10c000a0 	cmpeqi	r3,r2,2
    8410:	18000c1e 	bne	r3,zero,8444 <handle_button_press+0x64>
    8414:	10c000c8 	cmpgei	r3,r2,3
    8418:	1800031e 	bne	r3,zero,8428 <handle_button_press+0x48>
    841c:	10800060 	cmpeqi	r2,r2,1
    8420:	1000061e 	bne	r2,zero,843c <handle_button_press+0x5c>
    8424:	00000f06 	br	8464 <handle_button_press+0x84>
    8428:	10c00120 	cmpeqi	r3,r2,4
    842c:	1800071e 	bne	r3,zero,844c <handle_button_press+0x6c>
    8430:	10800220 	cmpeqi	r2,r2,8
    8434:	1000081e 	bne	r2,zero,8458 <handle_button_press+0x78>
    8438:	00000a06 	br	8464 <handle_button_press+0x84>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    843c:	000830c0 	call	830c <count_led>
            break;
    8440:	00003006 	br	8504 <handle_button_press+0x124>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    8444:	00083400 	call	8340 <count_sevenseg>
            break;
    8448:	00002e06 	br	8504 <handle_button_press+0x124>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    844c:	e13fff17 	ldw	r4,-4(fp)
    8450:	00083600 	call	8360 <count_lcd>
            break;
    8454:	00002b06 	br	8504 <handle_button_press+0x124>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    8458:	e13fff17 	ldw	r4,-4(fp)
    845c:	000838c0 	call	838c <count_all>
            break;
    8460:	00002806 	br	8504 <handle_button_press+0x124>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    8464:	e13fff17 	ldw	r4,-4(fp)
    8468:	000838c0 	call	838c <count_all>
            break;
    846c:	0001883a 	nop
    8470:	00002406 	br	8504 <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    8474:	d0a0c417 	ldw	r2,-31984(gp)
    8478:	10c000a0 	cmpeqi	r3,r2,2
    847c:	18000f1e 	bne	r3,zero,84bc <handle_button_press+0xdc>
    8480:	10c000c8 	cmpgei	r3,r2,3
    8484:	1800031e 	bne	r3,zero,8494 <handle_button_press+0xb4>
    8488:	10800060 	cmpeqi	r2,r2,1
    848c:	1000061e 	bne	r2,zero,84a8 <handle_button_press+0xc8>
    8490:	00001906 	br	84f8 <handle_button_press+0x118>
    8494:	10c00120 	cmpeqi	r3,r2,4
    8498:	18000d1e 	bne	r3,zero,84d0 <handle_button_press+0xf0>
    849c:	10800220 	cmpeqi	r2,r2,8
    84a0:	1000101e 	bne	r2,zero,84e4 <handle_button_press+0x104>
    84a4:	00001406 	br	84f8 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
    84a8:	01000074 	movhi	r4,1
    84ac:	212a6104 	addi	r4,r4,-22140
    84b0:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84b4:	d020c415 	stw	zero,-31984(gp)
            break;
    84b8:	00001206 	br	8504 <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
    84bc:	01000074 	movhi	r4,1
    84c0:	212a6404 	addi	r4,r4,-22128
    84c4:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84c8:	d020c415 	stw	zero,-31984(gp)
            break;
    84cc:	00000d06 	br	8504 <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
    84d0:	01000074 	movhi	r4,1
    84d4:	212a6704 	addi	r4,r4,-22116
    84d8:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84dc:	d020c415 	stw	zero,-31984(gp)
            break;
    84e0:	00000806 	br	8504 <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
    84e4:	01000074 	movhi	r4,1
    84e8:	212a6a04 	addi	r4,r4,-22104
    84ec:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84f0:	d020c415 	stw	zero,-31984(gp)
            break;
    84f4:	00000306 	br	8504 <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
    84f8:	01000074 	movhi	r4,1
    84fc:	212a6d04 	addi	r4,r4,-22092
    8500:	00088fc0 	call	88fc <puts>
        }
    }
}
    8504:	0001883a 	nop
    8508:	e037883a 	mov	sp,fp
    850c:	dfc00117 	ldw	ra,4(sp)
    8510:	df000017 	ldw	fp,0(sp)
    8514:	dec00204 	addi	sp,sp,8
    8518:	f800283a 	ret

0000851c <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    851c:	defffb04 	addi	sp,sp,-20
    8520:	dfc00415 	stw	ra,16(sp)
    8524:	df000315 	stw	fp,12(sp)
    8528:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    852c:	d020c305 	stb	zero,-31988(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    8530:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    8534:	e0bffe17 	ldw	r2,-8(fp)
    8538:	10000226 	beq	r2,zero,8544 <main+0x28>
    853c:	e13ffe17 	ldw	r4,-8(fp)
    8540:	00082900 	call	8290 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    8544:	00082b40 	call	82b4 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    8548:	010000b4 	movhi	r4,2
    854c:	2121a804 	addi	r4,r4,-31072
    8550:	00091ec0 	call	91ec <usleep>
        if (edge_capture != 0)
    8554:	d0a0c417 	ldw	r2,-31984(gp)
    8558:	10000426 	beq	r2,zero,856c <main+0x50>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    855c:	e17ffe17 	ldw	r5,-8(fp)
    8560:	010018c4 	movi	r4,99
    8564:	00083e00 	call	83e0 <handle_button_press>
    8568:	00000206 	br	8574 <main+0x58>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    856c:	e13ffe17 	ldw	r4,-8(fp)
    8570:	000838c0 	call	838c <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    8574:	d0a0c303 	ldbu	r2,-31988(gp)
    8578:	10803fcc 	andi	r2,r2,255
    857c:	10803fd8 	cmpnei	r2,r2,255
    8580:	1000221e 	bne	r2,zero,860c <main+0xf0>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    8584:	01000074 	movhi	r4,1
    8588:	212a7304 	addi	r4,r4,-22068
    858c:	000880c0 	call	880c <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    8590:	d020c415 	stw	zero,-31984(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    8594:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
    8598:	e03ffd15 	stw	zero,-12(fp)
    859c:	00001506 	br	85f4 <main+0xd8>
            {
                printf(".");
    85a0:	01000b84 	movi	r4,46
    85a4:	00088600 	call	8860 <putchar>
                wait_time = i/10;
    85a8:	e0bffd17 	ldw	r2,-12(fp)
    85ac:	01400284 	movi	r5,10
    85b0:	1009883a 	mov	r4,r2
    85b4:	000861c0 	call	861c <__divsi3>
    85b8:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    85bc:	d0a0c417 	ldw	r2,-31984(gp)
    85c0:	10000626 	beq	r2,zero,85dc <main+0xc0>
                {
                    printf( "\nYou pushed:  " );
    85c4:	01000074 	movhi	r4,1
    85c8:	212a7604 	addi	r4,r4,-22056
    85cc:	000880c0 	call	880c <printf>
                    handle_button_press('w', lcd);
    85d0:	e17ffe17 	ldw	r5,-8(fp)
    85d4:	01001dc4 	movi	r4,119
    85d8:	00083e00 	call	83e0 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    85dc:	010000b4 	movhi	r4,2
    85e0:	2121a804 	addi	r4,r4,-31072
    85e4:	00091ec0 	call	91ec <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
    85e8:	e0bffd17 	ldw	r2,-12(fp)
    85ec:	10800044 	addi	r2,r2,1
    85f0:	e0bffd15 	stw	r2,-12(fp)
    85f4:	e0bffd17 	ldw	r2,-12(fp)
    85f8:	10801190 	cmplti	r2,r2,70
    85fc:	103fe81e 	bne	r2,zero,85a0 <_gp+0xffff58cc>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    8600:	00082b40 	call	82b4 <initial_message>
            lcd_init( lcd );
    8604:	e13ffe17 	ldw	r4,-8(fp)
    8608:	00082900 	call	8290 <lcd_init>
        }
        count++;
    860c:	d0a0c303 	ldbu	r2,-31988(gp)
    8610:	10800044 	addi	r2,r2,1
    8614:	d0a0c305 	stb	r2,-31988(gp)
    }
    8618:	003fcb06 	br	8548 <_gp+0xffff5874>

0000861c <__divsi3>:
    861c:	20001b16 	blt	r4,zero,868c <__divsi3+0x70>
    8620:	000f883a 	mov	r7,zero
    8624:	28001616 	blt	r5,zero,8680 <__divsi3+0x64>
    8628:	200d883a 	mov	r6,r4
    862c:	29001a2e 	bgeu	r5,r4,8698 <__divsi3+0x7c>
    8630:	00800804 	movi	r2,32
    8634:	00c00044 	movi	r3,1
    8638:	00000106 	br	8640 <__divsi3+0x24>
    863c:	10000d26 	beq	r2,zero,8674 <__divsi3+0x58>
    8640:	294b883a 	add	r5,r5,r5
    8644:	10bfffc4 	addi	r2,r2,-1
    8648:	18c7883a 	add	r3,r3,r3
    864c:	293ffb36 	bltu	r5,r4,863c <_gp+0xffff5968>
    8650:	0005883a 	mov	r2,zero
    8654:	18000726 	beq	r3,zero,8674 <__divsi3+0x58>
    8658:	0005883a 	mov	r2,zero
    865c:	31400236 	bltu	r6,r5,8668 <__divsi3+0x4c>
    8660:	314dc83a 	sub	r6,r6,r5
    8664:	10c4b03a 	or	r2,r2,r3
    8668:	1806d07a 	srli	r3,r3,1
    866c:	280ad07a 	srli	r5,r5,1
    8670:	183ffa1e 	bne	r3,zero,865c <_gp+0xffff5988>
    8674:	38000126 	beq	r7,zero,867c <__divsi3+0x60>
    8678:	0085c83a 	sub	r2,zero,r2
    867c:	f800283a 	ret
    8680:	014bc83a 	sub	r5,zero,r5
    8684:	39c0005c 	xori	r7,r7,1
    8688:	003fe706 	br	8628 <_gp+0xffff5954>
    868c:	0109c83a 	sub	r4,zero,r4
    8690:	01c00044 	movi	r7,1
    8694:	003fe306 	br	8624 <_gp+0xffff5950>
    8698:	00c00044 	movi	r3,1
    869c:	003fee06 	br	8658 <_gp+0xffff5984>

000086a0 <__modsi3>:
    86a0:	20001716 	blt	r4,zero,8700 <__modsi3+0x60>
    86a4:	000f883a 	mov	r7,zero
    86a8:	2005883a 	mov	r2,r4
    86ac:	28001216 	blt	r5,zero,86f8 <__modsi3+0x58>
    86b0:	2900162e 	bgeu	r5,r4,870c <__modsi3+0x6c>
    86b4:	01800804 	movi	r6,32
    86b8:	00c00044 	movi	r3,1
    86bc:	00000106 	br	86c4 <__modsi3+0x24>
    86c0:	30000a26 	beq	r6,zero,86ec <__modsi3+0x4c>
    86c4:	294b883a 	add	r5,r5,r5
    86c8:	31bfffc4 	addi	r6,r6,-1
    86cc:	18c7883a 	add	r3,r3,r3
    86d0:	293ffb36 	bltu	r5,r4,86c0 <_gp+0xffff59ec>
    86d4:	18000526 	beq	r3,zero,86ec <__modsi3+0x4c>
    86d8:	1806d07a 	srli	r3,r3,1
    86dc:	11400136 	bltu	r2,r5,86e4 <__modsi3+0x44>
    86e0:	1145c83a 	sub	r2,r2,r5
    86e4:	280ad07a 	srli	r5,r5,1
    86e8:	183ffb1e 	bne	r3,zero,86d8 <_gp+0xffff5a04>
    86ec:	38000126 	beq	r7,zero,86f4 <__modsi3+0x54>
    86f0:	0085c83a 	sub	r2,zero,r2
    86f4:	f800283a 	ret
    86f8:	014bc83a 	sub	r5,zero,r5
    86fc:	003fec06 	br	86b0 <_gp+0xffff59dc>
    8700:	0109c83a 	sub	r4,zero,r4
    8704:	01c00044 	movi	r7,1
    8708:	003fe706 	br	86a8 <_gp+0xffff59d4>
    870c:	00c00044 	movi	r3,1
    8710:	003ff106 	br	86d8 <_gp+0xffff5a04>

00008714 <__udivsi3>:
    8714:	200d883a 	mov	r6,r4
    8718:	2900152e 	bgeu	r5,r4,8770 <__udivsi3+0x5c>
    871c:	28001416 	blt	r5,zero,8770 <__udivsi3+0x5c>
    8720:	00800804 	movi	r2,32
    8724:	00c00044 	movi	r3,1
    8728:	00000206 	br	8734 <__udivsi3+0x20>
    872c:	10000e26 	beq	r2,zero,8768 <__udivsi3+0x54>
    8730:	28000516 	blt	r5,zero,8748 <__udivsi3+0x34>
    8734:	294b883a 	add	r5,r5,r5
    8738:	10bfffc4 	addi	r2,r2,-1
    873c:	18c7883a 	add	r3,r3,r3
    8740:	293ffa36 	bltu	r5,r4,872c <_gp+0xffff5a58>
    8744:	18000826 	beq	r3,zero,8768 <__udivsi3+0x54>
    8748:	0005883a 	mov	r2,zero
    874c:	31400236 	bltu	r6,r5,8758 <__udivsi3+0x44>
    8750:	314dc83a 	sub	r6,r6,r5
    8754:	10c4b03a 	or	r2,r2,r3
    8758:	1806d07a 	srli	r3,r3,1
    875c:	280ad07a 	srli	r5,r5,1
    8760:	183ffa1e 	bne	r3,zero,874c <_gp+0xffff5a78>
    8764:	f800283a 	ret
    8768:	0005883a 	mov	r2,zero
    876c:	f800283a 	ret
    8770:	00c00044 	movi	r3,1
    8774:	003ff406 	br	8748 <_gp+0xffff5a74>

00008778 <__umodsi3>:
    8778:	2005883a 	mov	r2,r4
    877c:	2900122e 	bgeu	r5,r4,87c8 <__umodsi3+0x50>
    8780:	28001116 	blt	r5,zero,87c8 <__umodsi3+0x50>
    8784:	01800804 	movi	r6,32
    8788:	00c00044 	movi	r3,1
    878c:	00000206 	br	8798 <__umodsi3+0x20>
    8790:	30000c26 	beq	r6,zero,87c4 <__umodsi3+0x4c>
    8794:	28000516 	blt	r5,zero,87ac <__umodsi3+0x34>
    8798:	294b883a 	add	r5,r5,r5
    879c:	31bfffc4 	addi	r6,r6,-1
    87a0:	18c7883a 	add	r3,r3,r3
    87a4:	293ffa36 	bltu	r5,r4,8790 <_gp+0xffff5abc>
    87a8:	18000626 	beq	r3,zero,87c4 <__umodsi3+0x4c>
    87ac:	1806d07a 	srli	r3,r3,1
    87b0:	11400136 	bltu	r2,r5,87b8 <__umodsi3+0x40>
    87b4:	1145c83a 	sub	r2,r2,r5
    87b8:	280ad07a 	srli	r5,r5,1
    87bc:	183ffb1e 	bne	r3,zero,87ac <_gp+0xffff5ad8>
    87c0:	f800283a 	ret
    87c4:	f800283a 	ret
    87c8:	00c00044 	movi	r3,1
    87cc:	003ff706 	br	87ac <_gp+0xffff5ad8>

000087d0 <_printf_r>:
    87d0:	defffd04 	addi	sp,sp,-12
    87d4:	dfc00015 	stw	ra,0(sp)
    87d8:	d9800115 	stw	r6,4(sp)
    87dc:	d9c00215 	stw	r7,8(sp)
    87e0:	20c00217 	ldw	r3,8(r4)
    87e4:	01800074 	movhi	r6,1
    87e8:	31a3b604 	addi	r6,r6,-28968
    87ec:	19800115 	stw	r6,4(r3)
    87f0:	280d883a 	mov	r6,r5
    87f4:	21400217 	ldw	r5,8(r4)
    87f8:	d9c00104 	addi	r7,sp,4
    87fc:	00089980 	call	8998 <___vfprintf_internal_r>
    8800:	dfc00017 	ldw	ra,0(sp)
    8804:	dec00304 	addi	sp,sp,12
    8808:	f800283a 	ret

0000880c <printf>:
    880c:	defffc04 	addi	sp,sp,-16
    8810:	dfc00015 	stw	ra,0(sp)
    8814:	d9400115 	stw	r5,4(sp)
    8818:	d9800215 	stw	r6,8(sp)
    881c:	d9c00315 	stw	r7,12(sp)
    8820:	00800074 	movhi	r2,1
    8824:	10ab3604 	addi	r2,r2,-21288
    8828:	10800017 	ldw	r2,0(r2)
    882c:	01400074 	movhi	r5,1
    8830:	2963b604 	addi	r5,r5,-28968
    8834:	10c00217 	ldw	r3,8(r2)
    8838:	d9800104 	addi	r6,sp,4
    883c:	19400115 	stw	r5,4(r3)
    8840:	200b883a 	mov	r5,r4
    8844:	11000217 	ldw	r4,8(r2)
    8848:	0008ebc0 	call	8ebc <__vfprintf_internal>
    884c:	dfc00017 	ldw	ra,0(sp)
    8850:	dec00404 	addi	sp,sp,16
    8854:	f800283a 	ret

00008858 <_putchar_r>:
    8858:	21800217 	ldw	r6,8(r4)
    885c:	0008fe41 	jmpi	8fe4 <_putc_r>

00008860 <putchar>:
    8860:	00800074 	movhi	r2,1
    8864:	10ab3604 	addi	r2,r2,-21288
    8868:	10800017 	ldw	r2,0(r2)
    886c:	200b883a 	mov	r5,r4
    8870:	11800217 	ldw	r6,8(r2)
    8874:	1009883a 	mov	r4,r2
    8878:	0008fe41 	jmpi	8fe4 <_putc_r>

0000887c <_puts_r>:
    887c:	defffd04 	addi	sp,sp,-12
    8880:	dc000015 	stw	r16,0(sp)
    8884:	2021883a 	mov	r16,r4
    8888:	2809883a 	mov	r4,r5
    888c:	dfc00215 	stw	ra,8(sp)
    8890:	dc400115 	stw	r17,4(sp)
    8894:	2823883a 	mov	r17,r5
    8898:	00089100 	call	8910 <strlen>
    889c:	81400217 	ldw	r5,8(r16)
    88a0:	01000074 	movhi	r4,1
    88a4:	2123b604 	addi	r4,r4,-28968
    88a8:	29000115 	stw	r4,4(r5)
    88ac:	100f883a 	mov	r7,r2
    88b0:	880d883a 	mov	r6,r17
    88b4:	8009883a 	mov	r4,r16
    88b8:	0008ed80 	call	8ed8 <__sfvwrite_small_dev>
    88bc:	00ffffc4 	movi	r3,-1
    88c0:	10c00926 	beq	r2,r3,88e8 <_puts_r+0x6c>
    88c4:	81400217 	ldw	r5,8(r16)
    88c8:	01800074 	movhi	r6,1
    88cc:	01c00044 	movi	r7,1
    88d0:	28800117 	ldw	r2,4(r5)
    88d4:	31aa7a04 	addi	r6,r6,-22040
    88d8:	8009883a 	mov	r4,r16
    88dc:	103ee83a 	callr	r2
    88e0:	10bfffe0 	cmpeqi	r2,r2,-1
    88e4:	0085c83a 	sub	r2,zero,r2
    88e8:	dfc00217 	ldw	ra,8(sp)
    88ec:	dc400117 	ldw	r17,4(sp)
    88f0:	dc000017 	ldw	r16,0(sp)
    88f4:	dec00304 	addi	sp,sp,12
    88f8:	f800283a 	ret

000088fc <puts>:
    88fc:	00800074 	movhi	r2,1
    8900:	10ab3604 	addi	r2,r2,-21288
    8904:	200b883a 	mov	r5,r4
    8908:	11000017 	ldw	r4,0(r2)
    890c:	000887c1 	jmpi	887c <_puts_r>

00008910 <strlen>:
    8910:	2005883a 	mov	r2,r4
    8914:	10c00007 	ldb	r3,0(r2)
    8918:	18000226 	beq	r3,zero,8924 <strlen+0x14>
    891c:	10800044 	addi	r2,r2,1
    8920:	003ffc06 	br	8914 <_gp+0xffff5c40>
    8924:	1105c83a 	sub	r2,r2,r4
    8928:	f800283a 	ret

0000892c <print_repeat>:
    892c:	defffb04 	addi	sp,sp,-20
    8930:	dc800315 	stw	r18,12(sp)
    8934:	dc400215 	stw	r17,8(sp)
    8938:	dc000115 	stw	r16,4(sp)
    893c:	dfc00415 	stw	ra,16(sp)
    8940:	2025883a 	mov	r18,r4
    8944:	2823883a 	mov	r17,r5
    8948:	d9800005 	stb	r6,0(sp)
    894c:	3821883a 	mov	r16,r7
    8950:	04000a0e 	bge	zero,r16,897c <print_repeat+0x50>
    8954:	88800117 	ldw	r2,4(r17)
    8958:	01c00044 	movi	r7,1
    895c:	d80d883a 	mov	r6,sp
    8960:	880b883a 	mov	r5,r17
    8964:	9009883a 	mov	r4,r18
    8968:	103ee83a 	callr	r2
    896c:	843fffc4 	addi	r16,r16,-1
    8970:	103ff726 	beq	r2,zero,8950 <_gp+0xffff5c7c>
    8974:	00bfffc4 	movi	r2,-1
    8978:	00000106 	br	8980 <print_repeat+0x54>
    897c:	0005883a 	mov	r2,zero
    8980:	dfc00417 	ldw	ra,16(sp)
    8984:	dc800317 	ldw	r18,12(sp)
    8988:	dc400217 	ldw	r17,8(sp)
    898c:	dc000117 	ldw	r16,4(sp)
    8990:	dec00504 	addi	sp,sp,20
    8994:	f800283a 	ret

00008998 <___vfprintf_internal_r>:
    8998:	deffe504 	addi	sp,sp,-108
    899c:	d8c00804 	addi	r3,sp,32
    89a0:	df001915 	stw	fp,100(sp)
    89a4:	ddc01815 	stw	r23,96(sp)
    89a8:	dd801715 	stw	r22,92(sp)
    89ac:	dd401615 	stw	r21,88(sp)
    89b0:	dd001515 	stw	r20,84(sp)
    89b4:	dcc01415 	stw	r19,80(sp)
    89b8:	dc801315 	stw	r18,76(sp)
    89bc:	dc401215 	stw	r17,72(sp)
    89c0:	dc001115 	stw	r16,68(sp)
    89c4:	dfc01a15 	stw	ra,104(sp)
    89c8:	2027883a 	mov	r19,r4
    89cc:	2839883a 	mov	fp,r5
    89d0:	382d883a 	mov	r22,r7
    89d4:	d9800f15 	stw	r6,60(sp)
    89d8:	0021883a 	mov	r16,zero
    89dc:	d8000e15 	stw	zero,56(sp)
    89e0:	002f883a 	mov	r23,zero
    89e4:	002b883a 	mov	r21,zero
    89e8:	0025883a 	mov	r18,zero
    89ec:	0023883a 	mov	r17,zero
    89f0:	d8000c15 	stw	zero,48(sp)
    89f4:	d8000b15 	stw	zero,44(sp)
    89f8:	0029883a 	mov	r20,zero
    89fc:	d8c00915 	stw	r3,36(sp)
    8a00:	d8c00f17 	ldw	r3,60(sp)
    8a04:	19000003 	ldbu	r4,0(r3)
    8a08:	20803fcc 	andi	r2,r4,255
    8a0c:	1080201c 	xori	r2,r2,128
    8a10:	10bfe004 	addi	r2,r2,-128
    8a14:	10011c26 	beq	r2,zero,8e88 <___vfprintf_internal_r+0x4f0>
    8a18:	00c00044 	movi	r3,1
    8a1c:	a0c01426 	beq	r20,r3,8a70 <___vfprintf_internal_r+0xd8>
    8a20:	1d000216 	blt	r3,r20,8a2c <___vfprintf_internal_r+0x94>
    8a24:	a0000626 	beq	r20,zero,8a40 <___vfprintf_internal_r+0xa8>
    8a28:	00011306 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8a2c:	01400084 	movi	r5,2
    8a30:	a1401d26 	beq	r20,r5,8aa8 <___vfprintf_internal_r+0x110>
    8a34:	014000c4 	movi	r5,3
    8a38:	a1402926 	beq	r20,r5,8ae0 <___vfprintf_internal_r+0x148>
    8a3c:	00010e06 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8a40:	01400944 	movi	r5,37
    8a44:	1140fb26 	beq	r2,r5,8e34 <___vfprintf_internal_r+0x49c>
    8a48:	e0800117 	ldw	r2,4(fp)
    8a4c:	d9000005 	stb	r4,0(sp)
    8a50:	01c00044 	movi	r7,1
    8a54:	d80d883a 	mov	r6,sp
    8a58:	e00b883a 	mov	r5,fp
    8a5c:	9809883a 	mov	r4,r19
    8a60:	103ee83a 	callr	r2
    8a64:	1000d61e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8a68:	84000044 	addi	r16,r16,1
    8a6c:	00010206 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8a70:	01400c04 	movi	r5,48
    8a74:	1140f826 	beq	r2,r5,8e58 <___vfprintf_internal_r+0x4c0>
    8a78:	01400944 	movi	r5,37
    8a7c:	11400a1e 	bne	r2,r5,8aa8 <___vfprintf_internal_r+0x110>
    8a80:	d8800005 	stb	r2,0(sp)
    8a84:	e0800117 	ldw	r2,4(fp)
    8a88:	a00f883a 	mov	r7,r20
    8a8c:	d80d883a 	mov	r6,sp
    8a90:	e00b883a 	mov	r5,fp
    8a94:	9809883a 	mov	r4,r19
    8a98:	103ee83a 	callr	r2
    8a9c:	1000c81e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8aa0:	84000044 	addi	r16,r16,1
    8aa4:	0000f306 	br	8e74 <___vfprintf_internal_r+0x4dc>
    8aa8:	217ff404 	addi	r5,r4,-48
    8aac:	29403fcc 	andi	r5,r5,255
    8ab0:	00c00244 	movi	r3,9
    8ab4:	19400736 	bltu	r3,r5,8ad4 <___vfprintf_internal_r+0x13c>
    8ab8:	00bfffc4 	movi	r2,-1
    8abc:	88800226 	beq	r17,r2,8ac8 <___vfprintf_internal_r+0x130>
    8ac0:	8c4002a4 	muli	r17,r17,10
    8ac4:	00000106 	br	8acc <___vfprintf_internal_r+0x134>
    8ac8:	0023883a 	mov	r17,zero
    8acc:	2c63883a 	add	r17,r5,r17
    8ad0:	0000e206 	br	8e5c <___vfprintf_internal_r+0x4c4>
    8ad4:	01400b84 	movi	r5,46
    8ad8:	1140e426 	beq	r2,r5,8e6c <___vfprintf_internal_r+0x4d4>
    8adc:	05000084 	movi	r20,2
    8ae0:	213ff404 	addi	r4,r4,-48
    8ae4:	21003fcc 	andi	r4,r4,255
    8ae8:	00c00244 	movi	r3,9
    8aec:	19000736 	bltu	r3,r4,8b0c <___vfprintf_internal_r+0x174>
    8af0:	00bfffc4 	movi	r2,-1
    8af4:	90800226 	beq	r18,r2,8b00 <___vfprintf_internal_r+0x168>
    8af8:	948002a4 	muli	r18,r18,10
    8afc:	00000106 	br	8b04 <___vfprintf_internal_r+0x16c>
    8b00:	0025883a 	mov	r18,zero
    8b04:	24a5883a 	add	r18,r4,r18
    8b08:	0000db06 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8b0c:	00c01b04 	movi	r3,108
    8b10:	10c0d426 	beq	r2,r3,8e64 <___vfprintf_internal_r+0x4cc>
    8b14:	013fffc4 	movi	r4,-1
    8b18:	91000226 	beq	r18,r4,8b24 <___vfprintf_internal_r+0x18c>
    8b1c:	d8000b15 	stw	zero,44(sp)
    8b20:	00000106 	br	8b28 <___vfprintf_internal_r+0x190>
    8b24:	04800044 	movi	r18,1
    8b28:	01001a44 	movi	r4,105
    8b2c:	11001626 	beq	r2,r4,8b88 <___vfprintf_internal_r+0x1f0>
    8b30:	20800916 	blt	r4,r2,8b58 <___vfprintf_internal_r+0x1c0>
    8b34:	010018c4 	movi	r4,99
    8b38:	11008a26 	beq	r2,r4,8d64 <___vfprintf_internal_r+0x3cc>
    8b3c:	01001904 	movi	r4,100
    8b40:	11001126 	beq	r2,r4,8b88 <___vfprintf_internal_r+0x1f0>
    8b44:	01001604 	movi	r4,88
    8b48:	1100ca1e 	bne	r2,r4,8e74 <___vfprintf_internal_r+0x4dc>
    8b4c:	00c00044 	movi	r3,1
    8b50:	d8c00e15 	stw	r3,56(sp)
    8b54:	00001406 	br	8ba8 <___vfprintf_internal_r+0x210>
    8b58:	01001cc4 	movi	r4,115
    8b5c:	11009a26 	beq	r2,r4,8dc8 <___vfprintf_internal_r+0x430>
    8b60:	20800416 	blt	r4,r2,8b74 <___vfprintf_internal_r+0x1dc>
    8b64:	01001bc4 	movi	r4,111
    8b68:	1100c21e 	bne	r2,r4,8e74 <___vfprintf_internal_r+0x4dc>
    8b6c:	05400204 	movi	r21,8
    8b70:	00000e06 	br	8bac <___vfprintf_internal_r+0x214>
    8b74:	01001d44 	movi	r4,117
    8b78:	11000c26 	beq	r2,r4,8bac <___vfprintf_internal_r+0x214>
    8b7c:	01001e04 	movi	r4,120
    8b80:	11000926 	beq	r2,r4,8ba8 <___vfprintf_internal_r+0x210>
    8b84:	0000bb06 	br	8e74 <___vfprintf_internal_r+0x4dc>
    8b88:	b5000104 	addi	r20,r22,4
    8b8c:	b8000726 	beq	r23,zero,8bac <___vfprintf_internal_r+0x214>
    8b90:	dd000d15 	stw	r20,52(sp)
    8b94:	b5800017 	ldw	r22,0(r22)
    8b98:	b000080e 	bge	r22,zero,8bbc <___vfprintf_internal_r+0x224>
    8b9c:	05adc83a 	sub	r22,zero,r22
    8ba0:	02800044 	movi	r10,1
    8ba4:	00000606 	br	8bc0 <___vfprintf_internal_r+0x228>
    8ba8:	05400404 	movi	r21,16
    8bac:	b0c00104 	addi	r3,r22,4
    8bb0:	d8c00d15 	stw	r3,52(sp)
    8bb4:	b5800017 	ldw	r22,0(r22)
    8bb8:	002f883a 	mov	r23,zero
    8bbc:	0015883a 	mov	r10,zero
    8bc0:	d829883a 	mov	r20,sp
    8bc4:	b0001426 	beq	r22,zero,8c18 <___vfprintf_internal_r+0x280>
    8bc8:	b009883a 	mov	r4,r22
    8bcc:	a80b883a 	mov	r5,r21
    8bd0:	da801015 	stw	r10,64(sp)
    8bd4:	00087140 	call	8714 <__udivsi3>
    8bd8:	1549383a 	mul	r4,r2,r21
    8bdc:	00c00244 	movi	r3,9
    8be0:	da801017 	ldw	r10,64(sp)
    8be4:	b12dc83a 	sub	r22,r22,r4
    8be8:	1d800216 	blt	r3,r22,8bf4 <___vfprintf_internal_r+0x25c>
    8bec:	b5800c04 	addi	r22,r22,48
    8bf0:	00000506 	br	8c08 <___vfprintf_internal_r+0x270>
    8bf4:	d8c00e17 	ldw	r3,56(sp)
    8bf8:	18000226 	beq	r3,zero,8c04 <___vfprintf_internal_r+0x26c>
    8bfc:	b5800dc4 	addi	r22,r22,55
    8c00:	00000106 	br	8c08 <___vfprintf_internal_r+0x270>
    8c04:	b58015c4 	addi	r22,r22,87
    8c08:	a5800005 	stb	r22,0(r20)
    8c0c:	a5000044 	addi	r20,r20,1
    8c10:	102d883a 	mov	r22,r2
    8c14:	003feb06 	br	8bc4 <_gp+0xffff5ef0>
    8c18:	a6c7c83a 	sub	r3,r20,sp
    8c1c:	d8c00a15 	stw	r3,40(sp)
    8c20:	90c5c83a 	sub	r2,r18,r3
    8c24:	00800a0e 	bge	zero,r2,8c50 <___vfprintf_internal_r+0x2b8>
    8c28:	a085883a 	add	r2,r20,r2
    8c2c:	01400c04 	movi	r5,48
    8c30:	d8c00917 	ldw	r3,36(sp)
    8c34:	a009883a 	mov	r4,r20
    8c38:	a0c0032e 	bgeu	r20,r3,8c48 <___vfprintf_internal_r+0x2b0>
    8c3c:	a5000044 	addi	r20,r20,1
    8c40:	21400005 	stb	r5,0(r4)
    8c44:	a0bffa1e 	bne	r20,r2,8c30 <_gp+0xffff5f5c>
    8c48:	a6c7c83a 	sub	r3,r20,sp
    8c4c:	d8c00a15 	stw	r3,40(sp)
    8c50:	d8c00a17 	ldw	r3,40(sp)
    8c54:	50d3883a 	add	r9,r10,r3
    8c58:	d8c00b17 	ldw	r3,44(sp)
    8c5c:	8a6dc83a 	sub	r22,r17,r9
    8c60:	18001726 	beq	r3,zero,8cc0 <___vfprintf_internal_r+0x328>
    8c64:	50000a26 	beq	r10,zero,8c90 <___vfprintf_internal_r+0x2f8>
    8c68:	00800b44 	movi	r2,45
    8c6c:	d8800805 	stb	r2,32(sp)
    8c70:	e0800117 	ldw	r2,4(fp)
    8c74:	01c00044 	movi	r7,1
    8c78:	d9800804 	addi	r6,sp,32
    8c7c:	e00b883a 	mov	r5,fp
    8c80:	9809883a 	mov	r4,r19
    8c84:	103ee83a 	callr	r2
    8c88:	10004d1e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8c8c:	84000044 	addi	r16,r16,1
    8c90:	0580070e 	bge	zero,r22,8cb0 <___vfprintf_internal_r+0x318>
    8c94:	b00f883a 	mov	r7,r22
    8c98:	01800c04 	movi	r6,48
    8c9c:	e00b883a 	mov	r5,fp
    8ca0:	9809883a 	mov	r4,r19
    8ca4:	000892c0 	call	892c <print_repeat>
    8ca8:	1000451e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8cac:	85a1883a 	add	r16,r16,r22
    8cb0:	d8c00a17 	ldw	r3,40(sp)
    8cb4:	a013883a 	mov	r9,r20
    8cb8:	1d2dc83a 	sub	r22,r3,r20
    8cbc:	00002206 	br	8d48 <___vfprintf_internal_r+0x3b0>
    8cc0:	0580090e 	bge	zero,r22,8ce8 <___vfprintf_internal_r+0x350>
    8cc4:	b00f883a 	mov	r7,r22
    8cc8:	01800804 	movi	r6,32
    8ccc:	e00b883a 	mov	r5,fp
    8cd0:	9809883a 	mov	r4,r19
    8cd4:	da801015 	stw	r10,64(sp)
    8cd8:	000892c0 	call	892c <print_repeat>
    8cdc:	da801017 	ldw	r10,64(sp)
    8ce0:	1000371e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8ce4:	85a1883a 	add	r16,r16,r22
    8ce8:	503ff126 	beq	r10,zero,8cb0 <_gp+0xffff5fdc>
    8cec:	00800b44 	movi	r2,45
    8cf0:	d8800805 	stb	r2,32(sp)
    8cf4:	e0800117 	ldw	r2,4(fp)
    8cf8:	01c00044 	movi	r7,1
    8cfc:	d9800804 	addi	r6,sp,32
    8d00:	e00b883a 	mov	r5,fp
    8d04:	9809883a 	mov	r4,r19
    8d08:	103ee83a 	callr	r2
    8d0c:	10002c1e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8d10:	84000044 	addi	r16,r16,1
    8d14:	003fe606 	br	8cb0 <_gp+0xffff5fdc>
    8d18:	4a7fffc4 	addi	r9,r9,-1
    8d1c:	48800003 	ldbu	r2,0(r9)
    8d20:	01c00044 	movi	r7,1
    8d24:	d9800804 	addi	r6,sp,32
    8d28:	d8800805 	stb	r2,32(sp)
    8d2c:	e0800117 	ldw	r2,4(fp)
    8d30:	e00b883a 	mov	r5,fp
    8d34:	da401015 	stw	r9,64(sp)
    8d38:	9809883a 	mov	r4,r19
    8d3c:	103ee83a 	callr	r2
    8d40:	da401017 	ldw	r9,64(sp)
    8d44:	10001e1e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8d48:	8245c83a 	sub	r2,r16,r9
    8d4c:	4d89883a 	add	r4,r9,r22
    8d50:	a085883a 	add	r2,r20,r2
    8d54:	013ff016 	blt	zero,r4,8d18 <_gp+0xffff6044>
    8d58:	1021883a 	mov	r16,r2
    8d5c:	dd800d17 	ldw	r22,52(sp)
    8d60:	00004406 	br	8e74 <___vfprintf_internal_r+0x4dc>
    8d64:	00800044 	movi	r2,1
    8d68:	1440080e 	bge	r2,r17,8d8c <___vfprintf_internal_r+0x3f4>
    8d6c:	8d3fffc4 	addi	r20,r17,-1
    8d70:	a00f883a 	mov	r7,r20
    8d74:	01800804 	movi	r6,32
    8d78:	e00b883a 	mov	r5,fp
    8d7c:	9809883a 	mov	r4,r19
    8d80:	000892c0 	call	892c <print_repeat>
    8d84:	10000e1e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8d88:	8521883a 	add	r16,r16,r20
    8d8c:	b0800017 	ldw	r2,0(r22)
    8d90:	01c00044 	movi	r7,1
    8d94:	d80d883a 	mov	r6,sp
    8d98:	d8800005 	stb	r2,0(sp)
    8d9c:	e0800117 	ldw	r2,4(fp)
    8da0:	e00b883a 	mov	r5,fp
    8da4:	9809883a 	mov	r4,r19
    8da8:	b5000104 	addi	r20,r22,4
    8dac:	103ee83a 	callr	r2
    8db0:	1000031e 	bne	r2,zero,8dc0 <___vfprintf_internal_r+0x428>
    8db4:	84000044 	addi	r16,r16,1
    8db8:	a02d883a 	mov	r22,r20
    8dbc:	00002d06 	br	8e74 <___vfprintf_internal_r+0x4dc>
    8dc0:	00bfffc4 	movi	r2,-1
    8dc4:	00003106 	br	8e8c <___vfprintf_internal_r+0x4f4>
    8dc8:	b5000017 	ldw	r20,0(r22)
    8dcc:	b0c00104 	addi	r3,r22,4
    8dd0:	d8c00a15 	stw	r3,40(sp)
    8dd4:	a009883a 	mov	r4,r20
    8dd8:	00089100 	call	8910 <strlen>
    8ddc:	8893c83a 	sub	r9,r17,r2
    8de0:	102d883a 	mov	r22,r2
    8de4:	0240090e 	bge	zero,r9,8e0c <___vfprintf_internal_r+0x474>
    8de8:	480f883a 	mov	r7,r9
    8dec:	01800804 	movi	r6,32
    8df0:	e00b883a 	mov	r5,fp
    8df4:	9809883a 	mov	r4,r19
    8df8:	da401015 	stw	r9,64(sp)
    8dfc:	000892c0 	call	892c <print_repeat>
    8e00:	da401017 	ldw	r9,64(sp)
    8e04:	103fee1e 	bne	r2,zero,8dc0 <_gp+0xffff60ec>
    8e08:	8261883a 	add	r16,r16,r9
    8e0c:	e0800117 	ldw	r2,4(fp)
    8e10:	b00f883a 	mov	r7,r22
    8e14:	a00d883a 	mov	r6,r20
    8e18:	e00b883a 	mov	r5,fp
    8e1c:	9809883a 	mov	r4,r19
    8e20:	103ee83a 	callr	r2
    8e24:	103fe61e 	bne	r2,zero,8dc0 <_gp+0xffff60ec>
    8e28:	85a1883a 	add	r16,r16,r22
    8e2c:	dd800a17 	ldw	r22,40(sp)
    8e30:	00001006 	br	8e74 <___vfprintf_internal_r+0x4dc>
    8e34:	05c00044 	movi	r23,1
    8e38:	04bfffc4 	movi	r18,-1
    8e3c:	d8000e15 	stw	zero,56(sp)
    8e40:	05400284 	movi	r21,10
    8e44:	9023883a 	mov	r17,r18
    8e48:	d8000c15 	stw	zero,48(sp)
    8e4c:	d8000b15 	stw	zero,44(sp)
    8e50:	b829883a 	mov	r20,r23
    8e54:	00000806 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8e58:	dd000b15 	stw	r20,44(sp)
    8e5c:	05000084 	movi	r20,2
    8e60:	00000506 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8e64:	00c00044 	movi	r3,1
    8e68:	d8c00c15 	stw	r3,48(sp)
    8e6c:	050000c4 	movi	r20,3
    8e70:	00000106 	br	8e78 <___vfprintf_internal_r+0x4e0>
    8e74:	0029883a 	mov	r20,zero
    8e78:	d8c00f17 	ldw	r3,60(sp)
    8e7c:	18c00044 	addi	r3,r3,1
    8e80:	d8c00f15 	stw	r3,60(sp)
    8e84:	003ede06 	br	8a00 <_gp+0xffff5d2c>
    8e88:	8005883a 	mov	r2,r16
    8e8c:	dfc01a17 	ldw	ra,104(sp)
    8e90:	df001917 	ldw	fp,100(sp)
    8e94:	ddc01817 	ldw	r23,96(sp)
    8e98:	dd801717 	ldw	r22,92(sp)
    8e9c:	dd401617 	ldw	r21,88(sp)
    8ea0:	dd001517 	ldw	r20,84(sp)
    8ea4:	dcc01417 	ldw	r19,80(sp)
    8ea8:	dc801317 	ldw	r18,76(sp)
    8eac:	dc401217 	ldw	r17,72(sp)
    8eb0:	dc001117 	ldw	r16,68(sp)
    8eb4:	dec01b04 	addi	sp,sp,108
    8eb8:	f800283a 	ret

00008ebc <__vfprintf_internal>:
    8ebc:	00800074 	movhi	r2,1
    8ec0:	10ab3604 	addi	r2,r2,-21288
    8ec4:	300f883a 	mov	r7,r6
    8ec8:	280d883a 	mov	r6,r5
    8ecc:	200b883a 	mov	r5,r4
    8ed0:	11000017 	ldw	r4,0(r2)
    8ed4:	00089981 	jmpi	8998 <___vfprintf_internal_r>

00008ed8 <__sfvwrite_small_dev>:
    8ed8:	2880000b 	ldhu	r2,0(r5)
    8edc:	1080020c 	andi	r2,r2,8
    8ee0:	10002126 	beq	r2,zero,8f68 <__sfvwrite_small_dev+0x90>
    8ee4:	2880008f 	ldh	r2,2(r5)
    8ee8:	defffa04 	addi	sp,sp,-24
    8eec:	dc000015 	stw	r16,0(sp)
    8ef0:	dfc00515 	stw	ra,20(sp)
    8ef4:	dd000415 	stw	r20,16(sp)
    8ef8:	dcc00315 	stw	r19,12(sp)
    8efc:	dc800215 	stw	r18,8(sp)
    8f00:	dc400115 	stw	r17,4(sp)
    8f04:	2821883a 	mov	r16,r5
    8f08:	10001216 	blt	r2,zero,8f54 <__sfvwrite_small_dev+0x7c>
    8f0c:	2027883a 	mov	r19,r4
    8f10:	3025883a 	mov	r18,r6
    8f14:	3823883a 	mov	r17,r7
    8f18:	05010004 	movi	r20,1024
    8f1c:	04400b0e 	bge	zero,r17,8f4c <__sfvwrite_small_dev+0x74>
    8f20:	880f883a 	mov	r7,r17
    8f24:	a440010e 	bge	r20,r17,8f2c <__sfvwrite_small_dev+0x54>
    8f28:	01c10004 	movi	r7,1024
    8f2c:	8140008f 	ldh	r5,2(r16)
    8f30:	900d883a 	mov	r6,r18
    8f34:	9809883a 	mov	r4,r19
    8f38:	000903c0 	call	903c <_write_r>
    8f3c:	0080050e 	bge	zero,r2,8f54 <__sfvwrite_small_dev+0x7c>
    8f40:	88a3c83a 	sub	r17,r17,r2
    8f44:	90a5883a 	add	r18,r18,r2
    8f48:	003ff406 	br	8f1c <_gp+0xffff6248>
    8f4c:	0005883a 	mov	r2,zero
    8f50:	00000706 	br	8f70 <__sfvwrite_small_dev+0x98>
    8f54:	8080000b 	ldhu	r2,0(r16)
    8f58:	10801014 	ori	r2,r2,64
    8f5c:	8080000d 	sth	r2,0(r16)
    8f60:	00bfffc4 	movi	r2,-1
    8f64:	00000206 	br	8f70 <__sfvwrite_small_dev+0x98>
    8f68:	00bfffc4 	movi	r2,-1
    8f6c:	f800283a 	ret
    8f70:	dfc00517 	ldw	ra,20(sp)
    8f74:	dd000417 	ldw	r20,16(sp)
    8f78:	dcc00317 	ldw	r19,12(sp)
    8f7c:	dc800217 	ldw	r18,8(sp)
    8f80:	dc400117 	ldw	r17,4(sp)
    8f84:	dc000017 	ldw	r16,0(sp)
    8f88:	dec00604 	addi	sp,sp,24
    8f8c:	f800283a 	ret

00008f90 <putc>:
    8f90:	defffd04 	addi	sp,sp,-12
    8f94:	00800074 	movhi	r2,1
    8f98:	dc000115 	stw	r16,4(sp)
    8f9c:	dfc00215 	stw	ra,8(sp)
    8fa0:	10a3b604 	addi	r2,r2,-28968
    8fa4:	28800115 	stw	r2,4(r5)
    8fa8:	00800074 	movhi	r2,1
    8fac:	10ab3604 	addi	r2,r2,-21288
    8fb0:	d9000005 	stb	r4,0(sp)
    8fb4:	2021883a 	mov	r16,r4
    8fb8:	11000017 	ldw	r4,0(r2)
    8fbc:	01c00044 	movi	r7,1
    8fc0:	d80d883a 	mov	r6,sp
    8fc4:	0008ed80 	call	8ed8 <__sfvwrite_small_dev>
    8fc8:	00ffffc4 	movi	r3,-1
    8fcc:	10c00126 	beq	r2,r3,8fd4 <putc+0x44>
    8fd0:	8005883a 	mov	r2,r16
    8fd4:	dfc00217 	ldw	ra,8(sp)
    8fd8:	dc000117 	ldw	r16,4(sp)
    8fdc:	dec00304 	addi	sp,sp,12
    8fe0:	f800283a 	ret

00008fe4 <_putc_r>:
    8fe4:	defffd04 	addi	sp,sp,-12
    8fe8:	00800074 	movhi	r2,1
    8fec:	dc000115 	stw	r16,4(sp)
    8ff0:	dfc00215 	stw	ra,8(sp)
    8ff4:	10a3b604 	addi	r2,r2,-28968
    8ff8:	30800115 	stw	r2,4(r6)
    8ffc:	00800074 	movhi	r2,1
    9000:	10ab3604 	addi	r2,r2,-21288
    9004:	11000017 	ldw	r4,0(r2)
    9008:	2821883a 	mov	r16,r5
    900c:	01c00044 	movi	r7,1
    9010:	300b883a 	mov	r5,r6
    9014:	d80d883a 	mov	r6,sp
    9018:	dc000005 	stb	r16,0(sp)
    901c:	0008ed80 	call	8ed8 <__sfvwrite_small_dev>
    9020:	00ffffc4 	movi	r3,-1
    9024:	10c00126 	beq	r2,r3,902c <_putc_r+0x48>
    9028:	8005883a 	mov	r2,r16
    902c:	dfc00217 	ldw	ra,8(sp)
    9030:	dc000117 	ldw	r16,4(sp)
    9034:	dec00304 	addi	sp,sp,12
    9038:	f800283a 	ret

0000903c <_write_r>:
    903c:	defffd04 	addi	sp,sp,-12
    9040:	dc000015 	stw	r16,0(sp)
    9044:	04000074 	movhi	r16,1
    9048:	dc400115 	stw	r17,4(sp)
    904c:	842bfa04 	addi	r16,r16,-20504
    9050:	2023883a 	mov	r17,r4
    9054:	2809883a 	mov	r4,r5
    9058:	300b883a 	mov	r5,r6
    905c:	380d883a 	mov	r6,r7
    9060:	dfc00215 	stw	ra,8(sp)
    9064:	80000015 	stw	zero,0(r16)
    9068:	00092580 	call	9258 <write>
    906c:	00ffffc4 	movi	r3,-1
    9070:	10c0031e 	bne	r2,r3,9080 <_write_r+0x44>
    9074:	80c00017 	ldw	r3,0(r16)
    9078:	18000126 	beq	r3,zero,9080 <_write_r+0x44>
    907c:	88c00015 	stw	r3,0(r17)
    9080:	dfc00217 	ldw	ra,8(sp)
    9084:	dc400117 	ldw	r17,4(sp)
    9088:	dc000017 	ldw	r16,0(sp)
    908c:	dec00304 	addi	sp,sp,12
    9090:	f800283a 	ret

00009094 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9094:	defffc04 	addi	sp,sp,-16
    9098:	df000315 	stw	fp,12(sp)
    909c:	df000304 	addi	fp,sp,12
    90a0:	e13ffd15 	stw	r4,-12(fp)
    90a4:	e17ffe15 	stw	r5,-8(fp)
    90a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    90ac:	e0fffe17 	ldw	r3,-8(fp)
    90b0:	e0bffd17 	ldw	r2,-12(fp)
    90b4:	18800c26 	beq	r3,r2,90e8 <alt_load_section+0x54>
  {
    while( to != end )
    90b8:	00000806 	br	90dc <alt_load_section+0x48>
    {
      *to++ = *from++;
    90bc:	e0bffe17 	ldw	r2,-8(fp)
    90c0:	10c00104 	addi	r3,r2,4
    90c4:	e0fffe15 	stw	r3,-8(fp)
    90c8:	e0fffd17 	ldw	r3,-12(fp)
    90cc:	19000104 	addi	r4,r3,4
    90d0:	e13ffd15 	stw	r4,-12(fp)
    90d4:	18c00017 	ldw	r3,0(r3)
    90d8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    90dc:	e0fffe17 	ldw	r3,-8(fp)
    90e0:	e0bfff17 	ldw	r2,-4(fp)
    90e4:	18bff51e 	bne	r3,r2,90bc <_gp+0xffff63e8>
    {
      *to++ = *from++;
    }
  }
}
    90e8:	0001883a 	nop
    90ec:	e037883a 	mov	sp,fp
    90f0:	df000017 	ldw	fp,0(sp)
    90f4:	dec00104 	addi	sp,sp,4
    90f8:	f800283a 	ret

000090fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    90fc:	defffe04 	addi	sp,sp,-8
    9100:	dfc00115 	stw	ra,4(sp)
    9104:	df000015 	stw	fp,0(sp)
    9108:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    910c:	01800074 	movhi	r6,1
    9110:	31ab4004 	addi	r6,r6,-21248
    9114:	01400074 	movhi	r5,1
    9118:	296a8804 	addi	r5,r5,-21984
    911c:	01000074 	movhi	r4,1
    9120:	212b4004 	addi	r4,r4,-21248
    9124:	00090940 	call	9094 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9128:	01800074 	movhi	r6,1
    912c:	31a09104 	addi	r6,r6,-32188
    9130:	01400074 	movhi	r5,1
    9134:	29600804 	addi	r5,r5,-32736
    9138:	01000074 	movhi	r4,1
    913c:	21200804 	addi	r4,r4,-32736
    9140:	00090940 	call	9094 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9144:	01800074 	movhi	r6,1
    9148:	31aa8804 	addi	r6,r6,-21984
    914c:	01400074 	movhi	r5,1
    9150:	296a4204 	addi	r5,r5,-22264
    9154:	01000074 	movhi	r4,1
    9158:	212a4204 	addi	r4,r4,-22264
    915c:	00090940 	call	9094 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9160:	00099a40 	call	99a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9164:	0009af80 	call	9af8 <alt_icache_flush_all>
}
    9168:	0001883a 	nop
    916c:	e037883a 	mov	sp,fp
    9170:	dfc00117 	ldw	ra,4(sp)
    9174:	df000017 	ldw	fp,0(sp)
    9178:	dec00204 	addi	sp,sp,8
    917c:	f800283a 	ret

00009180 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9180:	defffd04 	addi	sp,sp,-12
    9184:	dfc00215 	stw	ra,8(sp)
    9188:	df000115 	stw	fp,4(sp)
    918c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9190:	0009883a 	mov	r4,zero
    9194:	00093840 	call	9384 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9198:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    919c:	00093bc0 	call	93bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    91a0:	01800074 	movhi	r6,1
    91a4:	31aa7b04 	addi	r6,r6,-22036
    91a8:	01400074 	movhi	r5,1
    91ac:	296a7b04 	addi	r5,r5,-22036
    91b0:	01000074 	movhi	r4,1
    91b4:	212a7b04 	addi	r4,r4,-22036
    91b8:	0009e900 	call	9e90 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    91bc:	d0a0c617 	ldw	r2,-31976(gp)
    91c0:	d0e0c717 	ldw	r3,-31972(gp)
    91c4:	d120c817 	ldw	r4,-31968(gp)
    91c8:	200d883a 	mov	r6,r4
    91cc:	180b883a 	mov	r5,r3
    91d0:	1009883a 	mov	r4,r2
    91d4:	000851c0 	call	851c <main>
    91d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    91dc:	01000044 	movi	r4,1
    91e0:	00098d40 	call	98d4 <close>
  exit (result);
    91e4:	e13fff17 	ldw	r4,-4(fp)
    91e8:	000a6f40 	call	a6f4 <exit>

000091ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    91ec:	defffd04 	addi	sp,sp,-12
    91f0:	dfc00215 	stw	ra,8(sp)
    91f4:	df000115 	stw	fp,4(sp)
    91f8:	df000104 	addi	fp,sp,4
    91fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9200:	e13fff17 	ldw	r4,-4(fp)
    9204:	00097400 	call	9740 <alt_busy_sleep>
}
    9208:	e037883a 	mov	sp,fp
    920c:	dfc00117 	ldw	ra,4(sp)
    9210:	df000017 	ldw	fp,0(sp)
    9214:	dec00204 	addi	sp,sp,8
    9218:	f800283a 	ret

0000921c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    921c:	defffe04 	addi	sp,sp,-8
    9220:	dfc00115 	stw	ra,4(sp)
    9224:	df000015 	stw	fp,0(sp)
    9228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    922c:	d0a00717 	ldw	r2,-32740(gp)
    9230:	10000326 	beq	r2,zero,9240 <alt_get_errno+0x24>
    9234:	d0a00717 	ldw	r2,-32740(gp)
    9238:	103ee83a 	callr	r2
    923c:	00000106 	br	9244 <alt_get_errno+0x28>
    9240:	d0a0c504 	addi	r2,gp,-31980
}
    9244:	e037883a 	mov	sp,fp
    9248:	dfc00117 	ldw	ra,4(sp)
    924c:	df000017 	ldw	fp,0(sp)
    9250:	dec00204 	addi	sp,sp,8
    9254:	f800283a 	ret

00009258 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9258:	defff904 	addi	sp,sp,-28
    925c:	dfc00615 	stw	ra,24(sp)
    9260:	df000515 	stw	fp,20(sp)
    9264:	df000504 	addi	fp,sp,20
    9268:	e13ffd15 	stw	r4,-12(fp)
    926c:	e17ffe15 	stw	r5,-8(fp)
    9270:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9274:	e0bffd17 	ldw	r2,-12(fp)
    9278:	10000616 	blt	r2,zero,9294 <write+0x3c>
    927c:	e0bffd17 	ldw	r2,-12(fp)
    9280:	10c00324 	muli	r3,r2,12
    9284:	00800074 	movhi	r2,1
    9288:	10aad504 	addi	r2,r2,-21676
    928c:	1885883a 	add	r2,r3,r2
    9290:	00000106 	br	9298 <write+0x40>
    9294:	0005883a 	mov	r2,zero
    9298:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    929c:	e0bffb17 	ldw	r2,-20(fp)
    92a0:	10002126 	beq	r2,zero,9328 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    92a4:	e0bffb17 	ldw	r2,-20(fp)
    92a8:	10800217 	ldw	r2,8(r2)
    92ac:	108000cc 	andi	r2,r2,3
    92b0:	10001826 	beq	r2,zero,9314 <write+0xbc>
    92b4:	e0bffb17 	ldw	r2,-20(fp)
    92b8:	10800017 	ldw	r2,0(r2)
    92bc:	10800617 	ldw	r2,24(r2)
    92c0:	10001426 	beq	r2,zero,9314 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    92c4:	e0bffb17 	ldw	r2,-20(fp)
    92c8:	10800017 	ldw	r2,0(r2)
    92cc:	10800617 	ldw	r2,24(r2)
    92d0:	e0ffff17 	ldw	r3,-4(fp)
    92d4:	180d883a 	mov	r6,r3
    92d8:	e17ffe17 	ldw	r5,-8(fp)
    92dc:	e13ffb17 	ldw	r4,-20(fp)
    92e0:	103ee83a 	callr	r2
    92e4:	e0bffc15 	stw	r2,-16(fp)
    92e8:	e0bffc17 	ldw	r2,-16(fp)
    92ec:	1000070e 	bge	r2,zero,930c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    92f0:	000921c0 	call	921c <alt_get_errno>
    92f4:	1007883a 	mov	r3,r2
    92f8:	e0bffc17 	ldw	r2,-16(fp)
    92fc:	0085c83a 	sub	r2,zero,r2
    9300:	18800015 	stw	r2,0(r3)
        return -1;
    9304:	00bfffc4 	movi	r2,-1
    9308:	00000c06 	br	933c <write+0xe4>
      }
      return rval;
    930c:	e0bffc17 	ldw	r2,-16(fp)
    9310:	00000a06 	br	933c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9314:	000921c0 	call	921c <alt_get_errno>
    9318:	1007883a 	mov	r3,r2
    931c:	00800344 	movi	r2,13
    9320:	18800015 	stw	r2,0(r3)
    9324:	00000406 	br	9338 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9328:	000921c0 	call	921c <alt_get_errno>
    932c:	1007883a 	mov	r3,r2
    9330:	00801444 	movi	r2,81
    9334:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9338:	00bfffc4 	movi	r2,-1
}
    933c:	e037883a 	mov	sp,fp
    9340:	dfc00117 	ldw	ra,4(sp)
    9344:	df000017 	ldw	fp,0(sp)
    9348:	dec00204 	addi	sp,sp,8
    934c:	f800283a 	ret

00009350 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9350:	defffd04 	addi	sp,sp,-12
    9354:	dfc00215 	stw	ra,8(sp)
    9358:	df000115 	stw	fp,4(sp)
    935c:	df000104 	addi	fp,sp,4
    9360:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9364:	d1600404 	addi	r5,gp,-32752
    9368:	e13fff17 	ldw	r4,-4(fp)
    936c:	0009a540 	call	9a54 <alt_dev_llist_insert>
}
    9370:	e037883a 	mov	sp,fp
    9374:	dfc00117 	ldw	ra,4(sp)
    9378:	df000017 	ldw	fp,0(sp)
    937c:	dec00204 	addi	sp,sp,8
    9380:	f800283a 	ret

00009384 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9384:	defffd04 	addi	sp,sp,-12
    9388:	dfc00215 	stw	ra,8(sp)
    938c:	df000115 	stw	fp,4(sp)
    9390:	df000104 	addi	fp,sp,4
    9394:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    9398:	000a3680 	call	a368 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    939c:	00800044 	movi	r2,1
    93a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    93a4:	0001883a 	nop
    93a8:	e037883a 	mov	sp,fp
    93ac:	dfc00117 	ldw	ra,4(sp)
    93b0:	df000017 	ldw	fp,0(sp)
    93b4:	dec00204 	addi	sp,sp,8
    93b8:	f800283a 	ret

000093bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    93bc:	defffe04 	addi	sp,sp,-8
    93c0:	dfc00115 	stw	ra,4(sp)
    93c4:	df000015 	stw	fp,0(sp)
    93c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    93cc:	01c0fa04 	movi	r7,1000
    93d0:	01800044 	movi	r6,1
    93d4:	000b883a 	mov	r5,zero
    93d8:	01000074 	movhi	r4,1
    93dc:	21040004 	addi	r4,r4,4096
    93e0:	00096c40 	call	96c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    93e4:	01000074 	movhi	r4,1
    93e8:	212ac004 	addi	r4,r4,-21760
    93ec:	00093500 	call	9350 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    93f0:	0001883a 	nop
}
    93f4:	0001883a 	nop
    93f8:	e037883a 	mov	sp,fp
    93fc:	dfc00117 	ldw	ra,4(sp)
    9400:	df000017 	ldw	fp,0(sp)
    9404:	dec00204 	addi	sp,sp,8
    9408:	f800283a 	ret

0000940c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    940c:	defffa04 	addi	sp,sp,-24
    9410:	dfc00515 	stw	ra,20(sp)
    9414:	df000415 	stw	fp,16(sp)
    9418:	df000404 	addi	fp,sp,16
    941c:	e13ffd15 	stw	r4,-12(fp)
    9420:	e17ffe15 	stw	r5,-8(fp)
    9424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9428:	e0bffd17 	ldw	r2,-12(fp)
    942c:	10800017 	ldw	r2,0(r2)
    9430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9434:	e0bffc17 	ldw	r2,-16(fp)
    9438:	10c00a04 	addi	r3,r2,40
    943c:	e0bffd17 	ldw	r2,-12(fp)
    9440:	10800217 	ldw	r2,8(r2)
    9444:	100f883a 	mov	r7,r2
    9448:	e1bfff17 	ldw	r6,-4(fp)
    944c:	e17ffe17 	ldw	r5,-8(fp)
    9450:	1809883a 	mov	r4,r3
    9454:	00094cc0 	call	94cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9458:	e037883a 	mov	sp,fp
    945c:	dfc00117 	ldw	ra,4(sp)
    9460:	df000017 	ldw	fp,0(sp)
    9464:	dec00204 	addi	sp,sp,8
    9468:	f800283a 	ret

0000946c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    946c:	defffa04 	addi	sp,sp,-24
    9470:	dfc00515 	stw	ra,20(sp)
    9474:	df000415 	stw	fp,16(sp)
    9478:	df000404 	addi	fp,sp,16
    947c:	e13ffd15 	stw	r4,-12(fp)
    9480:	e17ffe15 	stw	r5,-8(fp)
    9484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9488:	e0bffd17 	ldw	r2,-12(fp)
    948c:	10800017 	ldw	r2,0(r2)
    9490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9494:	e0bffc17 	ldw	r2,-16(fp)
    9498:	10c00a04 	addi	r3,r2,40
    949c:	e0bffd17 	ldw	r2,-12(fp)
    94a0:	10800217 	ldw	r2,8(r2)
    94a4:	100f883a 	mov	r7,r2
    94a8:	e1bfff17 	ldw	r6,-4(fp)
    94ac:	e17ffe17 	ldw	r5,-8(fp)
    94b0:	1809883a 	mov	r4,r3
    94b4:	00095b80 	call	95b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    94b8:	e037883a 	mov	sp,fp
    94bc:	dfc00117 	ldw	ra,4(sp)
    94c0:	df000017 	ldw	fp,0(sp)
    94c4:	dec00204 	addi	sp,sp,8
    94c8:	f800283a 	ret

000094cc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    94cc:	defff704 	addi	sp,sp,-36
    94d0:	df000815 	stw	fp,32(sp)
    94d4:	df000804 	addi	fp,sp,32
    94d8:	e13ffc15 	stw	r4,-16(fp)
    94dc:	e17ffd15 	stw	r5,-12(fp)
    94e0:	e1bffe15 	stw	r6,-8(fp)
    94e4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    94e8:	e0bffc17 	ldw	r2,-16(fp)
    94ec:	10800017 	ldw	r2,0(r2)
    94f0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    94f4:	e0bffd17 	ldw	r2,-12(fp)
    94f8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    94fc:	e0bffe17 	ldw	r2,-8(fp)
    9500:	e0fffd17 	ldw	r3,-12(fp)
    9504:	1885883a 	add	r2,r3,r2
    9508:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    950c:	00001206 	br	9558 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9510:	e0bff917 	ldw	r2,-28(fp)
    9514:	10800037 	ldwio	r2,0(r2)
    9518:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    951c:	e0bffb17 	ldw	r2,-20(fp)
    9520:	10a0000c 	andi	r2,r2,32768
    9524:	10000626 	beq	r2,zero,9540 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9528:	e0bff817 	ldw	r2,-32(fp)
    952c:	10c00044 	addi	r3,r2,1
    9530:	e0fff815 	stw	r3,-32(fp)
    9534:	e0fffb17 	ldw	r3,-20(fp)
    9538:	10c00005 	stb	r3,0(r2)
    953c:	00000606 	br	9558 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9540:	e0fff817 	ldw	r3,-32(fp)
    9544:	e0bffd17 	ldw	r2,-12(fp)
    9548:	1880071e 	bne	r3,r2,9568 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    954c:	e0bfff17 	ldw	r2,-4(fp)
    9550:	1090000c 	andi	r2,r2,16384
    9554:	1000061e 	bne	r2,zero,9570 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9558:	e0fff817 	ldw	r3,-32(fp)
    955c:	e0bffa17 	ldw	r2,-24(fp)
    9560:	18bfeb36 	bltu	r3,r2,9510 <_gp+0xffff683c>
    9564:	00000306 	br	9574 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9568:	0001883a 	nop
    956c:	00000106 	br	9574 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9570:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9574:	e0fff817 	ldw	r3,-32(fp)
    9578:	e0bffd17 	ldw	r2,-12(fp)
    957c:	18800426 	beq	r3,r2,9590 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9580:	e0fff817 	ldw	r3,-32(fp)
    9584:	e0bffd17 	ldw	r2,-12(fp)
    9588:	1885c83a 	sub	r2,r3,r2
    958c:	00000606 	br	95a8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9590:	e0bfff17 	ldw	r2,-4(fp)
    9594:	1090000c 	andi	r2,r2,16384
    9598:	10000226 	beq	r2,zero,95a4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    959c:	00bffd44 	movi	r2,-11
    95a0:	00000106 	br	95a8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    95a4:	00bffec4 	movi	r2,-5
}
    95a8:	e037883a 	mov	sp,fp
    95ac:	df000017 	ldw	fp,0(sp)
    95b0:	dec00104 	addi	sp,sp,4
    95b4:	f800283a 	ret

000095b8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    95b8:	defff904 	addi	sp,sp,-28
    95bc:	df000615 	stw	fp,24(sp)
    95c0:	df000604 	addi	fp,sp,24
    95c4:	e13ffc15 	stw	r4,-16(fp)
    95c8:	e17ffd15 	stw	r5,-12(fp)
    95cc:	e1bffe15 	stw	r6,-8(fp)
    95d0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    95d4:	e0bffc17 	ldw	r2,-16(fp)
    95d8:	10800017 	ldw	r2,0(r2)
    95dc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    95e0:	e0bffe17 	ldw	r2,-8(fp)
    95e4:	e0fffd17 	ldw	r3,-12(fp)
    95e8:	1885883a 	add	r2,r3,r2
    95ec:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    95f0:	00000e06 	br	962c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    95f4:	e0bffa17 	ldw	r2,-24(fp)
    95f8:	10800104 	addi	r2,r2,4
    95fc:	10800037 	ldwio	r2,0(r2)
    9600:	10bfffec 	andhi	r2,r2,65535
    9604:	10000926 	beq	r2,zero,962c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9608:	e0fffa17 	ldw	r3,-24(fp)
    960c:	e0bffd17 	ldw	r2,-12(fp)
    9610:	11000044 	addi	r4,r2,1
    9614:	e13ffd15 	stw	r4,-12(fp)
    9618:	10800003 	ldbu	r2,0(r2)
    961c:	10803fcc 	andi	r2,r2,255
    9620:	1080201c 	xori	r2,r2,128
    9624:	10bfe004 	addi	r2,r2,-128
    9628:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    962c:	e0fffd17 	ldw	r3,-12(fp)
    9630:	e0bffb17 	ldw	r2,-20(fp)
    9634:	18bfef36 	bltu	r3,r2,95f4 <_gp+0xffff6920>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9638:	e0bffe17 	ldw	r2,-8(fp)
}
    963c:	e037883a 	mov	sp,fp
    9640:	df000017 	ldw	fp,0(sp)
    9644:	dec00104 	addi	sp,sp,4
    9648:	f800283a 	ret

0000964c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    964c:	defffa04 	addi	sp,sp,-24
    9650:	dfc00515 	stw	ra,20(sp)
    9654:	df000415 	stw	fp,16(sp)
    9658:	df000404 	addi	fp,sp,16
    965c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9660:	0007883a 	mov	r3,zero
    9664:	e0bfff17 	ldw	r2,-4(fp)
    9668:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    966c:	e0bfff17 	ldw	r2,-4(fp)
    9670:	10800104 	addi	r2,r2,4
    9674:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9678:	0005303a 	rdctl	r2,status
    967c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9680:	e0fffd17 	ldw	r3,-12(fp)
    9684:	00bfff84 	movi	r2,-2
    9688:	1884703a 	and	r2,r3,r2
    968c:	1001703a 	wrctl	status,r2
  
  return context;
    9690:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9694:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9698:	000a2600 	call	a260 <alt_tick>
    969c:	e0bffc17 	ldw	r2,-16(fp)
    96a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96a4:	e0bffe17 	ldw	r2,-8(fp)
    96a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    96ac:	0001883a 	nop
    96b0:	e037883a 	mov	sp,fp
    96b4:	dfc00117 	ldw	ra,4(sp)
    96b8:	df000017 	ldw	fp,0(sp)
    96bc:	dec00204 	addi	sp,sp,8
    96c0:	f800283a 	ret

000096c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    96c4:	defff804 	addi	sp,sp,-32
    96c8:	dfc00715 	stw	ra,28(sp)
    96cc:	df000615 	stw	fp,24(sp)
    96d0:	df000604 	addi	fp,sp,24
    96d4:	e13ffc15 	stw	r4,-16(fp)
    96d8:	e17ffd15 	stw	r5,-12(fp)
    96dc:	e1bffe15 	stw	r6,-8(fp)
    96e0:	e1ffff15 	stw	r7,-4(fp)
    96e4:	e0bfff17 	ldw	r2,-4(fp)
    96e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    96ec:	d0a0ca17 	ldw	r2,-31960(gp)
    96f0:	1000021e 	bne	r2,zero,96fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    96f4:	e0bffb17 	ldw	r2,-20(fp)
    96f8:	d0a0ca15 	stw	r2,-31960(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    96fc:	e0bffc17 	ldw	r2,-16(fp)
    9700:	10800104 	addi	r2,r2,4
    9704:	00c001c4 	movi	r3,7
    9708:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    970c:	d8000015 	stw	zero,0(sp)
    9710:	e1fffc17 	ldw	r7,-16(fp)
    9714:	01800074 	movhi	r6,1
    9718:	31a59304 	addi	r6,r6,-27060
    971c:	e17ffe17 	ldw	r5,-8(fp)
    9720:	e13ffd17 	ldw	r4,-12(fp)
    9724:	0009b2c0 	call	9b2c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9728:	0001883a 	nop
    972c:	e037883a 	mov	sp,fp
    9730:	dfc00117 	ldw	ra,4(sp)
    9734:	df000017 	ldw	fp,0(sp)
    9738:	dec00204 	addi	sp,sp,8
    973c:	f800283a 	ret

00009740 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9740:	defffa04 	addi	sp,sp,-24
    9744:	dfc00515 	stw	ra,20(sp)
    9748:	df000415 	stw	fp,16(sp)
    974c:	df000404 	addi	fp,sp,16
    9750:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    9754:	008000c4 	movi	r2,3
    9758:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    975c:	e0fffd17 	ldw	r3,-12(fp)
    9760:	008003f4 	movhi	r2,15
    9764:	10909004 	addi	r2,r2,16960
    9768:	1885383a 	mul	r2,r3,r2
    976c:	100b883a 	mov	r5,r2
    9770:	0100bef4 	movhi	r4,763
    9774:	213c2004 	addi	r4,r4,-3968
    9778:	00087140 	call	8714 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    977c:	100b883a 	mov	r5,r2
    9780:	01200034 	movhi	r4,32768
    9784:	213fffc4 	addi	r4,r4,-1
    9788:	00087140 	call	8714 <__udivsi3>
    978c:	100b883a 	mov	r5,r2
    9790:	e13fff17 	ldw	r4,-4(fp)
    9794:	00087140 	call	8714 <__udivsi3>
    9798:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    979c:	e0bffe17 	ldw	r2,-8(fp)
    97a0:	10002a26 	beq	r2,zero,984c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    97a4:	e03ffc15 	stw	zero,-16(fp)
    97a8:	00001706 	br	9808 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    97ac:	00a00034 	movhi	r2,32768
    97b0:	10bfffc4 	addi	r2,r2,-1
    97b4:	10bfffc4 	addi	r2,r2,-1
    97b8:	103ffe1e 	bne	r2,zero,97b4 <_gp+0xffff6ae0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    97bc:	e0fffd17 	ldw	r3,-12(fp)
    97c0:	008003f4 	movhi	r2,15
    97c4:	10909004 	addi	r2,r2,16960
    97c8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    97cc:	100b883a 	mov	r5,r2
    97d0:	0100bef4 	movhi	r4,763
    97d4:	213c2004 	addi	r4,r4,-3968
    97d8:	00087140 	call	8714 <__udivsi3>
    97dc:	100b883a 	mov	r5,r2
    97e0:	01200034 	movhi	r4,32768
    97e4:	213fffc4 	addi	r4,r4,-1
    97e8:	00087140 	call	8714 <__udivsi3>
    97ec:	1007883a 	mov	r3,r2
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	10c5c83a 	sub	r2,r2,r3
    97f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    97fc:	e0bffc17 	ldw	r2,-16(fp)
    9800:	10800044 	addi	r2,r2,1
    9804:	e0bffc15 	stw	r2,-16(fp)
    9808:	e0fffc17 	ldw	r3,-16(fp)
    980c:	e0bffe17 	ldw	r2,-8(fp)
    9810:	18bfe616 	blt	r3,r2,97ac <_gp+0xffff6ad8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9814:	e0fffd17 	ldw	r3,-12(fp)
    9818:	008003f4 	movhi	r2,15
    981c:	10909004 	addi	r2,r2,16960
    9820:	1885383a 	mul	r2,r3,r2
    9824:	100b883a 	mov	r5,r2
    9828:	0100bef4 	movhi	r4,763
    982c:	213c2004 	addi	r4,r4,-3968
    9830:	00087140 	call	8714 <__udivsi3>
    9834:	1007883a 	mov	r3,r2
    9838:	e0bfff17 	ldw	r2,-4(fp)
    983c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9840:	10bfffc4 	addi	r2,r2,-1
    9844:	103ffe1e 	bne	r2,zero,9840 <_gp+0xffff6b6c>
    9848:	00000d06 	br	9880 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    984c:	e0fffd17 	ldw	r3,-12(fp)
    9850:	008003f4 	movhi	r2,15
    9854:	10909004 	addi	r2,r2,16960
    9858:	1885383a 	mul	r2,r3,r2
    985c:	100b883a 	mov	r5,r2
    9860:	0100bef4 	movhi	r4,763
    9864:	213c2004 	addi	r4,r4,-3968
    9868:	00087140 	call	8714 <__udivsi3>
    986c:	1007883a 	mov	r3,r2
    9870:	e0bfff17 	ldw	r2,-4(fp)
    9874:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9878:	10bfffc4 	addi	r2,r2,-1
    987c:	00bffe16 	blt	zero,r2,9878 <_gp+0xffff6ba4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9880:	0005883a 	mov	r2,zero
}
    9884:	e037883a 	mov	sp,fp
    9888:	dfc00117 	ldw	ra,4(sp)
    988c:	df000017 	ldw	fp,0(sp)
    9890:	dec00204 	addi	sp,sp,8
    9894:	f800283a 	ret

00009898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9898:	defffe04 	addi	sp,sp,-8
    989c:	dfc00115 	stw	ra,4(sp)
    98a0:	df000015 	stw	fp,0(sp)
    98a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    98a8:	d0a00717 	ldw	r2,-32740(gp)
    98ac:	10000326 	beq	r2,zero,98bc <alt_get_errno+0x24>
    98b0:	d0a00717 	ldw	r2,-32740(gp)
    98b4:	103ee83a 	callr	r2
    98b8:	00000106 	br	98c0 <alt_get_errno+0x28>
    98bc:	d0a0c504 	addi	r2,gp,-31980
}
    98c0:	e037883a 	mov	sp,fp
    98c4:	dfc00117 	ldw	ra,4(sp)
    98c8:	df000017 	ldw	fp,0(sp)
    98cc:	dec00204 	addi	sp,sp,8
    98d0:	f800283a 	ret

000098d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    98d4:	defffb04 	addi	sp,sp,-20
    98d8:	dfc00415 	stw	ra,16(sp)
    98dc:	df000315 	stw	fp,12(sp)
    98e0:	df000304 	addi	fp,sp,12
    98e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    98e8:	e0bfff17 	ldw	r2,-4(fp)
    98ec:	10000616 	blt	r2,zero,9908 <close+0x34>
    98f0:	e0bfff17 	ldw	r2,-4(fp)
    98f4:	10c00324 	muli	r3,r2,12
    98f8:	00800074 	movhi	r2,1
    98fc:	10aad504 	addi	r2,r2,-21676
    9900:	1885883a 	add	r2,r3,r2
    9904:	00000106 	br	990c <close+0x38>
    9908:	0005883a 	mov	r2,zero
    990c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9910:	e0bffd17 	ldw	r2,-12(fp)
    9914:	10001926 	beq	r2,zero,997c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9918:	e0bffd17 	ldw	r2,-12(fp)
    991c:	10800017 	ldw	r2,0(r2)
    9920:	10800417 	ldw	r2,16(r2)
    9924:	10000626 	beq	r2,zero,9940 <close+0x6c>
    9928:	e0bffd17 	ldw	r2,-12(fp)
    992c:	10800017 	ldw	r2,0(r2)
    9930:	10800417 	ldw	r2,16(r2)
    9934:	e13ffd17 	ldw	r4,-12(fp)
    9938:	103ee83a 	callr	r2
    993c:	00000106 	br	9944 <close+0x70>
    9940:	0005883a 	mov	r2,zero
    9944:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9948:	e13fff17 	ldw	r4,-4(fp)
    994c:	000a1600 	call	a160 <alt_release_fd>
    if (rval < 0)
    9950:	e0bffe17 	ldw	r2,-8(fp)
    9954:	1000070e 	bge	r2,zero,9974 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    9958:	00098980 	call	9898 <alt_get_errno>
    995c:	1007883a 	mov	r3,r2
    9960:	e0bffe17 	ldw	r2,-8(fp)
    9964:	0085c83a 	sub	r2,zero,r2
    9968:	18800015 	stw	r2,0(r3)
      return -1;
    996c:	00bfffc4 	movi	r2,-1
    9970:	00000706 	br	9990 <close+0xbc>
    }
    return 0;
    9974:	0005883a 	mov	r2,zero
    9978:	00000506 	br	9990 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    997c:	00098980 	call	9898 <alt_get_errno>
    9980:	1007883a 	mov	r3,r2
    9984:	00801444 	movi	r2,81
    9988:	18800015 	stw	r2,0(r3)
    return -1;
    998c:	00bfffc4 	movi	r2,-1
  }
}
    9990:	e037883a 	mov	sp,fp
    9994:	dfc00117 	ldw	ra,4(sp)
    9998:	df000017 	ldw	fp,0(sp)
    999c:	dec00204 	addi	sp,sp,8
    99a0:	f800283a 	ret

000099a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    99a4:	defffe04 	addi	sp,sp,-8
    99a8:	df000115 	stw	fp,4(sp)
    99ac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    99b0:	e03fff15 	stw	zero,-4(fp)
    99b4:	00000506 	br	99cc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    99b8:	e0bfff17 	ldw	r2,-4(fp)
    99bc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    99c0:	e0bfff17 	ldw	r2,-4(fp)
    99c4:	10800804 	addi	r2,r2,32
    99c8:	e0bfff15 	stw	r2,-4(fp)
    99cc:	e0bfff17 	ldw	r2,-4(fp)
    99d0:	10820030 	cmpltui	r2,r2,2048
    99d4:	103ff81e 	bne	r2,zero,99b8 <_gp+0xffff6ce4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    99d8:	0001883a 	nop
    99dc:	e037883a 	mov	sp,fp
    99e0:	df000017 	ldw	fp,0(sp)
    99e4:	dec00104 	addi	sp,sp,4
    99e8:	f800283a 	ret

000099ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    99ec:	defffc04 	addi	sp,sp,-16
    99f0:	df000315 	stw	fp,12(sp)
    99f4:	df000304 	addi	fp,sp,12
    99f8:	e13ffd15 	stw	r4,-12(fp)
    99fc:	e17ffe15 	stw	r5,-8(fp)
    9a00:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9a04:	e0bfff17 	ldw	r2,-4(fp)
}
    9a08:	e037883a 	mov	sp,fp
    9a0c:	df000017 	ldw	fp,0(sp)
    9a10:	dec00104 	addi	sp,sp,4
    9a14:	f800283a 	ret

00009a18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9a18:	defffe04 	addi	sp,sp,-8
    9a1c:	dfc00115 	stw	ra,4(sp)
    9a20:	df000015 	stw	fp,0(sp)
    9a24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9a28:	d0a00717 	ldw	r2,-32740(gp)
    9a2c:	10000326 	beq	r2,zero,9a3c <alt_get_errno+0x24>
    9a30:	d0a00717 	ldw	r2,-32740(gp)
    9a34:	103ee83a 	callr	r2
    9a38:	00000106 	br	9a40 <alt_get_errno+0x28>
    9a3c:	d0a0c504 	addi	r2,gp,-31980
}
    9a40:	e037883a 	mov	sp,fp
    9a44:	dfc00117 	ldw	ra,4(sp)
    9a48:	df000017 	ldw	fp,0(sp)
    9a4c:	dec00204 	addi	sp,sp,8
    9a50:	f800283a 	ret

00009a54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9a54:	defffa04 	addi	sp,sp,-24
    9a58:	dfc00515 	stw	ra,20(sp)
    9a5c:	df000415 	stw	fp,16(sp)
    9a60:	df000404 	addi	fp,sp,16
    9a64:	e13ffe15 	stw	r4,-8(fp)
    9a68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9a6c:	e0bffe17 	ldw	r2,-8(fp)
    9a70:	10000326 	beq	r2,zero,9a80 <alt_dev_llist_insert+0x2c>
    9a74:	e0bffe17 	ldw	r2,-8(fp)
    9a78:	10800217 	ldw	r2,8(r2)
    9a7c:	1000061e 	bne	r2,zero,9a98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9a80:	0009a180 	call	9a18 <alt_get_errno>
    9a84:	1007883a 	mov	r3,r2
    9a88:	00800584 	movi	r2,22
    9a8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9a90:	00bffa84 	movi	r2,-22
    9a94:	00001306 	br	9ae4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9a98:	e0bffe17 	ldw	r2,-8(fp)
    9a9c:	e0ffff17 	ldw	r3,-4(fp)
    9aa0:	e0fffc15 	stw	r3,-16(fp)
    9aa4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9aa8:	e0bffd17 	ldw	r2,-12(fp)
    9aac:	e0fffc17 	ldw	r3,-16(fp)
    9ab0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9ab4:	e0bffc17 	ldw	r2,-16(fp)
    9ab8:	10c00017 	ldw	r3,0(r2)
    9abc:	e0bffd17 	ldw	r2,-12(fp)
    9ac0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9ac4:	e0bffc17 	ldw	r2,-16(fp)
    9ac8:	10800017 	ldw	r2,0(r2)
    9acc:	e0fffd17 	ldw	r3,-12(fp)
    9ad0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9ad4:	e0bffc17 	ldw	r2,-16(fp)
    9ad8:	e0fffd17 	ldw	r3,-12(fp)
    9adc:	10c00015 	stw	r3,0(r2)

  return 0;  
    9ae0:	0005883a 	mov	r2,zero
}
    9ae4:	e037883a 	mov	sp,fp
    9ae8:	dfc00117 	ldw	ra,4(sp)
    9aec:	df000017 	ldw	fp,0(sp)
    9af0:	dec00204 	addi	sp,sp,8
    9af4:	f800283a 	ret

00009af8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9af8:	defffe04 	addi	sp,sp,-8
    9afc:	dfc00115 	stw	ra,4(sp)
    9b00:	df000015 	stw	fp,0(sp)
    9b04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9b08:	01420004 	movi	r5,2048
    9b0c:	0009883a 	mov	r4,zero
    9b10:	000a5c80 	call	a5c8 <alt_icache_flush>
#endif
}
    9b14:	0001883a 	nop
    9b18:	e037883a 	mov	sp,fp
    9b1c:	dfc00117 	ldw	ra,4(sp)
    9b20:	df000017 	ldw	fp,0(sp)
    9b24:	dec00204 	addi	sp,sp,8
    9b28:	f800283a 	ret

00009b2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9b2c:	defff904 	addi	sp,sp,-28
    9b30:	dfc00615 	stw	ra,24(sp)
    9b34:	df000515 	stw	fp,20(sp)
    9b38:	df000504 	addi	fp,sp,20
    9b3c:	e13ffc15 	stw	r4,-16(fp)
    9b40:	e17ffd15 	stw	r5,-12(fp)
    9b44:	e1bffe15 	stw	r6,-8(fp)
    9b48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9b4c:	e0800217 	ldw	r2,8(fp)
    9b50:	d8800015 	stw	r2,0(sp)
    9b54:	e1ffff17 	ldw	r7,-4(fp)
    9b58:	e1bffe17 	ldw	r6,-8(fp)
    9b5c:	e17ffd17 	ldw	r5,-12(fp)
    9b60:	e13ffc17 	ldw	r4,-16(fp)
    9b64:	0009cdc0 	call	9cdc <alt_iic_isr_register>
}  
    9b68:	e037883a 	mov	sp,fp
    9b6c:	dfc00117 	ldw	ra,4(sp)
    9b70:	df000017 	ldw	fp,0(sp)
    9b74:	dec00204 	addi	sp,sp,8
    9b78:	f800283a 	ret

00009b7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9b7c:	defff904 	addi	sp,sp,-28
    9b80:	df000615 	stw	fp,24(sp)
    9b84:	df000604 	addi	fp,sp,24
    9b88:	e13ffe15 	stw	r4,-8(fp)
    9b8c:	e17fff15 	stw	r5,-4(fp)
    9b90:	e0bfff17 	ldw	r2,-4(fp)
    9b94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b98:	0005303a 	rdctl	r2,status
    9b9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ba0:	e0fffb17 	ldw	r3,-20(fp)
    9ba4:	00bfff84 	movi	r2,-2
    9ba8:	1884703a 	and	r2,r3,r2
    9bac:	1001703a 	wrctl	status,r2
  
  return context;
    9bb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9bb4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9bb8:	00c00044 	movi	r3,1
    9bbc:	e0bffa17 	ldw	r2,-24(fp)
    9bc0:	1884983a 	sll	r2,r3,r2
    9bc4:	1007883a 	mov	r3,r2
    9bc8:	d0a0c917 	ldw	r2,-31964(gp)
    9bcc:	1884b03a 	or	r2,r3,r2
    9bd0:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9bd4:	d0a0c917 	ldw	r2,-31964(gp)
    9bd8:	100170fa 	wrctl	ienable,r2
    9bdc:	e0bffc17 	ldw	r2,-16(fp)
    9be0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9be4:	e0bffd17 	ldw	r2,-12(fp)
    9be8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9bec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9bf0:	0001883a 	nop
}
    9bf4:	e037883a 	mov	sp,fp
    9bf8:	df000017 	ldw	fp,0(sp)
    9bfc:	dec00104 	addi	sp,sp,4
    9c00:	f800283a 	ret

00009c04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9c04:	defff904 	addi	sp,sp,-28
    9c08:	df000615 	stw	fp,24(sp)
    9c0c:	df000604 	addi	fp,sp,24
    9c10:	e13ffe15 	stw	r4,-8(fp)
    9c14:	e17fff15 	stw	r5,-4(fp)
    9c18:	e0bfff17 	ldw	r2,-4(fp)
    9c1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c20:	0005303a 	rdctl	r2,status
    9c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c28:	e0fffb17 	ldw	r3,-20(fp)
    9c2c:	00bfff84 	movi	r2,-2
    9c30:	1884703a 	and	r2,r3,r2
    9c34:	1001703a 	wrctl	status,r2
  
  return context;
    9c38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9c3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9c40:	00c00044 	movi	r3,1
    9c44:	e0bffa17 	ldw	r2,-24(fp)
    9c48:	1884983a 	sll	r2,r3,r2
    9c4c:	0084303a 	nor	r2,zero,r2
    9c50:	1007883a 	mov	r3,r2
    9c54:	d0a0c917 	ldw	r2,-31964(gp)
    9c58:	1884703a 	and	r2,r3,r2
    9c5c:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9c60:	d0a0c917 	ldw	r2,-31964(gp)
    9c64:	100170fa 	wrctl	ienable,r2
    9c68:	e0bffc17 	ldw	r2,-16(fp)
    9c6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c70:	e0bffd17 	ldw	r2,-12(fp)
    9c74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9c78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9c7c:	0001883a 	nop
}
    9c80:	e037883a 	mov	sp,fp
    9c84:	df000017 	ldw	fp,0(sp)
    9c88:	dec00104 	addi	sp,sp,4
    9c8c:	f800283a 	ret

00009c90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9c90:	defffc04 	addi	sp,sp,-16
    9c94:	df000315 	stw	fp,12(sp)
    9c98:	df000304 	addi	fp,sp,12
    9c9c:	e13ffe15 	stw	r4,-8(fp)
    9ca0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9ca4:	000530fa 	rdctl	r2,ienable
    9ca8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9cac:	00c00044 	movi	r3,1
    9cb0:	e0bfff17 	ldw	r2,-4(fp)
    9cb4:	1884983a 	sll	r2,r3,r2
    9cb8:	1007883a 	mov	r3,r2
    9cbc:	e0bffd17 	ldw	r2,-12(fp)
    9cc0:	1884703a 	and	r2,r3,r2
    9cc4:	1004c03a 	cmpne	r2,r2,zero
    9cc8:	10803fcc 	andi	r2,r2,255
}
    9ccc:	e037883a 	mov	sp,fp
    9cd0:	df000017 	ldw	fp,0(sp)
    9cd4:	dec00104 	addi	sp,sp,4
    9cd8:	f800283a 	ret

00009cdc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9cdc:	defff504 	addi	sp,sp,-44
    9ce0:	dfc00a15 	stw	ra,40(sp)
    9ce4:	df000915 	stw	fp,36(sp)
    9ce8:	df000904 	addi	fp,sp,36
    9cec:	e13ffc15 	stw	r4,-16(fp)
    9cf0:	e17ffd15 	stw	r5,-12(fp)
    9cf4:	e1bffe15 	stw	r6,-8(fp)
    9cf8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9cfc:	00bffa84 	movi	r2,-22
    9d00:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9d04:	e0bffd17 	ldw	r2,-12(fp)
    9d08:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9d0c:	e0bff817 	ldw	r2,-32(fp)
    9d10:	10800808 	cmpgei	r2,r2,32
    9d14:	1000271e 	bne	r2,zero,9db4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d18:	0005303a 	rdctl	r2,status
    9d1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d20:	e0fffb17 	ldw	r3,-20(fp)
    9d24:	00bfff84 	movi	r2,-2
    9d28:	1884703a 	and	r2,r3,r2
    9d2c:	1001703a 	wrctl	status,r2
  
  return context;
    9d30:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9d34:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9d38:	00800074 	movhi	r2,1
    9d3c:	10ac0204 	addi	r2,r2,-20472
    9d40:	e0fff817 	ldw	r3,-32(fp)
    9d44:	180690fa 	slli	r3,r3,3
    9d48:	10c5883a 	add	r2,r2,r3
    9d4c:	e0fffe17 	ldw	r3,-8(fp)
    9d50:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9d54:	00800074 	movhi	r2,1
    9d58:	10ac0204 	addi	r2,r2,-20472
    9d5c:	e0fff817 	ldw	r3,-32(fp)
    9d60:	180690fa 	slli	r3,r3,3
    9d64:	10c5883a 	add	r2,r2,r3
    9d68:	10800104 	addi	r2,r2,4
    9d6c:	e0ffff17 	ldw	r3,-4(fp)
    9d70:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9d74:	e0bffe17 	ldw	r2,-8(fp)
    9d78:	10000526 	beq	r2,zero,9d90 <alt_iic_isr_register+0xb4>
    9d7c:	e0bff817 	ldw	r2,-32(fp)
    9d80:	100b883a 	mov	r5,r2
    9d84:	e13ffc17 	ldw	r4,-16(fp)
    9d88:	0009b7c0 	call	9b7c <alt_ic_irq_enable>
    9d8c:	00000406 	br	9da0 <alt_iic_isr_register+0xc4>
    9d90:	e0bff817 	ldw	r2,-32(fp)
    9d94:	100b883a 	mov	r5,r2
    9d98:	e13ffc17 	ldw	r4,-16(fp)
    9d9c:	0009c040 	call	9c04 <alt_ic_irq_disable>
    9da0:	e0bff715 	stw	r2,-36(fp)
    9da4:	e0bffa17 	ldw	r2,-24(fp)
    9da8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9dac:	e0bff917 	ldw	r2,-28(fp)
    9db0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9db4:	e0bff717 	ldw	r2,-36(fp)
}
    9db8:	e037883a 	mov	sp,fp
    9dbc:	dfc00117 	ldw	ra,4(sp)
    9dc0:	df000017 	ldw	fp,0(sp)
    9dc4:	dec00204 	addi	sp,sp,8
    9dc8:	f800283a 	ret

00009dcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9dcc:	defff904 	addi	sp,sp,-28
    9dd0:	dfc00615 	stw	ra,24(sp)
    9dd4:	df000515 	stw	fp,20(sp)
    9dd8:	df000504 	addi	fp,sp,20
    9ddc:	e13ffc15 	stw	r4,-16(fp)
    9de0:	e17ffd15 	stw	r5,-12(fp)
    9de4:	e1bffe15 	stw	r6,-8(fp)
    9de8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9dec:	e1bfff17 	ldw	r6,-4(fp)
    9df0:	e17ffe17 	ldw	r5,-8(fp)
    9df4:	e13ffd17 	ldw	r4,-12(fp)
    9df8:	000a00c0 	call	a00c <open>
    9dfc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9e00:	e0bffb17 	ldw	r2,-20(fp)
    9e04:	10001c16 	blt	r2,zero,9e78 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    9e08:	00800074 	movhi	r2,1
    9e0c:	10aad504 	addi	r2,r2,-21676
    9e10:	e0fffb17 	ldw	r3,-20(fp)
    9e14:	18c00324 	muli	r3,r3,12
    9e18:	10c5883a 	add	r2,r2,r3
    9e1c:	10c00017 	ldw	r3,0(r2)
    9e20:	e0bffc17 	ldw	r2,-16(fp)
    9e24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9e28:	00800074 	movhi	r2,1
    9e2c:	10aad504 	addi	r2,r2,-21676
    9e30:	e0fffb17 	ldw	r3,-20(fp)
    9e34:	18c00324 	muli	r3,r3,12
    9e38:	10c5883a 	add	r2,r2,r3
    9e3c:	10800104 	addi	r2,r2,4
    9e40:	10c00017 	ldw	r3,0(r2)
    9e44:	e0bffc17 	ldw	r2,-16(fp)
    9e48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9e4c:	00800074 	movhi	r2,1
    9e50:	10aad504 	addi	r2,r2,-21676
    9e54:	e0fffb17 	ldw	r3,-20(fp)
    9e58:	18c00324 	muli	r3,r3,12
    9e5c:	10c5883a 	add	r2,r2,r3
    9e60:	10800204 	addi	r2,r2,8
    9e64:	10c00017 	ldw	r3,0(r2)
    9e68:	e0bffc17 	ldw	r2,-16(fp)
    9e6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9e70:	e13ffb17 	ldw	r4,-20(fp)
    9e74:	000a1600 	call	a160 <alt_release_fd>
  }
} 
    9e78:	0001883a 	nop
    9e7c:	e037883a 	mov	sp,fp
    9e80:	dfc00117 	ldw	ra,4(sp)
    9e84:	df000017 	ldw	fp,0(sp)
    9e88:	dec00204 	addi	sp,sp,8
    9e8c:	f800283a 	ret

00009e90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9e90:	defffb04 	addi	sp,sp,-20
    9e94:	dfc00415 	stw	ra,16(sp)
    9e98:	df000315 	stw	fp,12(sp)
    9e9c:	df000304 	addi	fp,sp,12
    9ea0:	e13ffd15 	stw	r4,-12(fp)
    9ea4:	e17ffe15 	stw	r5,-8(fp)
    9ea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9eac:	01c07fc4 	movi	r7,511
    9eb0:	01800044 	movi	r6,1
    9eb4:	e17ffd17 	ldw	r5,-12(fp)
    9eb8:	01000074 	movhi	r4,1
    9ebc:	212ad804 	addi	r4,r4,-21664
    9ec0:	0009dcc0 	call	9dcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ec4:	01c07fc4 	movi	r7,511
    9ec8:	000d883a 	mov	r6,zero
    9ecc:	e17ffe17 	ldw	r5,-8(fp)
    9ed0:	01000074 	movhi	r4,1
    9ed4:	212ad504 	addi	r4,r4,-21676
    9ed8:	0009dcc0 	call	9dcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9edc:	01c07fc4 	movi	r7,511
    9ee0:	01800044 	movi	r6,1
    9ee4:	e17fff17 	ldw	r5,-4(fp)
    9ee8:	01000074 	movhi	r4,1
    9eec:	212adb04 	addi	r4,r4,-21652
    9ef0:	0009dcc0 	call	9dcc <alt_open_fd>
}  
    9ef4:	0001883a 	nop
    9ef8:	e037883a 	mov	sp,fp
    9efc:	dfc00117 	ldw	ra,4(sp)
    9f00:	df000017 	ldw	fp,0(sp)
    9f04:	dec00204 	addi	sp,sp,8
    9f08:	f800283a 	ret

00009f0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f0c:	defffe04 	addi	sp,sp,-8
    9f10:	dfc00115 	stw	ra,4(sp)
    9f14:	df000015 	stw	fp,0(sp)
    9f18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9f1c:	d0a00717 	ldw	r2,-32740(gp)
    9f20:	10000326 	beq	r2,zero,9f30 <alt_get_errno+0x24>
    9f24:	d0a00717 	ldw	r2,-32740(gp)
    9f28:	103ee83a 	callr	r2
    9f2c:	00000106 	br	9f34 <alt_get_errno+0x28>
    9f30:	d0a0c504 	addi	r2,gp,-31980
}
    9f34:	e037883a 	mov	sp,fp
    9f38:	dfc00117 	ldw	ra,4(sp)
    9f3c:	df000017 	ldw	fp,0(sp)
    9f40:	dec00204 	addi	sp,sp,8
    9f44:	f800283a 	ret

00009f48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9f48:	defffd04 	addi	sp,sp,-12
    9f4c:	df000215 	stw	fp,8(sp)
    9f50:	df000204 	addi	fp,sp,8
    9f54:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9f58:	e0bfff17 	ldw	r2,-4(fp)
    9f5c:	10800217 	ldw	r2,8(r2)
    9f60:	10d00034 	orhi	r3,r2,16384
    9f64:	e0bfff17 	ldw	r2,-4(fp)
    9f68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9f6c:	e03ffe15 	stw	zero,-8(fp)
    9f70:	00001d06 	br	9fe8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9f74:	00800074 	movhi	r2,1
    9f78:	10aad504 	addi	r2,r2,-21676
    9f7c:	e0fffe17 	ldw	r3,-8(fp)
    9f80:	18c00324 	muli	r3,r3,12
    9f84:	10c5883a 	add	r2,r2,r3
    9f88:	10c00017 	ldw	r3,0(r2)
    9f8c:	e0bfff17 	ldw	r2,-4(fp)
    9f90:	10800017 	ldw	r2,0(r2)
    9f94:	1880111e 	bne	r3,r2,9fdc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9f98:	00800074 	movhi	r2,1
    9f9c:	10aad504 	addi	r2,r2,-21676
    9fa0:	e0fffe17 	ldw	r3,-8(fp)
    9fa4:	18c00324 	muli	r3,r3,12
    9fa8:	10c5883a 	add	r2,r2,r3
    9fac:	10800204 	addi	r2,r2,8
    9fb0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9fb4:	1000090e 	bge	r2,zero,9fdc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9fb8:	e0bffe17 	ldw	r2,-8(fp)
    9fbc:	10c00324 	muli	r3,r2,12
    9fc0:	00800074 	movhi	r2,1
    9fc4:	10aad504 	addi	r2,r2,-21676
    9fc8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9fcc:	e0bfff17 	ldw	r2,-4(fp)
    9fd0:	18800226 	beq	r3,r2,9fdc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9fd4:	00bffcc4 	movi	r2,-13
    9fd8:	00000806 	br	9ffc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9fdc:	e0bffe17 	ldw	r2,-8(fp)
    9fe0:	10800044 	addi	r2,r2,1
    9fe4:	e0bffe15 	stw	r2,-8(fp)
    9fe8:	d0a00617 	ldw	r2,-32744(gp)
    9fec:	1007883a 	mov	r3,r2
    9ff0:	e0bffe17 	ldw	r2,-8(fp)
    9ff4:	18bfdf2e 	bgeu	r3,r2,9f74 <_gp+0xffff72a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9ff8:	0005883a 	mov	r2,zero
}
    9ffc:	e037883a 	mov	sp,fp
    a000:	df000017 	ldw	fp,0(sp)
    a004:	dec00104 	addi	sp,sp,4
    a008:	f800283a 	ret

0000a00c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a00c:	defff604 	addi	sp,sp,-40
    a010:	dfc00915 	stw	ra,36(sp)
    a014:	df000815 	stw	fp,32(sp)
    a018:	df000804 	addi	fp,sp,32
    a01c:	e13ffd15 	stw	r4,-12(fp)
    a020:	e17ffe15 	stw	r5,-8(fp)
    a024:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a028:	00bfffc4 	movi	r2,-1
    a02c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a030:	00bffb44 	movi	r2,-19
    a034:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a038:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a03c:	d1600404 	addi	r5,gp,-32752
    a040:	e13ffd17 	ldw	r4,-12(fp)
    a044:	000a38c0 	call	a38c <alt_find_dev>
    a048:	e0bff815 	stw	r2,-32(fp)
    a04c:	e0bff817 	ldw	r2,-32(fp)
    a050:	1000051e 	bne	r2,zero,a068 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a054:	e13ffd17 	ldw	r4,-12(fp)
    a058:	000a41c0 	call	a41c <alt_find_file>
    a05c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a060:	00800044 	movi	r2,1
    a064:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a068:	e0bff817 	ldw	r2,-32(fp)
    a06c:	10002926 	beq	r2,zero,a114 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a070:	e13ff817 	ldw	r4,-32(fp)
    a074:	000a5240 	call	a524 <alt_get_fd>
    a078:	e0bff915 	stw	r2,-28(fp)
    a07c:	e0bff917 	ldw	r2,-28(fp)
    a080:	1000030e 	bge	r2,zero,a090 <open+0x84>
    {
      status = index;
    a084:	e0bff917 	ldw	r2,-28(fp)
    a088:	e0bffa15 	stw	r2,-24(fp)
    a08c:	00002306 	br	a11c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    a090:	e0bff917 	ldw	r2,-28(fp)
    a094:	10c00324 	muli	r3,r2,12
    a098:	00800074 	movhi	r2,1
    a09c:	10aad504 	addi	r2,r2,-21676
    a0a0:	1885883a 	add	r2,r3,r2
    a0a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a0a8:	e0fffe17 	ldw	r3,-8(fp)
    a0ac:	00900034 	movhi	r2,16384
    a0b0:	10bfffc4 	addi	r2,r2,-1
    a0b4:	1886703a 	and	r3,r3,r2
    a0b8:	e0bffc17 	ldw	r2,-16(fp)
    a0bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a0c0:	e0bffb17 	ldw	r2,-20(fp)
    a0c4:	1000051e 	bne	r2,zero,a0dc <open+0xd0>
    a0c8:	e13ffc17 	ldw	r4,-16(fp)
    a0cc:	0009f480 	call	9f48 <alt_file_locked>
    a0d0:	e0bffa15 	stw	r2,-24(fp)
    a0d4:	e0bffa17 	ldw	r2,-24(fp)
    a0d8:	10001016 	blt	r2,zero,a11c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a0dc:	e0bff817 	ldw	r2,-32(fp)
    a0e0:	10800317 	ldw	r2,12(r2)
    a0e4:	10000826 	beq	r2,zero,a108 <open+0xfc>
    a0e8:	e0bff817 	ldw	r2,-32(fp)
    a0ec:	10800317 	ldw	r2,12(r2)
    a0f0:	e1ffff17 	ldw	r7,-4(fp)
    a0f4:	e1bffe17 	ldw	r6,-8(fp)
    a0f8:	e17ffd17 	ldw	r5,-12(fp)
    a0fc:	e13ffc17 	ldw	r4,-16(fp)
    a100:	103ee83a 	callr	r2
    a104:	00000106 	br	a10c <open+0x100>
    a108:	0005883a 	mov	r2,zero
    a10c:	e0bffa15 	stw	r2,-24(fp)
    a110:	00000206 	br	a11c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a114:	00bffb44 	movi	r2,-19
    a118:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a11c:	e0bffa17 	ldw	r2,-24(fp)
    a120:	1000090e 	bge	r2,zero,a148 <open+0x13c>
  {
    alt_release_fd (index);  
    a124:	e13ff917 	ldw	r4,-28(fp)
    a128:	000a1600 	call	a160 <alt_release_fd>
    ALT_ERRNO = -status;
    a12c:	0009f0c0 	call	9f0c <alt_get_errno>
    a130:	1007883a 	mov	r3,r2
    a134:	e0bffa17 	ldw	r2,-24(fp)
    a138:	0085c83a 	sub	r2,zero,r2
    a13c:	18800015 	stw	r2,0(r3)
    return -1;
    a140:	00bfffc4 	movi	r2,-1
    a144:	00000106 	br	a14c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    a148:	e0bff917 	ldw	r2,-28(fp)
}
    a14c:	e037883a 	mov	sp,fp
    a150:	dfc00117 	ldw	ra,4(sp)
    a154:	df000017 	ldw	fp,0(sp)
    a158:	dec00204 	addi	sp,sp,8
    a15c:	f800283a 	ret

0000a160 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a160:	defffe04 	addi	sp,sp,-8
    a164:	df000115 	stw	fp,4(sp)
    a168:	df000104 	addi	fp,sp,4
    a16c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a170:	e0bfff17 	ldw	r2,-4(fp)
    a174:	108000d0 	cmplti	r2,r2,3
    a178:	10000d1e 	bne	r2,zero,a1b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a17c:	00800074 	movhi	r2,1
    a180:	10aad504 	addi	r2,r2,-21676
    a184:	e0ffff17 	ldw	r3,-4(fp)
    a188:	18c00324 	muli	r3,r3,12
    a18c:	10c5883a 	add	r2,r2,r3
    a190:	10800204 	addi	r2,r2,8
    a194:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a198:	00800074 	movhi	r2,1
    a19c:	10aad504 	addi	r2,r2,-21676
    a1a0:	e0ffff17 	ldw	r3,-4(fp)
    a1a4:	18c00324 	muli	r3,r3,12
    a1a8:	10c5883a 	add	r2,r2,r3
    a1ac:	10000015 	stw	zero,0(r2)
  }
}
    a1b0:	0001883a 	nop
    a1b4:	e037883a 	mov	sp,fp
    a1b8:	df000017 	ldw	fp,0(sp)
    a1bc:	dec00104 	addi	sp,sp,4
    a1c0:	f800283a 	ret

0000a1c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a1c4:	defffa04 	addi	sp,sp,-24
    a1c8:	df000515 	stw	fp,20(sp)
    a1cc:	df000504 	addi	fp,sp,20
    a1d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1d4:	0005303a 	rdctl	r2,status
    a1d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1dc:	e0fffc17 	ldw	r3,-16(fp)
    a1e0:	00bfff84 	movi	r2,-2
    a1e4:	1884703a 	and	r2,r3,r2
    a1e8:	1001703a 	wrctl	status,r2
  
  return context;
    a1ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a1f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a1f4:	e0bfff17 	ldw	r2,-4(fp)
    a1f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a1fc:	e0bffd17 	ldw	r2,-12(fp)
    a200:	10800017 	ldw	r2,0(r2)
    a204:	e0fffd17 	ldw	r3,-12(fp)
    a208:	18c00117 	ldw	r3,4(r3)
    a20c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a210:	e0bffd17 	ldw	r2,-12(fp)
    a214:	10800117 	ldw	r2,4(r2)
    a218:	e0fffd17 	ldw	r3,-12(fp)
    a21c:	18c00017 	ldw	r3,0(r3)
    a220:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a224:	e0bffd17 	ldw	r2,-12(fp)
    a228:	e0fffd17 	ldw	r3,-12(fp)
    a22c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a230:	e0bffd17 	ldw	r2,-12(fp)
    a234:	e0fffd17 	ldw	r3,-12(fp)
    a238:	10c00015 	stw	r3,0(r2)
    a23c:	e0bffb17 	ldw	r2,-20(fp)
    a240:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a244:	e0bffe17 	ldw	r2,-8(fp)
    a248:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a24c:	0001883a 	nop
    a250:	e037883a 	mov	sp,fp
    a254:	df000017 	ldw	fp,0(sp)
    a258:	dec00104 	addi	sp,sp,4
    a25c:	f800283a 	ret

0000a260 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a260:	defffb04 	addi	sp,sp,-20
    a264:	dfc00415 	stw	ra,16(sp)
    a268:	df000315 	stw	fp,12(sp)
    a26c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a270:	d0a00917 	ldw	r2,-32732(gp)
    a274:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a278:	d0a0cb17 	ldw	r2,-31956(gp)
    a27c:	10800044 	addi	r2,r2,1
    a280:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a284:	00002e06 	br	a340 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a288:	e0bffd17 	ldw	r2,-12(fp)
    a28c:	10800017 	ldw	r2,0(r2)
    a290:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a294:	e0bffd17 	ldw	r2,-12(fp)
    a298:	10800403 	ldbu	r2,16(r2)
    a29c:	10803fcc 	andi	r2,r2,255
    a2a0:	10000426 	beq	r2,zero,a2b4 <alt_tick+0x54>
    a2a4:	d0a0cb17 	ldw	r2,-31956(gp)
    a2a8:	1000021e 	bne	r2,zero,a2b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a2ac:	e0bffd17 	ldw	r2,-12(fp)
    a2b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a2b4:	e0bffd17 	ldw	r2,-12(fp)
    a2b8:	10800217 	ldw	r2,8(r2)
    a2bc:	d0e0cb17 	ldw	r3,-31956(gp)
    a2c0:	18801d36 	bltu	r3,r2,a338 <alt_tick+0xd8>
    a2c4:	e0bffd17 	ldw	r2,-12(fp)
    a2c8:	10800403 	ldbu	r2,16(r2)
    a2cc:	10803fcc 	andi	r2,r2,255
    a2d0:	1000191e 	bne	r2,zero,a338 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a2d4:	e0bffd17 	ldw	r2,-12(fp)
    a2d8:	10800317 	ldw	r2,12(r2)
    a2dc:	e0fffd17 	ldw	r3,-12(fp)
    a2e0:	18c00517 	ldw	r3,20(r3)
    a2e4:	1809883a 	mov	r4,r3
    a2e8:	103ee83a 	callr	r2
    a2ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a2f0:	e0bfff17 	ldw	r2,-4(fp)
    a2f4:	1000031e 	bne	r2,zero,a304 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a2f8:	e13ffd17 	ldw	r4,-12(fp)
    a2fc:	000a1c40 	call	a1c4 <alt_alarm_stop>
    a300:	00000d06 	br	a338 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a304:	e0bffd17 	ldw	r2,-12(fp)
    a308:	10c00217 	ldw	r3,8(r2)
    a30c:	e0bfff17 	ldw	r2,-4(fp)
    a310:	1887883a 	add	r3,r3,r2
    a314:	e0bffd17 	ldw	r2,-12(fp)
    a318:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a31c:	e0bffd17 	ldw	r2,-12(fp)
    a320:	10c00217 	ldw	r3,8(r2)
    a324:	d0a0cb17 	ldw	r2,-31956(gp)
    a328:	1880032e 	bgeu	r3,r2,a338 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a32c:	e0bffd17 	ldw	r2,-12(fp)
    a330:	00c00044 	movi	r3,1
    a334:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a338:	e0bffe17 	ldw	r2,-8(fp)
    a33c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a340:	e0fffd17 	ldw	r3,-12(fp)
    a344:	d0a00904 	addi	r2,gp,-32732
    a348:	18bfcf1e 	bne	r3,r2,a288 <_gp+0xffff75b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a34c:	0001883a 	nop
}
    a350:	0001883a 	nop
    a354:	e037883a 	mov	sp,fp
    a358:	dfc00117 	ldw	ra,4(sp)
    a35c:	df000017 	ldw	fp,0(sp)
    a360:	dec00204 	addi	sp,sp,8
    a364:	f800283a 	ret

0000a368 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a368:	deffff04 	addi	sp,sp,-4
    a36c:	df000015 	stw	fp,0(sp)
    a370:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a374:	000170fa 	wrctl	ienable,zero
}
    a378:	0001883a 	nop
    a37c:	e037883a 	mov	sp,fp
    a380:	df000017 	ldw	fp,0(sp)
    a384:	dec00104 	addi	sp,sp,4
    a388:	f800283a 	ret

0000a38c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a38c:	defffa04 	addi	sp,sp,-24
    a390:	dfc00515 	stw	ra,20(sp)
    a394:	df000415 	stw	fp,16(sp)
    a398:	df000404 	addi	fp,sp,16
    a39c:	e13ffe15 	stw	r4,-8(fp)
    a3a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a3a4:	e0bfff17 	ldw	r2,-4(fp)
    a3a8:	10800017 	ldw	r2,0(r2)
    a3ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a3b0:	e13ffe17 	ldw	r4,-8(fp)
    a3b4:	00089100 	call	8910 <strlen>
    a3b8:	10800044 	addi	r2,r2,1
    a3bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a3c0:	00000d06 	br	a3f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a3c4:	e0bffc17 	ldw	r2,-16(fp)
    a3c8:	10800217 	ldw	r2,8(r2)
    a3cc:	e0fffd17 	ldw	r3,-12(fp)
    a3d0:	180d883a 	mov	r6,r3
    a3d4:	e17ffe17 	ldw	r5,-8(fp)
    a3d8:	1009883a 	mov	r4,r2
    a3dc:	000a7140 	call	a714 <memcmp>
    a3e0:	1000021e 	bne	r2,zero,a3ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a3e4:	e0bffc17 	ldw	r2,-16(fp)
    a3e8:	00000706 	br	a408 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a3ec:	e0bffc17 	ldw	r2,-16(fp)
    a3f0:	10800017 	ldw	r2,0(r2)
    a3f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a3f8:	e0fffc17 	ldw	r3,-16(fp)
    a3fc:	e0bfff17 	ldw	r2,-4(fp)
    a400:	18bff01e 	bne	r3,r2,a3c4 <_gp+0xffff76f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a404:	0005883a 	mov	r2,zero
}
    a408:	e037883a 	mov	sp,fp
    a40c:	dfc00117 	ldw	ra,4(sp)
    a410:	df000017 	ldw	fp,0(sp)
    a414:	dec00204 	addi	sp,sp,8
    a418:	f800283a 	ret

0000a41c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a41c:	defffb04 	addi	sp,sp,-20
    a420:	dfc00415 	stw	ra,16(sp)
    a424:	df000315 	stw	fp,12(sp)
    a428:	df000304 	addi	fp,sp,12
    a42c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a430:	d0a00217 	ldw	r2,-32760(gp)
    a434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a438:	00003106 	br	a500 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a43c:	e0bffd17 	ldw	r2,-12(fp)
    a440:	10800217 	ldw	r2,8(r2)
    a444:	1009883a 	mov	r4,r2
    a448:	00089100 	call	8910 <strlen>
    a44c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a450:	e0bffd17 	ldw	r2,-12(fp)
    a454:	10c00217 	ldw	r3,8(r2)
    a458:	e0bffe17 	ldw	r2,-8(fp)
    a45c:	10bfffc4 	addi	r2,r2,-1
    a460:	1885883a 	add	r2,r3,r2
    a464:	10800003 	ldbu	r2,0(r2)
    a468:	10803fcc 	andi	r2,r2,255
    a46c:	1080201c 	xori	r2,r2,128
    a470:	10bfe004 	addi	r2,r2,-128
    a474:	10800bd8 	cmpnei	r2,r2,47
    a478:	1000031e 	bne	r2,zero,a488 <alt_find_file+0x6c>
    {
      len -= 1;
    a47c:	e0bffe17 	ldw	r2,-8(fp)
    a480:	10bfffc4 	addi	r2,r2,-1
    a484:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a488:	e0bffe17 	ldw	r2,-8(fp)
    a48c:	e0ffff17 	ldw	r3,-4(fp)
    a490:	1885883a 	add	r2,r3,r2
    a494:	10800003 	ldbu	r2,0(r2)
    a498:	10803fcc 	andi	r2,r2,255
    a49c:	1080201c 	xori	r2,r2,128
    a4a0:	10bfe004 	addi	r2,r2,-128
    a4a4:	10800be0 	cmpeqi	r2,r2,47
    a4a8:	1000081e 	bne	r2,zero,a4cc <alt_find_file+0xb0>
    a4ac:	e0bffe17 	ldw	r2,-8(fp)
    a4b0:	e0ffff17 	ldw	r3,-4(fp)
    a4b4:	1885883a 	add	r2,r3,r2
    a4b8:	10800003 	ldbu	r2,0(r2)
    a4bc:	10803fcc 	andi	r2,r2,255
    a4c0:	1080201c 	xori	r2,r2,128
    a4c4:	10bfe004 	addi	r2,r2,-128
    a4c8:	10000a1e 	bne	r2,zero,a4f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a4cc:	e0bffd17 	ldw	r2,-12(fp)
    a4d0:	10800217 	ldw	r2,8(r2)
    a4d4:	e0fffe17 	ldw	r3,-8(fp)
    a4d8:	180d883a 	mov	r6,r3
    a4dc:	e17fff17 	ldw	r5,-4(fp)
    a4e0:	1009883a 	mov	r4,r2
    a4e4:	000a7140 	call	a714 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a4e8:	1000021e 	bne	r2,zero,a4f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a4ec:	e0bffd17 	ldw	r2,-12(fp)
    a4f0:	00000706 	br	a510 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a4f4:	e0bffd17 	ldw	r2,-12(fp)
    a4f8:	10800017 	ldw	r2,0(r2)
    a4fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a500:	e0fffd17 	ldw	r3,-12(fp)
    a504:	d0a00204 	addi	r2,gp,-32760
    a508:	18bfcc1e 	bne	r3,r2,a43c <_gp+0xffff7768>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a50c:	0005883a 	mov	r2,zero
}
    a510:	e037883a 	mov	sp,fp
    a514:	dfc00117 	ldw	ra,4(sp)
    a518:	df000017 	ldw	fp,0(sp)
    a51c:	dec00204 	addi	sp,sp,8
    a520:	f800283a 	ret

0000a524 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a524:	defffc04 	addi	sp,sp,-16
    a528:	df000315 	stw	fp,12(sp)
    a52c:	df000304 	addi	fp,sp,12
    a530:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a534:	00bffa04 	movi	r2,-24
    a538:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a53c:	e03ffd15 	stw	zero,-12(fp)
    a540:	00001906 	br	a5a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    a544:	00800074 	movhi	r2,1
    a548:	10aad504 	addi	r2,r2,-21676
    a54c:	e0fffd17 	ldw	r3,-12(fp)
    a550:	18c00324 	muli	r3,r3,12
    a554:	10c5883a 	add	r2,r2,r3
    a558:	10800017 	ldw	r2,0(r2)
    a55c:	10000f1e 	bne	r2,zero,a59c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    a560:	00800074 	movhi	r2,1
    a564:	10aad504 	addi	r2,r2,-21676
    a568:	e0fffd17 	ldw	r3,-12(fp)
    a56c:	18c00324 	muli	r3,r3,12
    a570:	10c5883a 	add	r2,r2,r3
    a574:	e0ffff17 	ldw	r3,-4(fp)
    a578:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a57c:	d0e00617 	ldw	r3,-32744(gp)
    a580:	e0bffd17 	ldw	r2,-12(fp)
    a584:	1880020e 	bge	r3,r2,a590 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    a588:	e0bffd17 	ldw	r2,-12(fp)
    a58c:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a590:	e0bffd17 	ldw	r2,-12(fp)
    a594:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a598:	00000606 	br	a5b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a59c:	e0bffd17 	ldw	r2,-12(fp)
    a5a0:	10800044 	addi	r2,r2,1
    a5a4:	e0bffd15 	stw	r2,-12(fp)
    a5a8:	e0bffd17 	ldw	r2,-12(fp)
    a5ac:	10800810 	cmplti	r2,r2,32
    a5b0:	103fe41e 	bne	r2,zero,a544 <_gp+0xffff7870>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a5b4:	e0bffe17 	ldw	r2,-8(fp)
}
    a5b8:	e037883a 	mov	sp,fp
    a5bc:	df000017 	ldw	fp,0(sp)
    a5c0:	dec00104 	addi	sp,sp,4
    a5c4:	f800283a 	ret

0000a5c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a5c8:	defffb04 	addi	sp,sp,-20
    a5cc:	df000415 	stw	fp,16(sp)
    a5d0:	df000404 	addi	fp,sp,16
    a5d4:	e13ffe15 	stw	r4,-8(fp)
    a5d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a5dc:	e0bfff17 	ldw	r2,-4(fp)
    a5e0:	10820070 	cmpltui	r2,r2,2049
    a5e4:	1000021e 	bne	r2,zero,a5f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a5e8:	00820004 	movi	r2,2048
    a5ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a5f0:	e0fffe17 	ldw	r3,-8(fp)
    a5f4:	e0bfff17 	ldw	r2,-4(fp)
    a5f8:	1885883a 	add	r2,r3,r2
    a5fc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a600:	e0bffe17 	ldw	r2,-8(fp)
    a604:	e0bffc15 	stw	r2,-16(fp)
    a608:	00000506 	br	a620 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a60c:	e0bffc17 	ldw	r2,-16(fp)
    a610:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a614:	e0bffc17 	ldw	r2,-16(fp)
    a618:	10800804 	addi	r2,r2,32
    a61c:	e0bffc15 	stw	r2,-16(fp)
    a620:	e0fffc17 	ldw	r3,-16(fp)
    a624:	e0bffd17 	ldw	r2,-12(fp)
    a628:	18bff836 	bltu	r3,r2,a60c <_gp+0xffff7938>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a62c:	e0bffe17 	ldw	r2,-8(fp)
    a630:	108007cc 	andi	r2,r2,31
    a634:	10000226 	beq	r2,zero,a640 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a638:	e0bffc17 	ldw	r2,-16(fp)
    a63c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a640:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a644:	0001883a 	nop
    a648:	e037883a 	mov	sp,fp
    a64c:	df000017 	ldw	fp,0(sp)
    a650:	dec00104 	addi	sp,sp,4
    a654:	f800283a 	ret

0000a658 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a658:	defffe04 	addi	sp,sp,-8
    a65c:	df000115 	stw	fp,4(sp)
    a660:	df000104 	addi	fp,sp,4
    a664:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a668:	e0bfff17 	ldw	r2,-4(fp)
    a66c:	10bffe84 	addi	r2,r2,-6
    a670:	10c00428 	cmpgeui	r3,r2,16
    a674:	18001a1e 	bne	r3,zero,a6e0 <alt_exception_cause_generated_bad_addr+0x88>
    a678:	100690ba 	slli	r3,r2,2
    a67c:	00800074 	movhi	r2,1
    a680:	10a9a404 	addi	r2,r2,-22896
    a684:	1885883a 	add	r2,r3,r2
    a688:	10800017 	ldw	r2,0(r2)
    a68c:	1000683a 	jmp	r2
    a690:	0000a6d0 	cmplti	zero,zero,667
    a694:	0000a6d0 	cmplti	zero,zero,667
    a698:	0000a6e0 	cmpeqi	zero,zero,667
    a69c:	0000a6e0 	cmpeqi	zero,zero,667
    a6a0:	0000a6e0 	cmpeqi	zero,zero,667
    a6a4:	0000a6d0 	cmplti	zero,zero,667
    a6a8:	0000a6d8 	cmpnei	zero,zero,667
    a6ac:	0000a6e0 	cmpeqi	zero,zero,667
    a6b0:	0000a6d0 	cmplti	zero,zero,667
    a6b4:	0000a6d0 	cmplti	zero,zero,667
    a6b8:	0000a6e0 	cmpeqi	zero,zero,667
    a6bc:	0000a6d0 	cmplti	zero,zero,667
    a6c0:	0000a6d8 	cmpnei	zero,zero,667
    a6c4:	0000a6e0 	cmpeqi	zero,zero,667
    a6c8:	0000a6e0 	cmpeqi	zero,zero,667
    a6cc:	0000a6d0 	cmplti	zero,zero,667
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a6d0:	00800044 	movi	r2,1
    a6d4:	00000306 	br	a6e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a6d8:	0005883a 	mov	r2,zero
    a6dc:	00000106 	br	a6e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a6e0:	0005883a 	mov	r2,zero
  }
}
    a6e4:	e037883a 	mov	sp,fp
    a6e8:	df000017 	ldw	fp,0(sp)
    a6ec:	dec00104 	addi	sp,sp,4
    a6f0:	f800283a 	ret

0000a6f4 <exit>:
    a6f4:	defffe04 	addi	sp,sp,-8
    a6f8:	000b883a 	mov	r5,zero
    a6fc:	dc000015 	stw	r16,0(sp)
    a700:	dfc00115 	stw	ra,4(sp)
    a704:	2021883a 	mov	r16,r4
    a708:	000a7440 	call	a744 <__call_exitprocs>
    a70c:	8009883a 	mov	r4,r16
    a710:	000a8d40 	call	a8d4 <_exit>

0000a714 <memcmp>:
    a714:	218d883a 	add	r6,r4,r6
    a718:	21800826 	beq	r4,r6,a73c <memcmp+0x28>
    a71c:	20800003 	ldbu	r2,0(r4)
    a720:	28c00003 	ldbu	r3,0(r5)
    a724:	10c00226 	beq	r2,r3,a730 <memcmp+0x1c>
    a728:	10c5c83a 	sub	r2,r2,r3
    a72c:	f800283a 	ret
    a730:	21000044 	addi	r4,r4,1
    a734:	29400044 	addi	r5,r5,1
    a738:	003ff706 	br	a718 <_gp+0xffff7a44>
    a73c:	0005883a 	mov	r2,zero
    a740:	f800283a 	ret

0000a744 <__call_exitprocs>:
    a744:	defff504 	addi	sp,sp,-44
    a748:	dd000515 	stw	r20,20(sp)
    a74c:	05000074 	movhi	r20,1
    a750:	dc800315 	stw	r18,12(sp)
    a754:	dfc00a15 	stw	ra,40(sp)
    a758:	df000915 	stw	fp,36(sp)
    a75c:	ddc00815 	stw	r23,32(sp)
    a760:	dd800715 	stw	r22,28(sp)
    a764:	dd400615 	stw	r21,24(sp)
    a768:	dcc00415 	stw	r19,16(sp)
    a76c:	dc400215 	stw	r17,8(sp)
    a770:	dc000115 	stw	r16,4(sp)
    a774:	d9000015 	stw	r4,0(sp)
    a778:	2825883a 	mov	r18,r5
    a77c:	a52b3504 	addi	r20,r20,-21292
    a780:	a4400017 	ldw	r17,0(r20)
    a784:	8cc00c17 	ldw	r19,48(r17)
    a788:	8c400c04 	addi	r17,r17,48
    a78c:	98004526 	beq	r19,zero,a8a4 <__call_exitprocs+0x160>
    a790:	9c000117 	ldw	r16,4(r19)
    a794:	00900034 	movhi	r2,16384
    a798:	10bfffc4 	addi	r2,r2,-1
    a79c:	9d402217 	ldw	r21,136(r19)
    a7a0:	85bfffc4 	addi	r22,r16,-1
    a7a4:	80a1883a 	add	r16,r16,r2
    a7a8:	8421883a 	add	r16,r16,r16
    a7ac:	8421883a 	add	r16,r16,r16
    a7b0:	ac2f883a 	add	r23,r21,r16
    a7b4:	84000204 	addi	r16,r16,8
    a7b8:	9c21883a 	add	r16,r19,r16
    a7bc:	b0002716 	blt	r22,zero,a85c <__call_exitprocs+0x118>
    a7c0:	90000726 	beq	r18,zero,a7e0 <__call_exitprocs+0x9c>
    a7c4:	a800041e 	bne	r21,zero,a7d8 <__call_exitprocs+0x94>
    a7c8:	b5bfffc4 	addi	r22,r22,-1
    a7cc:	bdffff04 	addi	r23,r23,-4
    a7d0:	843fff04 	addi	r16,r16,-4
    a7d4:	003ff906 	br	a7bc <_gp+0xffff7ae8>
    a7d8:	b9002017 	ldw	r4,128(r23)
    a7dc:	913ffa1e 	bne	r18,r4,a7c8 <_gp+0xffff7af4>
    a7e0:	99000117 	ldw	r4,4(r19)
    a7e4:	82000017 	ldw	r8,0(r16)
    a7e8:	213fffc4 	addi	r4,r4,-1
    a7ec:	b100021e 	bne	r22,r4,a7f8 <__call_exitprocs+0xb4>
    a7f0:	9d800115 	stw	r22,4(r19)
    a7f4:	00000106 	br	a7fc <__call_exitprocs+0xb8>
    a7f8:	80000015 	stw	zero,0(r16)
    a7fc:	403ff226 	beq	r8,zero,a7c8 <_gp+0xffff7af4>
    a800:	9f000117 	ldw	fp,4(r19)
    a804:	a8000526 	beq	r21,zero,a81c <__call_exitprocs+0xd8>
    a808:	00800044 	movi	r2,1
    a80c:	1592983a 	sll	r9,r2,r22
    a810:	a9404017 	ldw	r5,256(r21)
    a814:	494a703a 	and	r5,r9,r5
    a818:	2800021e 	bne	r5,zero,a824 <__call_exitprocs+0xe0>
    a81c:	403ee83a 	callr	r8
    a820:	00000906 	br	a848 <__call_exitprocs+0x104>
    a824:	a9004117 	ldw	r4,260(r21)
    a828:	4908703a 	and	r4,r9,r4
    a82c:	2000041e 	bne	r4,zero,a840 <__call_exitprocs+0xfc>
    a830:	b9400017 	ldw	r5,0(r23)
    a834:	d9000017 	ldw	r4,0(sp)
    a838:	403ee83a 	callr	r8
    a83c:	00000206 	br	a848 <__call_exitprocs+0x104>
    a840:	b9000017 	ldw	r4,0(r23)
    a844:	403ee83a 	callr	r8
    a848:	99000117 	ldw	r4,4(r19)
    a84c:	e13fcc1e 	bne	fp,r4,a780 <_gp+0xffff7aac>
    a850:	89000017 	ldw	r4,0(r17)
    a854:	993fdc26 	beq	r19,r4,a7c8 <_gp+0xffff7af4>
    a858:	003fc906 	br	a780 <_gp+0xffff7aac>
    a85c:	00800034 	movhi	r2,0
    a860:	10800004 	addi	r2,r2,0
    a864:	10000f26 	beq	r2,zero,a8a4 <__call_exitprocs+0x160>
    a868:	99400117 	ldw	r5,4(r19)
    a86c:	99000017 	ldw	r4,0(r19)
    a870:	2800091e 	bne	r5,zero,a898 <__call_exitprocs+0x154>
    a874:	20000826 	beq	r4,zero,a898 <__call_exitprocs+0x154>
    a878:	89000015 	stw	r4,0(r17)
    a87c:	a8000226 	beq	r21,zero,a888 <__call_exitprocs+0x144>
    a880:	a809883a 	mov	r4,r21
    a884:	00000000 	call	0 <__reset-0x8000>
    a888:	9809883a 	mov	r4,r19
    a88c:	00000000 	call	0 <__reset-0x8000>
    a890:	8cc00017 	ldw	r19,0(r17)
    a894:	003fbd06 	br	a78c <_gp+0xffff7ab8>
    a898:	9823883a 	mov	r17,r19
    a89c:	2027883a 	mov	r19,r4
    a8a0:	003fba06 	br	a78c <_gp+0xffff7ab8>
    a8a4:	dfc00a17 	ldw	ra,40(sp)
    a8a8:	df000917 	ldw	fp,36(sp)
    a8ac:	ddc00817 	ldw	r23,32(sp)
    a8b0:	dd800717 	ldw	r22,28(sp)
    a8b4:	dd400617 	ldw	r21,24(sp)
    a8b8:	dd000517 	ldw	r20,20(sp)
    a8bc:	dcc00417 	ldw	r19,16(sp)
    a8c0:	dc800317 	ldw	r18,12(sp)
    a8c4:	dc400217 	ldw	r17,8(sp)
    a8c8:	dc000117 	ldw	r16,4(sp)
    a8cc:	dec00b04 	addi	sp,sp,44
    a8d0:	f800283a 	ret

0000a8d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a8d4:	defffd04 	addi	sp,sp,-12
    a8d8:	df000215 	stw	fp,8(sp)
    a8dc:	df000204 	addi	fp,sp,8
    a8e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a8e4:	0001883a 	nop
    a8e8:	e0bfff17 	ldw	r2,-4(fp)
    a8ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a8f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a8f4:	10000226 	beq	r2,zero,a900 <_exit+0x2c>
    ALT_SIM_FAIL();
    a8f8:	002af070 	cmpltui	zero,zero,43969
    a8fc:	00000106 	br	a904 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a900:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a904:	003fff06 	br	a904 <_gp+0xffff7c30>
