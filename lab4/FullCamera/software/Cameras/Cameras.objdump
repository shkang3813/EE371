
Cameras.elf:     file format elf32-littlenios2
Cameras.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000dc8 memsz 0x00000dc8 flags r-x
    LOAD off    0x00001de8 vaddr 0x00008de8 paddr 0x00008f44 align 2**12
         filesz 0x0000015c memsz 0x0000015c flags rw-
    LOAD off    0x000020a0 vaddr 0x000090a0 paddr 0x000090a0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001f44  2**0
                  CONTENTS
  2 .text         00000d6c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  00008d8c  00008d8c  00001d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000015c  00008de8  00008f44  00001de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000090a0  000090a0  000020a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000090b0  000090b0  00001f44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000310  00000000  00000000  00001f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004076  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000016ba  00000000  00000000  000062ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000018a6  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000414  00000000  00000000  00009250  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000111b  00000000  00000000  00009664  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001403  00000000  00000000  0000a77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0000bb84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000270  00000000  00000000  0000bba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000d091  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d095  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000d0ab  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0000d0bd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0000d0cf  2**0
                  CONTENTS, READONLY
 29 .jdi          00003f63  00000000  00000000  0000d0fa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00088fae  00000000  00000000  0001105d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008d8c l    d  .rodata	00000000 .rodata
00008de8 l    d  .rwdata	00000000 .rwdata
000090a0 l    d  .bss	00000000 .bss
000090b0 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Cameras_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 camera_system.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000820c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008de8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008d38 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00008bbc g     F .text	0000002c alt_main
00008f44 g       *ABS*	00000000 __flash_rwdata_start
000081c0 g     F .text	0000004c printf
00008be8 g     F .text	00000038 alt_putstr
00008f28 g     O .rwdata	00000004 jtag_uart
00008d4c g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000090a0 g     O .bss	00000004 errno
000090a8 g     O .bss	00000004 alt_argv
00010f20 g       *ABS*	00000000 _gp
00008ec8 g     O .rwdata	00000030 alt_fd_list
00008ca4 g     F .text	0000005c altera_avalon_jtag_uart_read
00008184 g     F .text	0000003c _printf_r
000089dc g     F .text	00000064 .hidden __udivsi3
00008d54 g     F .text	00000038 alt_icache_flush
00008f2c g     O .rwdata	00000004 alt_max_fd
00008f20 g     O .rwdata	00000004 _global_impure_ptr
000090b0 g       *ABS*	00000000 __bss_end
00008a98 g     F .text	00000044 alt_getchar
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
00008ef8 g     O .rwdata	00000028 alt_dev_null
00008d34 g     F .text	00000004 alt_dcache_flush_all
00008f44 g       *ABS*	00000000 __ram_rwdata_end
00008f30 g     O .rwdata	00000008 alt_dev_list
00008c20 g     F .text	00000060 write
00008de8 g       *ABS*	00000000 __ram_rodata_end
00008a40 g     F .text	00000058 .hidden __umodsi3
000090b0 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008d00 g     F .text	00000034 altera_avalon_jtag_uart_write
00008278 g     F .text	00000524 ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008ca0 g     F .text	00000004 alt_sys_init
00008de8 g       *ABS*	00000000 __ram_rwdata_start
00008d8c g       *ABS*	00000000 __ram_rodata_start
000090b0 g       *ABS*	00000000 __alt_stack_base
000087b8 g     F .text	000000b8 __sfvwrite_small_dev
000090a0 g       *ABS*	00000000 __bss_start
00008070 g     F .text	00000114 main
000090a4 g     O .bss	00000004 alt_envp
00008f40 g     O .rwdata	00000004 alt_errno
000088e4 g     F .text	00000084 .hidden __divsi3
00008d8c g       *ABS*	00000000 __flash_rodata_start
00008c80 g     F .text	00000020 alt_irq_init
0000888c g     F .text	00000058 _write_r
00008f24 g     O .rwdata	00000004 _impure_ptr
000090ac g     O .bss	00000004 alt_argc
00008f38 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008f44 g       *ABS*	00000000 _edata
000090b0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008968 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000805c g     F .text	00000014 getChar
0000801c g       .entry	00000000 _exit
00008870 g     F .text	0000001c strlen
00008d40 g     F .text	0000000c alt_icache_flush_all
0000879c g     F .text	0000001c __vfprintf_internal
00008adc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff70e4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d683c814 	ori	gp,gp,3872
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a42814 	ori	r2,r2,37024

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e42c14 	ori	r3,r3,37040

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7124>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008adc0 	call	8adc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008bbc0 	call	8bbc <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7138>

0000805c <getChar>:
#include <system.h>
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

char getChar(int ten) {
	if (ten == 0) {
    805c:	20000226 	beq	r4,zero,8068 <getChar+0xc>
		return '-';
	}
	return (char) (ten - 1 + 48);
    8060:	20800bc4 	addi	r2,r4,47
    8064:	f800283a 	ret
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

char getChar(int ten) {
	if (ten == 0) {
		return '-';
    8068:	00800b44 	movi	r2,45
	}
	return (char) (ten - 1 + 48);
}
    806c:	f800283a 	ret

00008070 <main>:

int main() {
	alt_putstr("Welcome! Type \'S\' to start the camera system...");
    8070:	01000074 	movhi	r4,1
		return '-';
	}
	return (char) (ten - 1 + 48);
}

int main() {
    8074:	defffb04 	addi	sp,sp,-20
	alt_putstr("Welcome! Type \'S\' to start the camera system...");
    8078:	21236304 	addi	r4,r4,-29300
		return '-';
	}
	return (char) (ten - 1 + 48);
}

int main() {
    807c:	dfc00415 	stw	ra,16(sp)
    8080:	dc000015 	stw	r16,0(sp)
    8084:	dcc00315 	stw	r19,12(sp)
    8088:	dc800215 	stw	r18,8(sp)
    808c:	dc400115 	stw	r17,4(sp)
	alt_putstr("Welcome! Type \'S\' to start the camera system...");
    8090:	0008be80 	call	8be8 <alt_putstr>
	char in = alt_getchar();
    8094:	0008a980 	call	8a98 <alt_getchar>
	while (in != 'S')
    8098:	040014c4 	movi	r16,83
    809c:	10803fcc 	andi	r2,r2,255
    80a0:	1080201c 	xori	r2,r2,128
    80a4:	10bfe004 	addi	r2,r2,-128
    80a8:	14000226 	beq	r2,r16,80b4 <main+0x44>
		in = alt_getchar();
    80ac:	0008a980 	call	8a98 <alt_getchar>
    80b0:	003ffa06 	br	809c <_gp+0xffff717c>
	IOWR_ALTERA_AVALON_PIO_DATA(START_BASE, 1);
    80b4:	00c00074 	movhi	r3,1
    80b8:	00800044 	movi	r2,1
    80bc:	18c42004 	addi	r3,r3,4224
    80c0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD1_BASE, 1);
    80c4:	00c00074 	movhi	r3,1
    80c8:	18c43804 	addi	r3,r3,4320
    80cc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD2_BASE, 1);
    80d0:	00c00074 	movhi	r3,1
    80d4:	18c43404 	addi	r3,r3,4304
    80d8:	18800035 	stwio	r2,0(r3)

	char data1 = '-', data2 = '-';
	printf("Buffer 1: %c   Buffer 2: %c\n", data1, data2);
    80dc:	01800b44 	movi	r6,45
    80e0:	01000074 	movhi	r4,1
    80e4:	21236f04 	addi	r4,r4,-29252
    80e8:	300b883a 	mov	r5,r6
    80ec:	00081c00 	call	81c0 <printf>
		in = alt_getchar();
	IOWR_ALTERA_AVALON_PIO_DATA(START_BASE, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD1_BASE, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD2_BASE, 1);

	char data1 = '-', data2 = '-';
    80f0:	00800b44 	movi	r2,45
	printf("Buffer 1: %c   Buffer 2: %c\n", data1, data2);
	while (1) {
		char cur1 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT1_BASE));
    80f4:	04800074 	movhi	r18,1
		char cur2 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT2_BASE));
    80f8:	04c00074 	movhi	r19,1
		in = alt_getchar();
	IOWR_ALTERA_AVALON_PIO_DATA(START_BASE, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD1_BASE, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD2_BASE, 1);

	char data1 = '-', data2 = '-';
    80fc:	1009883a 	mov	r4,r2
	printf("Buffer 1: %c   Buffer 2: %c\n", data1, data2);
	while (1) {
		char cur1 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT1_BASE));
    8100:	94840c04 	addi	r18,r18,4144
		char cur2 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT2_BASE));
    8104:	9cc40804 	addi	r19,r19,4128
	IOWR_ALTERA_AVALON_PIO_DATA(DOWNLOAD2_BASE, 1);

	char data1 = '-', data2 = '-';
	printf("Buffer 1: %c   Buffer 2: %c\n", data1, data2);
	while (1) {
		char cur1 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT1_BASE));
    8108:	94000037 	ldwio	r16,0(r18)
#include <system.h>
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

char getChar(int ten) {
	if (ten == 0) {
    810c:	80000226 	beq	r16,zero,8118 <main+0xa8>
		return '-';
	}
	return (char) (ten - 1 + 48);
    8110:	84000bc4 	addi	r16,r16,47
    8114:	00000106 	br	811c <main+0xac>
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

char getChar(int ten) {
	if (ten == 0) {
		return '-';
    8118:	04000b44 	movi	r16,45

	char data1 = '-', data2 = '-';
	printf("Buffer 1: %c   Buffer 2: %c\n", data1, data2);
	while (1) {
		char cur1 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT1_BASE));
		char cur2 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT2_BASE));
    811c:	9c400037 	ldwio	r17,0(r19)
#include <system.h>
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

char getChar(int ten) {
	if (ten == 0) {
    8120:	88000226 	beq	r17,zero,812c <main+0xbc>
		return '-';
	}
	return (char) (ten - 1 + 48);
    8124:	8c400bc4 	addi	r17,r17,47
    8128:	00000106 	br	8130 <main+0xc0>
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

char getChar(int ten) {
	if (ten == 0) {
		return '-';
    812c:	04400b44 	movi	r17,45
	char data1 = '-', data2 = '-';
	printf("Buffer 1: %c   Buffer 2: %c\n", data1, data2);
	while (1) {
		char cur1 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT1_BASE));
		char cur2 = getChar(IORD_ALTERA_AVALON_PIO_DATA(TENOUT2_BASE));
		if (cur1 != data1 || cur2 != data2) {
    8130:	20c03fcc 	andi	r3,r4,255
    8134:	81403fcc 	andi	r5,r16,255
    8138:	18c0201c 	xori	r3,r3,128
    813c:	2940201c 	xori	r5,r5,128
    8140:	89803fcc 	andi	r6,r17,255
    8144:	3180201c 	xori	r6,r6,128
    8148:	18ffe004 	addi	r3,r3,-128
    814c:	297fe004 	addi	r5,r5,-128
    8150:	31bfe004 	addi	r6,r6,-128
    8154:	1940061e 	bne	r3,r5,8170 <main+0x100>
    8158:	10803fcc 	andi	r2,r2,255
    815c:	1080201c 	xori	r2,r2,128
    8160:	10bfe004 	addi	r2,r2,-128
    8164:	1180021e 	bne	r2,r6,8170 <main+0x100>
			printf("Buffer 1: %c   Buffer 2: %c\n", cur1, cur2);
    8168:	8805883a 	mov	r2,r17
    816c:	003fe606 	br	8108 <_gp+0xffff71e8>
    8170:	01000074 	movhi	r4,1
    8174:	21236f04 	addi	r4,r4,-29252
    8178:	00081c00 	call	81c0 <printf>
    817c:	8009883a 	mov	r4,r16
    8180:	003ff906 	br	8168 <_gp+0xffff7248>

00008184 <_printf_r>:
    8184:	defffd04 	addi	sp,sp,-12
    8188:	dfc00015 	stw	ra,0(sp)
    818c:	d9800115 	stw	r6,4(sp)
    8190:	d9c00215 	stw	r7,8(sp)
    8194:	20c00217 	ldw	r3,8(r4)
    8198:	01800074 	movhi	r6,1
    819c:	31a1ee04 	addi	r6,r6,-30792
    81a0:	19800115 	stw	r6,4(r3)
    81a4:	280d883a 	mov	r6,r5
    81a8:	21400217 	ldw	r5,8(r4)
    81ac:	d9c00104 	addi	r7,sp,4
    81b0:	00082780 	call	8278 <___vfprintf_internal_r>
    81b4:	dfc00017 	ldw	ra,0(sp)
    81b8:	dec00304 	addi	sp,sp,12
    81bc:	f800283a 	ret

000081c0 <printf>:
    81c0:	defffc04 	addi	sp,sp,-16
    81c4:	dfc00015 	stw	ra,0(sp)
    81c8:	d9400115 	stw	r5,4(sp)
    81cc:	d9800215 	stw	r6,8(sp)
    81d0:	d9c00315 	stw	r7,12(sp)
    81d4:	00800074 	movhi	r2,1
    81d8:	10a3c904 	addi	r2,r2,-28892
    81dc:	10800017 	ldw	r2,0(r2)
    81e0:	01400074 	movhi	r5,1
    81e4:	2961ee04 	addi	r5,r5,-30792
    81e8:	10c00217 	ldw	r3,8(r2)
    81ec:	d9800104 	addi	r6,sp,4
    81f0:	19400115 	stw	r5,4(r3)
    81f4:	200b883a 	mov	r5,r4
    81f8:	11000217 	ldw	r4,8(r2)
    81fc:	000879c0 	call	879c <__vfprintf_internal>
    8200:	dfc00017 	ldw	ra,0(sp)
    8204:	dec00404 	addi	sp,sp,16
    8208:	f800283a 	ret

0000820c <print_repeat>:
    820c:	defffb04 	addi	sp,sp,-20
    8210:	dc800315 	stw	r18,12(sp)
    8214:	dc400215 	stw	r17,8(sp)
    8218:	dc000115 	stw	r16,4(sp)
    821c:	dfc00415 	stw	ra,16(sp)
    8220:	2025883a 	mov	r18,r4
    8224:	2823883a 	mov	r17,r5
    8228:	d9800005 	stb	r6,0(sp)
    822c:	3821883a 	mov	r16,r7
    8230:	04000a0e 	bge	zero,r16,825c <print_repeat+0x50>
    8234:	88800117 	ldw	r2,4(r17)
    8238:	01c00044 	movi	r7,1
    823c:	d80d883a 	mov	r6,sp
    8240:	880b883a 	mov	r5,r17
    8244:	9009883a 	mov	r4,r18
    8248:	103ee83a 	callr	r2
    824c:	843fffc4 	addi	r16,r16,-1
    8250:	103ff726 	beq	r2,zero,8230 <_gp+0xffff7310>
    8254:	00bfffc4 	movi	r2,-1
    8258:	00000106 	br	8260 <print_repeat+0x54>
    825c:	0005883a 	mov	r2,zero
    8260:	dfc00417 	ldw	ra,16(sp)
    8264:	dc800317 	ldw	r18,12(sp)
    8268:	dc400217 	ldw	r17,8(sp)
    826c:	dc000117 	ldw	r16,4(sp)
    8270:	dec00504 	addi	sp,sp,20
    8274:	f800283a 	ret

00008278 <___vfprintf_internal_r>:
    8278:	deffe504 	addi	sp,sp,-108
    827c:	d8c00804 	addi	r3,sp,32
    8280:	df001915 	stw	fp,100(sp)
    8284:	ddc01815 	stw	r23,96(sp)
    8288:	dd801715 	stw	r22,92(sp)
    828c:	dd401615 	stw	r21,88(sp)
    8290:	dd001515 	stw	r20,84(sp)
    8294:	dcc01415 	stw	r19,80(sp)
    8298:	dc801315 	stw	r18,76(sp)
    829c:	dc401215 	stw	r17,72(sp)
    82a0:	dc001115 	stw	r16,68(sp)
    82a4:	dfc01a15 	stw	ra,104(sp)
    82a8:	2027883a 	mov	r19,r4
    82ac:	2839883a 	mov	fp,r5
    82b0:	382d883a 	mov	r22,r7
    82b4:	d9800f15 	stw	r6,60(sp)
    82b8:	0021883a 	mov	r16,zero
    82bc:	d8000e15 	stw	zero,56(sp)
    82c0:	002f883a 	mov	r23,zero
    82c4:	002b883a 	mov	r21,zero
    82c8:	0025883a 	mov	r18,zero
    82cc:	0023883a 	mov	r17,zero
    82d0:	d8000c15 	stw	zero,48(sp)
    82d4:	d8000b15 	stw	zero,44(sp)
    82d8:	0029883a 	mov	r20,zero
    82dc:	d8c00915 	stw	r3,36(sp)
    82e0:	d8c00f17 	ldw	r3,60(sp)
    82e4:	19000003 	ldbu	r4,0(r3)
    82e8:	20803fcc 	andi	r2,r4,255
    82ec:	1080201c 	xori	r2,r2,128
    82f0:	10bfe004 	addi	r2,r2,-128
    82f4:	10011c26 	beq	r2,zero,8768 <___vfprintf_internal_r+0x4f0>
    82f8:	00c00044 	movi	r3,1
    82fc:	a0c01426 	beq	r20,r3,8350 <___vfprintf_internal_r+0xd8>
    8300:	1d000216 	blt	r3,r20,830c <___vfprintf_internal_r+0x94>
    8304:	a0000626 	beq	r20,zero,8320 <___vfprintf_internal_r+0xa8>
    8308:	00011306 	br	8758 <___vfprintf_internal_r+0x4e0>
    830c:	01400084 	movi	r5,2
    8310:	a1401d26 	beq	r20,r5,8388 <___vfprintf_internal_r+0x110>
    8314:	014000c4 	movi	r5,3
    8318:	a1402926 	beq	r20,r5,83c0 <___vfprintf_internal_r+0x148>
    831c:	00010e06 	br	8758 <___vfprintf_internal_r+0x4e0>
    8320:	01400944 	movi	r5,37
    8324:	1140fb26 	beq	r2,r5,8714 <___vfprintf_internal_r+0x49c>
    8328:	e0800117 	ldw	r2,4(fp)
    832c:	d9000005 	stb	r4,0(sp)
    8330:	01c00044 	movi	r7,1
    8334:	d80d883a 	mov	r6,sp
    8338:	e00b883a 	mov	r5,fp
    833c:	9809883a 	mov	r4,r19
    8340:	103ee83a 	callr	r2
    8344:	1000d61e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    8348:	84000044 	addi	r16,r16,1
    834c:	00010206 	br	8758 <___vfprintf_internal_r+0x4e0>
    8350:	01400c04 	movi	r5,48
    8354:	1140f826 	beq	r2,r5,8738 <___vfprintf_internal_r+0x4c0>
    8358:	01400944 	movi	r5,37
    835c:	11400a1e 	bne	r2,r5,8388 <___vfprintf_internal_r+0x110>
    8360:	d8800005 	stb	r2,0(sp)
    8364:	e0800117 	ldw	r2,4(fp)
    8368:	a00f883a 	mov	r7,r20
    836c:	d80d883a 	mov	r6,sp
    8370:	e00b883a 	mov	r5,fp
    8374:	9809883a 	mov	r4,r19
    8378:	103ee83a 	callr	r2
    837c:	1000c81e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    8380:	84000044 	addi	r16,r16,1
    8384:	0000f306 	br	8754 <___vfprintf_internal_r+0x4dc>
    8388:	217ff404 	addi	r5,r4,-48
    838c:	29403fcc 	andi	r5,r5,255
    8390:	00c00244 	movi	r3,9
    8394:	19400736 	bltu	r3,r5,83b4 <___vfprintf_internal_r+0x13c>
    8398:	00bfffc4 	movi	r2,-1
    839c:	88800226 	beq	r17,r2,83a8 <___vfprintf_internal_r+0x130>
    83a0:	8c4002a4 	muli	r17,r17,10
    83a4:	00000106 	br	83ac <___vfprintf_internal_r+0x134>
    83a8:	0023883a 	mov	r17,zero
    83ac:	2c63883a 	add	r17,r5,r17
    83b0:	0000e206 	br	873c <___vfprintf_internal_r+0x4c4>
    83b4:	01400b84 	movi	r5,46
    83b8:	1140e426 	beq	r2,r5,874c <___vfprintf_internal_r+0x4d4>
    83bc:	05000084 	movi	r20,2
    83c0:	213ff404 	addi	r4,r4,-48
    83c4:	21003fcc 	andi	r4,r4,255
    83c8:	00c00244 	movi	r3,9
    83cc:	19000736 	bltu	r3,r4,83ec <___vfprintf_internal_r+0x174>
    83d0:	00bfffc4 	movi	r2,-1
    83d4:	90800226 	beq	r18,r2,83e0 <___vfprintf_internal_r+0x168>
    83d8:	948002a4 	muli	r18,r18,10
    83dc:	00000106 	br	83e4 <___vfprintf_internal_r+0x16c>
    83e0:	0025883a 	mov	r18,zero
    83e4:	24a5883a 	add	r18,r4,r18
    83e8:	0000db06 	br	8758 <___vfprintf_internal_r+0x4e0>
    83ec:	00c01b04 	movi	r3,108
    83f0:	10c0d426 	beq	r2,r3,8744 <___vfprintf_internal_r+0x4cc>
    83f4:	013fffc4 	movi	r4,-1
    83f8:	91000226 	beq	r18,r4,8404 <___vfprintf_internal_r+0x18c>
    83fc:	d8000b15 	stw	zero,44(sp)
    8400:	00000106 	br	8408 <___vfprintf_internal_r+0x190>
    8404:	04800044 	movi	r18,1
    8408:	01001a44 	movi	r4,105
    840c:	11001626 	beq	r2,r4,8468 <___vfprintf_internal_r+0x1f0>
    8410:	20800916 	blt	r4,r2,8438 <___vfprintf_internal_r+0x1c0>
    8414:	010018c4 	movi	r4,99
    8418:	11008a26 	beq	r2,r4,8644 <___vfprintf_internal_r+0x3cc>
    841c:	01001904 	movi	r4,100
    8420:	11001126 	beq	r2,r4,8468 <___vfprintf_internal_r+0x1f0>
    8424:	01001604 	movi	r4,88
    8428:	1100ca1e 	bne	r2,r4,8754 <___vfprintf_internal_r+0x4dc>
    842c:	00c00044 	movi	r3,1
    8430:	d8c00e15 	stw	r3,56(sp)
    8434:	00001406 	br	8488 <___vfprintf_internal_r+0x210>
    8438:	01001cc4 	movi	r4,115
    843c:	11009a26 	beq	r2,r4,86a8 <___vfprintf_internal_r+0x430>
    8440:	20800416 	blt	r4,r2,8454 <___vfprintf_internal_r+0x1dc>
    8444:	01001bc4 	movi	r4,111
    8448:	1100c21e 	bne	r2,r4,8754 <___vfprintf_internal_r+0x4dc>
    844c:	05400204 	movi	r21,8
    8450:	00000e06 	br	848c <___vfprintf_internal_r+0x214>
    8454:	01001d44 	movi	r4,117
    8458:	11000c26 	beq	r2,r4,848c <___vfprintf_internal_r+0x214>
    845c:	01001e04 	movi	r4,120
    8460:	11000926 	beq	r2,r4,8488 <___vfprintf_internal_r+0x210>
    8464:	0000bb06 	br	8754 <___vfprintf_internal_r+0x4dc>
    8468:	b5000104 	addi	r20,r22,4
    846c:	b8000726 	beq	r23,zero,848c <___vfprintf_internal_r+0x214>
    8470:	dd000d15 	stw	r20,52(sp)
    8474:	b5800017 	ldw	r22,0(r22)
    8478:	b000080e 	bge	r22,zero,849c <___vfprintf_internal_r+0x224>
    847c:	05adc83a 	sub	r22,zero,r22
    8480:	02800044 	movi	r10,1
    8484:	00000606 	br	84a0 <___vfprintf_internal_r+0x228>
    8488:	05400404 	movi	r21,16
    848c:	b0c00104 	addi	r3,r22,4
    8490:	d8c00d15 	stw	r3,52(sp)
    8494:	b5800017 	ldw	r22,0(r22)
    8498:	002f883a 	mov	r23,zero
    849c:	0015883a 	mov	r10,zero
    84a0:	d829883a 	mov	r20,sp
    84a4:	b0001426 	beq	r22,zero,84f8 <___vfprintf_internal_r+0x280>
    84a8:	b009883a 	mov	r4,r22
    84ac:	a80b883a 	mov	r5,r21
    84b0:	da801015 	stw	r10,64(sp)
    84b4:	00089dc0 	call	89dc <__udivsi3>
    84b8:	1549383a 	mul	r4,r2,r21
    84bc:	00c00244 	movi	r3,9
    84c0:	da801017 	ldw	r10,64(sp)
    84c4:	b12dc83a 	sub	r22,r22,r4
    84c8:	1d800216 	blt	r3,r22,84d4 <___vfprintf_internal_r+0x25c>
    84cc:	b5800c04 	addi	r22,r22,48
    84d0:	00000506 	br	84e8 <___vfprintf_internal_r+0x270>
    84d4:	d8c00e17 	ldw	r3,56(sp)
    84d8:	18000226 	beq	r3,zero,84e4 <___vfprintf_internal_r+0x26c>
    84dc:	b5800dc4 	addi	r22,r22,55
    84e0:	00000106 	br	84e8 <___vfprintf_internal_r+0x270>
    84e4:	b58015c4 	addi	r22,r22,87
    84e8:	a5800005 	stb	r22,0(r20)
    84ec:	a5000044 	addi	r20,r20,1
    84f0:	102d883a 	mov	r22,r2
    84f4:	003feb06 	br	84a4 <_gp+0xffff7584>
    84f8:	a6c7c83a 	sub	r3,r20,sp
    84fc:	d8c00a15 	stw	r3,40(sp)
    8500:	90c5c83a 	sub	r2,r18,r3
    8504:	00800a0e 	bge	zero,r2,8530 <___vfprintf_internal_r+0x2b8>
    8508:	a085883a 	add	r2,r20,r2
    850c:	01400c04 	movi	r5,48
    8510:	d8c00917 	ldw	r3,36(sp)
    8514:	a009883a 	mov	r4,r20
    8518:	a0c0032e 	bgeu	r20,r3,8528 <___vfprintf_internal_r+0x2b0>
    851c:	a5000044 	addi	r20,r20,1
    8520:	21400005 	stb	r5,0(r4)
    8524:	a0bffa1e 	bne	r20,r2,8510 <_gp+0xffff75f0>
    8528:	a6c7c83a 	sub	r3,r20,sp
    852c:	d8c00a15 	stw	r3,40(sp)
    8530:	d8c00a17 	ldw	r3,40(sp)
    8534:	50d3883a 	add	r9,r10,r3
    8538:	d8c00b17 	ldw	r3,44(sp)
    853c:	8a6dc83a 	sub	r22,r17,r9
    8540:	18001726 	beq	r3,zero,85a0 <___vfprintf_internal_r+0x328>
    8544:	50000a26 	beq	r10,zero,8570 <___vfprintf_internal_r+0x2f8>
    8548:	00800b44 	movi	r2,45
    854c:	d8800805 	stb	r2,32(sp)
    8550:	e0800117 	ldw	r2,4(fp)
    8554:	01c00044 	movi	r7,1
    8558:	d9800804 	addi	r6,sp,32
    855c:	e00b883a 	mov	r5,fp
    8560:	9809883a 	mov	r4,r19
    8564:	103ee83a 	callr	r2
    8568:	10004d1e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    856c:	84000044 	addi	r16,r16,1
    8570:	0580070e 	bge	zero,r22,8590 <___vfprintf_internal_r+0x318>
    8574:	b00f883a 	mov	r7,r22
    8578:	01800c04 	movi	r6,48
    857c:	e00b883a 	mov	r5,fp
    8580:	9809883a 	mov	r4,r19
    8584:	000820c0 	call	820c <print_repeat>
    8588:	1000451e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    858c:	85a1883a 	add	r16,r16,r22
    8590:	d8c00a17 	ldw	r3,40(sp)
    8594:	a013883a 	mov	r9,r20
    8598:	1d2dc83a 	sub	r22,r3,r20
    859c:	00002206 	br	8628 <___vfprintf_internal_r+0x3b0>
    85a0:	0580090e 	bge	zero,r22,85c8 <___vfprintf_internal_r+0x350>
    85a4:	b00f883a 	mov	r7,r22
    85a8:	01800804 	movi	r6,32
    85ac:	e00b883a 	mov	r5,fp
    85b0:	9809883a 	mov	r4,r19
    85b4:	da801015 	stw	r10,64(sp)
    85b8:	000820c0 	call	820c <print_repeat>
    85bc:	da801017 	ldw	r10,64(sp)
    85c0:	1000371e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    85c4:	85a1883a 	add	r16,r16,r22
    85c8:	503ff126 	beq	r10,zero,8590 <_gp+0xffff7670>
    85cc:	00800b44 	movi	r2,45
    85d0:	d8800805 	stb	r2,32(sp)
    85d4:	e0800117 	ldw	r2,4(fp)
    85d8:	01c00044 	movi	r7,1
    85dc:	d9800804 	addi	r6,sp,32
    85e0:	e00b883a 	mov	r5,fp
    85e4:	9809883a 	mov	r4,r19
    85e8:	103ee83a 	callr	r2
    85ec:	10002c1e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    85f0:	84000044 	addi	r16,r16,1
    85f4:	003fe606 	br	8590 <_gp+0xffff7670>
    85f8:	4a7fffc4 	addi	r9,r9,-1
    85fc:	48800003 	ldbu	r2,0(r9)
    8600:	01c00044 	movi	r7,1
    8604:	d9800804 	addi	r6,sp,32
    8608:	d8800805 	stb	r2,32(sp)
    860c:	e0800117 	ldw	r2,4(fp)
    8610:	e00b883a 	mov	r5,fp
    8614:	da401015 	stw	r9,64(sp)
    8618:	9809883a 	mov	r4,r19
    861c:	103ee83a 	callr	r2
    8620:	da401017 	ldw	r9,64(sp)
    8624:	10001e1e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    8628:	8245c83a 	sub	r2,r16,r9
    862c:	4d89883a 	add	r4,r9,r22
    8630:	a085883a 	add	r2,r20,r2
    8634:	013ff016 	blt	zero,r4,85f8 <_gp+0xffff76d8>
    8638:	1021883a 	mov	r16,r2
    863c:	dd800d17 	ldw	r22,52(sp)
    8640:	00004406 	br	8754 <___vfprintf_internal_r+0x4dc>
    8644:	00800044 	movi	r2,1
    8648:	1440080e 	bge	r2,r17,866c <___vfprintf_internal_r+0x3f4>
    864c:	8d3fffc4 	addi	r20,r17,-1
    8650:	a00f883a 	mov	r7,r20
    8654:	01800804 	movi	r6,32
    8658:	e00b883a 	mov	r5,fp
    865c:	9809883a 	mov	r4,r19
    8660:	000820c0 	call	820c <print_repeat>
    8664:	10000e1e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    8668:	8521883a 	add	r16,r16,r20
    866c:	b0800017 	ldw	r2,0(r22)
    8670:	01c00044 	movi	r7,1
    8674:	d80d883a 	mov	r6,sp
    8678:	d8800005 	stb	r2,0(sp)
    867c:	e0800117 	ldw	r2,4(fp)
    8680:	e00b883a 	mov	r5,fp
    8684:	9809883a 	mov	r4,r19
    8688:	b5000104 	addi	r20,r22,4
    868c:	103ee83a 	callr	r2
    8690:	1000031e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0x428>
    8694:	84000044 	addi	r16,r16,1
    8698:	a02d883a 	mov	r22,r20
    869c:	00002d06 	br	8754 <___vfprintf_internal_r+0x4dc>
    86a0:	00bfffc4 	movi	r2,-1
    86a4:	00003106 	br	876c <___vfprintf_internal_r+0x4f4>
    86a8:	b5000017 	ldw	r20,0(r22)
    86ac:	b0c00104 	addi	r3,r22,4
    86b0:	d8c00a15 	stw	r3,40(sp)
    86b4:	a009883a 	mov	r4,r20
    86b8:	00088700 	call	8870 <strlen>
    86bc:	8893c83a 	sub	r9,r17,r2
    86c0:	102d883a 	mov	r22,r2
    86c4:	0240090e 	bge	zero,r9,86ec <___vfprintf_internal_r+0x474>
    86c8:	480f883a 	mov	r7,r9
    86cc:	01800804 	movi	r6,32
    86d0:	e00b883a 	mov	r5,fp
    86d4:	9809883a 	mov	r4,r19
    86d8:	da401015 	stw	r9,64(sp)
    86dc:	000820c0 	call	820c <print_repeat>
    86e0:	da401017 	ldw	r9,64(sp)
    86e4:	103fee1e 	bne	r2,zero,86a0 <_gp+0xffff7780>
    86e8:	8261883a 	add	r16,r16,r9
    86ec:	e0800117 	ldw	r2,4(fp)
    86f0:	b00f883a 	mov	r7,r22
    86f4:	a00d883a 	mov	r6,r20
    86f8:	e00b883a 	mov	r5,fp
    86fc:	9809883a 	mov	r4,r19
    8700:	103ee83a 	callr	r2
    8704:	103fe61e 	bne	r2,zero,86a0 <_gp+0xffff7780>
    8708:	85a1883a 	add	r16,r16,r22
    870c:	dd800a17 	ldw	r22,40(sp)
    8710:	00001006 	br	8754 <___vfprintf_internal_r+0x4dc>
    8714:	05c00044 	movi	r23,1
    8718:	04bfffc4 	movi	r18,-1
    871c:	d8000e15 	stw	zero,56(sp)
    8720:	05400284 	movi	r21,10
    8724:	9023883a 	mov	r17,r18
    8728:	d8000c15 	stw	zero,48(sp)
    872c:	d8000b15 	stw	zero,44(sp)
    8730:	b829883a 	mov	r20,r23
    8734:	00000806 	br	8758 <___vfprintf_internal_r+0x4e0>
    8738:	dd000b15 	stw	r20,44(sp)
    873c:	05000084 	movi	r20,2
    8740:	00000506 	br	8758 <___vfprintf_internal_r+0x4e0>
    8744:	00c00044 	movi	r3,1
    8748:	d8c00c15 	stw	r3,48(sp)
    874c:	050000c4 	movi	r20,3
    8750:	00000106 	br	8758 <___vfprintf_internal_r+0x4e0>
    8754:	0029883a 	mov	r20,zero
    8758:	d8c00f17 	ldw	r3,60(sp)
    875c:	18c00044 	addi	r3,r3,1
    8760:	d8c00f15 	stw	r3,60(sp)
    8764:	003ede06 	br	82e0 <_gp+0xffff73c0>
    8768:	8005883a 	mov	r2,r16
    876c:	dfc01a17 	ldw	ra,104(sp)
    8770:	df001917 	ldw	fp,100(sp)
    8774:	ddc01817 	ldw	r23,96(sp)
    8778:	dd801717 	ldw	r22,92(sp)
    877c:	dd401617 	ldw	r21,88(sp)
    8780:	dd001517 	ldw	r20,84(sp)
    8784:	dcc01417 	ldw	r19,80(sp)
    8788:	dc801317 	ldw	r18,76(sp)
    878c:	dc401217 	ldw	r17,72(sp)
    8790:	dc001117 	ldw	r16,68(sp)
    8794:	dec01b04 	addi	sp,sp,108
    8798:	f800283a 	ret

0000879c <__vfprintf_internal>:
    879c:	00800074 	movhi	r2,1
    87a0:	10a3c904 	addi	r2,r2,-28892
    87a4:	300f883a 	mov	r7,r6
    87a8:	280d883a 	mov	r6,r5
    87ac:	200b883a 	mov	r5,r4
    87b0:	11000017 	ldw	r4,0(r2)
    87b4:	00082781 	jmpi	8278 <___vfprintf_internal_r>

000087b8 <__sfvwrite_small_dev>:
    87b8:	2880000b 	ldhu	r2,0(r5)
    87bc:	1080020c 	andi	r2,r2,8
    87c0:	10002126 	beq	r2,zero,8848 <__sfvwrite_small_dev+0x90>
    87c4:	2880008f 	ldh	r2,2(r5)
    87c8:	defffa04 	addi	sp,sp,-24
    87cc:	dc000015 	stw	r16,0(sp)
    87d0:	dfc00515 	stw	ra,20(sp)
    87d4:	dd000415 	stw	r20,16(sp)
    87d8:	dcc00315 	stw	r19,12(sp)
    87dc:	dc800215 	stw	r18,8(sp)
    87e0:	dc400115 	stw	r17,4(sp)
    87e4:	2821883a 	mov	r16,r5
    87e8:	10001216 	blt	r2,zero,8834 <__sfvwrite_small_dev+0x7c>
    87ec:	2027883a 	mov	r19,r4
    87f0:	3025883a 	mov	r18,r6
    87f4:	3823883a 	mov	r17,r7
    87f8:	05010004 	movi	r20,1024
    87fc:	04400b0e 	bge	zero,r17,882c <__sfvwrite_small_dev+0x74>
    8800:	880f883a 	mov	r7,r17
    8804:	a440010e 	bge	r20,r17,880c <__sfvwrite_small_dev+0x54>
    8808:	01c10004 	movi	r7,1024
    880c:	8140008f 	ldh	r5,2(r16)
    8810:	900d883a 	mov	r6,r18
    8814:	9809883a 	mov	r4,r19
    8818:	000888c0 	call	888c <_write_r>
    881c:	0080050e 	bge	zero,r2,8834 <__sfvwrite_small_dev+0x7c>
    8820:	88a3c83a 	sub	r17,r17,r2
    8824:	90a5883a 	add	r18,r18,r2
    8828:	003ff406 	br	87fc <_gp+0xffff78dc>
    882c:	0005883a 	mov	r2,zero
    8830:	00000706 	br	8850 <__sfvwrite_small_dev+0x98>
    8834:	8080000b 	ldhu	r2,0(r16)
    8838:	10801014 	ori	r2,r2,64
    883c:	8080000d 	sth	r2,0(r16)
    8840:	00bfffc4 	movi	r2,-1
    8844:	00000206 	br	8850 <__sfvwrite_small_dev+0x98>
    8848:	00bfffc4 	movi	r2,-1
    884c:	f800283a 	ret
    8850:	dfc00517 	ldw	ra,20(sp)
    8854:	dd000417 	ldw	r20,16(sp)
    8858:	dcc00317 	ldw	r19,12(sp)
    885c:	dc800217 	ldw	r18,8(sp)
    8860:	dc400117 	ldw	r17,4(sp)
    8864:	dc000017 	ldw	r16,0(sp)
    8868:	dec00604 	addi	sp,sp,24
    886c:	f800283a 	ret

00008870 <strlen>:
    8870:	2005883a 	mov	r2,r4
    8874:	10c00007 	ldb	r3,0(r2)
    8878:	18000226 	beq	r3,zero,8884 <strlen+0x14>
    887c:	10800044 	addi	r2,r2,1
    8880:	003ffc06 	br	8874 <_gp+0xffff7954>
    8884:	1105c83a 	sub	r2,r2,r4
    8888:	f800283a 	ret

0000888c <_write_r>:
    888c:	defffd04 	addi	sp,sp,-12
    8890:	dc000015 	stw	r16,0(sp)
    8894:	04000074 	movhi	r16,1
    8898:	dc400115 	stw	r17,4(sp)
    889c:	84242804 	addi	r16,r16,-28512
    88a0:	2023883a 	mov	r17,r4
    88a4:	2809883a 	mov	r4,r5
    88a8:	300b883a 	mov	r5,r6
    88ac:	380d883a 	mov	r6,r7
    88b0:	dfc00215 	stw	ra,8(sp)
    88b4:	80000015 	stw	zero,0(r16)
    88b8:	0008c200 	call	8c20 <write>
    88bc:	00ffffc4 	movi	r3,-1
    88c0:	10c0031e 	bne	r2,r3,88d0 <_write_r+0x44>
    88c4:	80c00017 	ldw	r3,0(r16)
    88c8:	18000126 	beq	r3,zero,88d0 <_write_r+0x44>
    88cc:	88c00015 	stw	r3,0(r17)
    88d0:	dfc00217 	ldw	ra,8(sp)
    88d4:	dc400117 	ldw	r17,4(sp)
    88d8:	dc000017 	ldw	r16,0(sp)
    88dc:	dec00304 	addi	sp,sp,12
    88e0:	f800283a 	ret

000088e4 <__divsi3>:
    88e4:	20001b16 	blt	r4,zero,8954 <__divsi3+0x70>
    88e8:	000f883a 	mov	r7,zero
    88ec:	28001616 	blt	r5,zero,8948 <__divsi3+0x64>
    88f0:	200d883a 	mov	r6,r4
    88f4:	29001a2e 	bgeu	r5,r4,8960 <__divsi3+0x7c>
    88f8:	00800804 	movi	r2,32
    88fc:	00c00044 	movi	r3,1
    8900:	00000106 	br	8908 <__divsi3+0x24>
    8904:	10000d26 	beq	r2,zero,893c <__divsi3+0x58>
    8908:	294b883a 	add	r5,r5,r5
    890c:	10bfffc4 	addi	r2,r2,-1
    8910:	18c7883a 	add	r3,r3,r3
    8914:	293ffb36 	bltu	r5,r4,8904 <_gp+0xffff79e4>
    8918:	0005883a 	mov	r2,zero
    891c:	18000726 	beq	r3,zero,893c <__divsi3+0x58>
    8920:	0005883a 	mov	r2,zero
    8924:	31400236 	bltu	r6,r5,8930 <__divsi3+0x4c>
    8928:	314dc83a 	sub	r6,r6,r5
    892c:	10c4b03a 	or	r2,r2,r3
    8930:	1806d07a 	srli	r3,r3,1
    8934:	280ad07a 	srli	r5,r5,1
    8938:	183ffa1e 	bne	r3,zero,8924 <_gp+0xffff7a04>
    893c:	38000126 	beq	r7,zero,8944 <__divsi3+0x60>
    8940:	0085c83a 	sub	r2,zero,r2
    8944:	f800283a 	ret
    8948:	014bc83a 	sub	r5,zero,r5
    894c:	39c0005c 	xori	r7,r7,1
    8950:	003fe706 	br	88f0 <_gp+0xffff79d0>
    8954:	0109c83a 	sub	r4,zero,r4
    8958:	01c00044 	movi	r7,1
    895c:	003fe306 	br	88ec <_gp+0xffff79cc>
    8960:	00c00044 	movi	r3,1
    8964:	003fee06 	br	8920 <_gp+0xffff7a00>

00008968 <__modsi3>:
    8968:	20001716 	blt	r4,zero,89c8 <__modsi3+0x60>
    896c:	000f883a 	mov	r7,zero
    8970:	2005883a 	mov	r2,r4
    8974:	28001216 	blt	r5,zero,89c0 <__modsi3+0x58>
    8978:	2900162e 	bgeu	r5,r4,89d4 <__modsi3+0x6c>
    897c:	01800804 	movi	r6,32
    8980:	00c00044 	movi	r3,1
    8984:	00000106 	br	898c <__modsi3+0x24>
    8988:	30000a26 	beq	r6,zero,89b4 <__modsi3+0x4c>
    898c:	294b883a 	add	r5,r5,r5
    8990:	31bfffc4 	addi	r6,r6,-1
    8994:	18c7883a 	add	r3,r3,r3
    8998:	293ffb36 	bltu	r5,r4,8988 <_gp+0xffff7a68>
    899c:	18000526 	beq	r3,zero,89b4 <__modsi3+0x4c>
    89a0:	1806d07a 	srli	r3,r3,1
    89a4:	11400136 	bltu	r2,r5,89ac <__modsi3+0x44>
    89a8:	1145c83a 	sub	r2,r2,r5
    89ac:	280ad07a 	srli	r5,r5,1
    89b0:	183ffb1e 	bne	r3,zero,89a0 <_gp+0xffff7a80>
    89b4:	38000126 	beq	r7,zero,89bc <__modsi3+0x54>
    89b8:	0085c83a 	sub	r2,zero,r2
    89bc:	f800283a 	ret
    89c0:	014bc83a 	sub	r5,zero,r5
    89c4:	003fec06 	br	8978 <_gp+0xffff7a58>
    89c8:	0109c83a 	sub	r4,zero,r4
    89cc:	01c00044 	movi	r7,1
    89d0:	003fe706 	br	8970 <_gp+0xffff7a50>
    89d4:	00c00044 	movi	r3,1
    89d8:	003ff106 	br	89a0 <_gp+0xffff7a80>

000089dc <__udivsi3>:
    89dc:	200d883a 	mov	r6,r4
    89e0:	2900152e 	bgeu	r5,r4,8a38 <__udivsi3+0x5c>
    89e4:	28001416 	blt	r5,zero,8a38 <__udivsi3+0x5c>
    89e8:	00800804 	movi	r2,32
    89ec:	00c00044 	movi	r3,1
    89f0:	00000206 	br	89fc <__udivsi3+0x20>
    89f4:	10000e26 	beq	r2,zero,8a30 <__udivsi3+0x54>
    89f8:	28000516 	blt	r5,zero,8a10 <__udivsi3+0x34>
    89fc:	294b883a 	add	r5,r5,r5
    8a00:	10bfffc4 	addi	r2,r2,-1
    8a04:	18c7883a 	add	r3,r3,r3
    8a08:	293ffa36 	bltu	r5,r4,89f4 <_gp+0xffff7ad4>
    8a0c:	18000826 	beq	r3,zero,8a30 <__udivsi3+0x54>
    8a10:	0005883a 	mov	r2,zero
    8a14:	31400236 	bltu	r6,r5,8a20 <__udivsi3+0x44>
    8a18:	314dc83a 	sub	r6,r6,r5
    8a1c:	10c4b03a 	or	r2,r2,r3
    8a20:	1806d07a 	srli	r3,r3,1
    8a24:	280ad07a 	srli	r5,r5,1
    8a28:	183ffa1e 	bne	r3,zero,8a14 <_gp+0xffff7af4>
    8a2c:	f800283a 	ret
    8a30:	0005883a 	mov	r2,zero
    8a34:	f800283a 	ret
    8a38:	00c00044 	movi	r3,1
    8a3c:	003ff406 	br	8a10 <_gp+0xffff7af0>

00008a40 <__umodsi3>:
    8a40:	2005883a 	mov	r2,r4
    8a44:	2900122e 	bgeu	r5,r4,8a90 <__umodsi3+0x50>
    8a48:	28001116 	blt	r5,zero,8a90 <__umodsi3+0x50>
    8a4c:	01800804 	movi	r6,32
    8a50:	00c00044 	movi	r3,1
    8a54:	00000206 	br	8a60 <__umodsi3+0x20>
    8a58:	30000c26 	beq	r6,zero,8a8c <__umodsi3+0x4c>
    8a5c:	28000516 	blt	r5,zero,8a74 <__umodsi3+0x34>
    8a60:	294b883a 	add	r5,r5,r5
    8a64:	31bfffc4 	addi	r6,r6,-1
    8a68:	18c7883a 	add	r3,r3,r3
    8a6c:	293ffa36 	bltu	r5,r4,8a58 <_gp+0xffff7b38>
    8a70:	18000626 	beq	r3,zero,8a8c <__umodsi3+0x4c>
    8a74:	1806d07a 	srli	r3,r3,1
    8a78:	11400136 	bltu	r2,r5,8a80 <__umodsi3+0x40>
    8a7c:	1145c83a 	sub	r2,r2,r5
    8a80:	280ad07a 	srli	r5,r5,1
    8a84:	183ffb1e 	bne	r3,zero,8a74 <_gp+0xffff7b54>
    8a88:	f800283a 	ret
    8a8c:	f800283a 	ret
    8a90:	00c00044 	movi	r3,1
    8a94:	003ff706 	br	8a74 <_gp+0xffff7b54>

00008a98 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8a98:	00800074 	movhi	r2,1
    8a9c:	10a3b204 	addi	r2,r2,-28984
    8aa0:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8aa4:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8aa8:	01000074 	movhi	r4,1
    8aac:	01800044 	movi	r6,1
    8ab0:	d80b883a 	mov	r5,sp
    8ab4:	2123ca04 	addi	r4,r4,-28888
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8ab8:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8abc:	0008ca40 	call	8ca4 <altera_avalon_jtag_uart_read>
    8ac0:	0080020e 	bge	zero,r2,8acc <alt_getchar+0x34>
        return -1;
    }
    return c;
    8ac4:	d8800007 	ldb	r2,0(sp)
    8ac8:	00000106 	br	8ad0 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    8acc:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    8ad0:	dfc00117 	ldw	ra,4(sp)
    8ad4:	dec00204 	addi	sp,sp,8
    8ad8:	f800283a 	ret

00008adc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8adc:	deffff04 	addi	sp,sp,-4
    8ae0:	01000074 	movhi	r4,1
    8ae4:	01400074 	movhi	r5,1
    8ae8:	dfc00015 	stw	ra,0(sp)
    8aec:	21237a04 	addi	r4,r4,-29208
    8af0:	2963d104 	addi	r5,r5,-28860

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8af4:	2140061e 	bne	r4,r5,8b10 <alt_load+0x34>
    8af8:	01000074 	movhi	r4,1
    8afc:	01400074 	movhi	r5,1
    8b00:	21200804 	addi	r4,r4,-32736
    8b04:	29600804 	addi	r5,r5,-32736
    8b08:	2140121e 	bne	r4,r5,8b54 <alt_load+0x78>
    8b0c:	00000b06 	br	8b3c <alt_load+0x60>
    8b10:	00c00074 	movhi	r3,1
    8b14:	18e3d104 	addi	r3,r3,-28860
    8b18:	1907c83a 	sub	r3,r3,r4
    8b1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b20:	10fff526 	beq	r2,r3,8af8 <_gp+0xffff7bd8>
    {
      *to++ = *from++;
    8b24:	114f883a 	add	r7,r2,r5
    8b28:	39c00017 	ldw	r7,0(r7)
    8b2c:	110d883a 	add	r6,r2,r4
    8b30:	10800104 	addi	r2,r2,4
    8b34:	31c00015 	stw	r7,0(r6)
    8b38:	003ff906 	br	8b20 <_gp+0xffff7c00>
    8b3c:	01000074 	movhi	r4,1
    8b40:	01400074 	movhi	r5,1
    8b44:	21236304 	addi	r4,r4,-29300
    8b48:	29636304 	addi	r5,r5,-29300

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b4c:	2140101e 	bne	r4,r5,8b90 <alt_load+0xb4>
    8b50:	00000b06 	br	8b80 <alt_load+0xa4>
    8b54:	00c00074 	movhi	r3,1
    8b58:	18e00804 	addi	r3,r3,-32736
    8b5c:	1907c83a 	sub	r3,r3,r4
    8b60:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b64:	10fff526 	beq	r2,r3,8b3c <_gp+0xffff7c1c>
    {
      *to++ = *from++;
    8b68:	114f883a 	add	r7,r2,r5
    8b6c:	39c00017 	ldw	r7,0(r7)
    8b70:	110d883a 	add	r6,r2,r4
    8b74:	10800104 	addi	r2,r2,4
    8b78:	31c00015 	stw	r7,0(r6)
    8b7c:	003ff906 	br	8b64 <_gp+0xffff7c44>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b80:	0008d340 	call	8d34 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b84:	dfc00017 	ldw	ra,0(sp)
    8b88:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8b8c:	0008d401 	jmpi	8d40 <alt_icache_flush_all>
    8b90:	00c00074 	movhi	r3,1
    8b94:	18e37a04 	addi	r3,r3,-29208
    8b98:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ba0:	18bff726 	beq	r3,r2,8b80 <_gp+0xffff7c60>
    {
      *to++ = *from++;
    8ba4:	114f883a 	add	r7,r2,r5
    8ba8:	39c00017 	ldw	r7,0(r7)
    8bac:	110d883a 	add	r6,r2,r4
    8bb0:	10800104 	addi	r2,r2,4
    8bb4:	31c00015 	stw	r7,0(r6)
    8bb8:	003ff906 	br	8ba0 <_gp+0xffff7c80>

00008bbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8bbc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8bc0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8bc4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8bc8:	0008c800 	call	8c80 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8bcc:	0008ca00 	call	8ca0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8bd0:	d1a06117 	ldw	r6,-32380(gp)
    8bd4:	d1606217 	ldw	r5,-32376(gp)
    8bd8:	d1206317 	ldw	r4,-32372(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8bdc:	dfc00017 	ldw	ra,0(sp)
    8be0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8be4:	00080701 	jmpi	8070 <main>

00008be8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8be8:	defffe04 	addi	sp,sp,-8
    8bec:	dc000015 	stw	r16,0(sp)
    8bf0:	dfc00115 	stw	ra,4(sp)
    8bf4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8bf8:	00088700 	call	8870 <strlen>
    8bfc:	01000074 	movhi	r4,1
    8c00:	000f883a 	mov	r7,zero
    8c04:	100d883a 	mov	r6,r2
    8c08:	800b883a 	mov	r5,r16
    8c0c:	2123ca04 	addi	r4,r4,-28888
#else
    return fputs(str, stdout);
#endif
#endif
}
    8c10:	dfc00117 	ldw	ra,4(sp)
    8c14:	dc000017 	ldw	r16,0(sp)
    8c18:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8c1c:	0008d001 	jmpi	8d00 <altera_avalon_jtag_uart_write>

00008c20 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8c20:	00800044 	movi	r2,1
    8c24:	20800226 	beq	r4,r2,8c30 <write+0x10>
    8c28:	00800084 	movi	r2,2
    8c2c:	2080041e 	bne	r4,r2,8c40 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8c30:	01000074 	movhi	r4,1
    8c34:	000f883a 	mov	r7,zero
    8c38:	2123ca04 	addi	r4,r4,-28888
    8c3c:	0008d001 	jmpi	8d00 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8c40:	d0a00817 	ldw	r2,-32736(gp)
    8c44:	10000926 	beq	r2,zero,8c6c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8c48:	deffff04 	addi	sp,sp,-4
    8c4c:	dfc00015 	stw	ra,0(sp)
    8c50:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8c54:	00c01444 	movi	r3,81
    8c58:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c5c:	00bfffc4 	movi	r2,-1
    8c60:	dfc00017 	ldw	ra,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
    8c68:	f800283a 	ret
    8c6c:	d0a06004 	addi	r2,gp,-32384
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8c70:	00c01444 	movi	r3,81
    8c74:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c78:	00bfffc4 	movi	r2,-1
    8c7c:	f800283a 	ret

00008c80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8c80:	deffff04 	addi	sp,sp,-4
    8c84:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8c88:	0008d4c0 	call	8d4c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8c8c:	00800044 	movi	r2,1
    8c90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8c94:	dfc00017 	ldw	ra,0(sp)
    8c98:	dec00104 	addi	sp,sp,4
    8c9c:	f800283a 	ret

00008ca0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8ca0:	f800283a 	ret

00008ca4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    8ca4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    8ca8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    8cac:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8cb0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8cb4:	11800b2e 	bgeu	r2,r6,8ce4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8cb8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8cbc:	1a60000c 	andi	r9,r3,32768
    8cc0:	48000326 	beq	r9,zero,8cd0 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8cc4:	10c00005 	stb	r3,0(r2)
    8cc8:	10800044 	addi	r2,r2,1
    8ccc:	003ff906 	br	8cb4 <_gp+0xffff7d94>
    else if (ptr != buffer)
    8cd0:	11400226 	beq	r2,r5,8cdc <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    8cd4:	1145c83a 	sub	r2,r2,r5
    8cd8:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8cdc:	403ff526 	beq	r8,zero,8cb4 <_gp+0xffff7d94>
    8ce0:	00000106 	br	8ce8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    8ce4:	117ffb1e 	bne	r2,r5,8cd4 <_gp+0xffff7db4>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    8ce8:	39d0000c 	andi	r7,r7,16384
    8cec:	3800021e 	bne	r7,zero,8cf8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    8cf0:	00bffec4 	movi	r2,-5
    8cf4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    8cf8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    8cfc:	f800283a 	ret

00008d00 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8d00:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8d04:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8d08:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8d0c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8d10:	2980072e 	bgeu	r5,r6,8d30 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8d14:	38c00037 	ldwio	r3,0(r7)
    8d18:	18ffffec 	andhi	r3,r3,65535
    8d1c:	183ffc26 	beq	r3,zero,8d10 <_gp+0xffff7df0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8d20:	28c00007 	ldb	r3,0(r5)
    8d24:	20c00035 	stwio	r3,0(r4)
    8d28:	29400044 	addi	r5,r5,1
    8d2c:	003ff806 	br	8d10 <_gp+0xffff7df0>

  return count;
}
    8d30:	f800283a 	ret

00008d34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8d34:	f800283a 	ret

00008d38 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    8d38:	3005883a 	mov	r2,r6
    8d3c:	f800283a 	ret

00008d40 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8d40:	01420004 	movi	r5,2048
    8d44:	0009883a 	mov	r4,zero
    8d48:	0008d541 	jmpi	8d54 <alt_icache_flush>

00008d4c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8d4c:	000170fa 	wrctl	ienable,zero
    8d50:	f800283a 	ret

00008d54 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    8d54:	00820004 	movi	r2,2048
    8d58:	1140012e 	bgeu	r2,r5,8d60 <alt_icache_flush+0xc>
    8d5c:	100b883a 	mov	r5,r2
    8d60:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8d64:	2005883a 	mov	r2,r4
    8d68:	1140032e 	bgeu	r2,r5,8d78 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8d6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8d70:	10800804 	addi	r2,r2,32
    8d74:	003ffc06 	br	8d68 <_gp+0xffff7e48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8d78:	210007cc 	andi	r4,r4,31
    8d7c:	20000126 	beq	r4,zero,8d84 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8d80:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8d84:	0000203a 	flushp
    8d88:	f800283a 	ret
